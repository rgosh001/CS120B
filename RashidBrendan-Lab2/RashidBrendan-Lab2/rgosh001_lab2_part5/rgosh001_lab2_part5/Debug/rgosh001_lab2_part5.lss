
rgosh001_lab2_part5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  000000e4  00000158  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000e4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000158  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000030  00000000  00000000  00000188  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000335  00000000  00000000  000001b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000000d2  00000000  00000000  000004ed  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000013f  00000000  00000000  000005bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000044  00000000  00000000  00000700  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000001cb  00000000  00000000  00000744  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000322  00000000  00000000  0000090f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000020  00000000  00000000  00000c31  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	02 d0       	rcall	.+4      	; 0x9e <main>
  9a:	22 c0       	rjmp	.+68     	; 0xe0 <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <main>:
		
		PORTB = 0x00;
		
		if (GetBit(tempD, 6))
		{
			tempDB = SetBit(tempDB, 7, 1);
  9e:	30 e8       	ldi	r19, 0x80	; 128

int main(void)
{
    while(1)
    {
		unsigned char tempD = PIND;
  a0:	99 b1       	in	r25, 0x09	; 9
		unsigned char tempB = PINB;
  a2:	23 b1       	in	r18, 0x03	; 3
		unsigned char tempDB = 0x00;
		
		PORTB = 0x00;
  a4:	15 b8       	out	0x05, r1	; 5
		
		if (GetBit(tempD, 6))
  a6:	96 fd       	sbrc	r25, 6
  a8:	02 c0       	rjmp	.+4      	; 0xae <main+0x10>
{
    while(1)
    {
		unsigned char tempD = PIND;
		unsigned char tempB = PINB;
		unsigned char tempDB = 0x00;
  aa:	80 e0       	ldi	r24, 0x00	; 0
  ac:	01 c0       	rjmp	.+2      	; 0xb0 <main+0x12>
		
		PORTB = 0x00;
		
		if (GetBit(tempD, 6))
		{
			tempDB = SetBit(tempDB, 7, 1);
  ae:	83 2f       	mov	r24, r19
		}
		if (GetBit(tempD, 5))
  b0:	95 fd       	sbrc	r25, 5
 */ 


unsigned char SetBit(unsigned char x, unsigned char k, unsigned char b)
{
	return (b ? x | (0x01 << k) : x & ~(0x01 << k));
  b2:	80 64       	ori	r24, 0x40	; 64
		}
		if (GetBit(tempD, 5))
		{
			tempDB = SetBit(tempDB, 6, 1);
		}
		if (GetBit(tempD, 4))
  b4:	94 fd       	sbrc	r25, 4
 */ 


unsigned char SetBit(unsigned char x, unsigned char k, unsigned char b)
{
	return (b ? x | (0x01 << k) : x & ~(0x01 << k));
  b6:	80 62       	ori	r24, 0x20	; 32
		}
		if (GetBit(tempD, 4))
		{
			tempDB = SetBit(tempDB, 5, 1);
		}
		if (GetBit(tempD, 3))
  b8:	93 fd       	sbrc	r25, 3
 */ 


unsigned char SetBit(unsigned char x, unsigned char k, unsigned char b)
{
	return (b ? x | (0x01 << k) : x & ~(0x01 << k));
  ba:	80 61       	ori	r24, 0x10	; 16
		}
		if (GetBit(tempD, 3))
		{
			tempDB = SetBit(tempDB, 4, 1);
		}
		if (GetBit(tempD, 2))
  bc:	92 fd       	sbrc	r25, 2
 */ 


unsigned char SetBit(unsigned char x, unsigned char k, unsigned char b)
{
	return (b ? x | (0x01 << k) : x & ~(0x01 << k));
  be:	88 60       	ori	r24, 0x08	; 8
		}
		if (GetBit(tempD, 2))
		{
			tempDB = SetBit(tempDB, 3, 1);
		}
		if (GetBit(tempD, 1))
  c0:	91 fd       	sbrc	r25, 1
 */ 


unsigned char SetBit(unsigned char x, unsigned char k, unsigned char b)
{
	return (b ? x | (0x01 << k) : x & ~(0x01 << k));
  c2:	84 60       	ori	r24, 0x04	; 4
		}
		if (GetBit(tempD, 1))
		{
			tempDB = SetBit(tempDB, 2, 1);
		}
		if (GetBit(tempD, 0))
  c4:	90 fd       	sbrc	r25, 0
 */ 


unsigned char SetBit(unsigned char x, unsigned char k, unsigned char b)
{
	return (b ? x | (0x01 << k) : x & ~(0x01 << k));
  c6:	82 60       	ori	r24, 0x02	; 2
		}
		if (GetBit(tempD, 0))
		{
			tempDB = SetBit(tempDB, 1, 1);
		}
		if (GetBit(tempB, 0))
  c8:	20 fd       	sbrc	r18, 0
 */ 


unsigned char SetBit(unsigned char x, unsigned char k, unsigned char b)
{
	return (b ? x | (0x01 << k) : x & ~(0x01 << k));
  ca:	81 60       	ori	r24, 0x01	; 1
		if (GetBit(tempB, 0))
		{
			tempDB = SetBit(tempDB, 0, 1);
		}
		
        if(tempDB >= 0x46)
  cc:	86 34       	cpi	r24, 0x46	; 70
  ce:	08 f0       	brcs	.+2      	; 0xd2 <main+0x34>
 */ 


unsigned char SetBit(unsigned char x, unsigned char k, unsigned char b)
{
	return (b ? x | (0x01 << k) : x & ~(0x01 << k));
  d0:	22 60       	ori	r18, 0x02	; 2
		
        if(tempDB >= 0x46)
		{
			tempB = SetBit(tempB, 1, 1);
		}
		if ((tempDB > 0x05) && (tempDB < 0x46)) //weight is >5 && <70
  d2:	86 50       	subi	r24, 0x06	; 6
  d4:	80 34       	cpi	r24, 0x40	; 64
  d6:	10 f4       	brcc	.+4      	; 0xdc <main+0x3e>
 */ 


unsigned char SetBit(unsigned char x, unsigned char k, unsigned char b)
{
	return (b ? x | (0x01 << k) : x & ~(0x01 << k));
  d8:	2d 7f       	andi	r18, 0xFD	; 253
  da:	24 60       	ori	r18, 0x04	; 4
		{
			tempB = SetBit(tempB, 1, 0);
			tempB = SetBit(tempB, 2, 1);
		}
		
		PORTB = tempB;
  dc:	25 b9       	out	0x05, r18	; 5
    }
  de:	e0 cf       	rjmp	.-64     	; 0xa0 <main+0x2>

000000e0 <_exit>:
  e0:	f8 94       	cli

000000e2 <__stop_program>:
  e2:	ff cf       	rjmp	.-2      	; 0xe2 <__stop_program>
