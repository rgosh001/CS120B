
Final_Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000126  00800100  00001816  000018aa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001816  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000019  00800226  00800226  000019d0  2**0
                  ALLOC
  3 .stab         00000840  00000000  00000000  000019d0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000181  00000000  00000000  00002210  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00002391  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000000c0  00000000  00000000  000023c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001a56  00000000  00000000  00002480  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000249  00000000  00000000  00003ed6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000017ce  00000000  00000000  0000411f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001bc  00000000  00000000  000058f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000629  00000000  00000000  00005aac  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000037f  00000000  00000000  000060d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000000b0  00000000  00000000  00006454  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	89 c0       	rjmp	.+274    	; 0x114 <__ctors_end>
       2:	00 00       	nop
       4:	a6 c0       	rjmp	.+332    	; 0x152 <__bad_interrupt>
       6:	00 00       	nop
       8:	a4 c0       	rjmp	.+328    	; 0x152 <__bad_interrupt>
       a:	00 00       	nop
       c:	a2 c0       	rjmp	.+324    	; 0x152 <__bad_interrupt>
       e:	00 00       	nop
      10:	a0 c0       	rjmp	.+320    	; 0x152 <__bad_interrupt>
      12:	00 00       	nop
      14:	9e c0       	rjmp	.+316    	; 0x152 <__bad_interrupt>
      16:	00 00       	nop
      18:	9c c0       	rjmp	.+312    	; 0x152 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	9a c0       	rjmp	.+308    	; 0x152 <__bad_interrupt>
      1e:	00 00       	nop
      20:	98 c0       	rjmp	.+304    	; 0x152 <__bad_interrupt>
      22:	00 00       	nop
      24:	96 c0       	rjmp	.+300    	; 0x152 <__bad_interrupt>
      26:	00 00       	nop
      28:	94 c0       	rjmp	.+296    	; 0x152 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	92 c0       	rjmp	.+292    	; 0x152 <__bad_interrupt>
      2e:	00 00       	nop
      30:	90 c0       	rjmp	.+288    	; 0x152 <__bad_interrupt>
      32:	00 00       	nop
      34:	19 c1       	rjmp	.+562    	; 0x268 <__vector_13>
      36:	00 00       	nop
      38:	8c c0       	rjmp	.+280    	; 0x152 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	8a c0       	rjmp	.+276    	; 0x152 <__bad_interrupt>
      3e:	00 00       	nop
      40:	88 c0       	rjmp	.+272    	; 0x152 <__bad_interrupt>
      42:	00 00       	nop
      44:	86 c0       	rjmp	.+268    	; 0x152 <__bad_interrupt>
      46:	00 00       	nop
      48:	84 c0       	rjmp	.+264    	; 0x152 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	82 c0       	rjmp	.+260    	; 0x152 <__bad_interrupt>
      4e:	00 00       	nop
      50:	80 c0       	rjmp	.+256    	; 0x152 <__bad_interrupt>
      52:	00 00       	nop
      54:	7e c0       	rjmp	.+252    	; 0x152 <__bad_interrupt>
      56:	00 00       	nop
      58:	7c c0       	rjmp	.+248    	; 0x152 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	7a c0       	rjmp	.+244    	; 0x152 <__bad_interrupt>
      5e:	00 00       	nop
      60:	78 c0       	rjmp	.+240    	; 0x152 <__bad_interrupt>
      62:	00 00       	nop
      64:	76 c0       	rjmp	.+236    	; 0x152 <__bad_interrupt>
      66:	00 00       	nop
      68:	74 c0       	rjmp	.+232    	; 0x152 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	72 c0       	rjmp	.+228    	; 0x152 <__bad_interrupt>
      6e:	00 00       	nop
      70:	70 c0       	rjmp	.+224    	; 0x152 <__bad_interrupt>
      72:	00 00       	nop
      74:	6e c0       	rjmp	.+220    	; 0x152 <__bad_interrupt>
      76:	00 00       	nop
      78:	6c c0       	rjmp	.+216    	; 0x152 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	6a c0       	rjmp	.+212    	; 0x152 <__bad_interrupt>
      7e:	00 00       	nop
      80:	68 c0       	rjmp	.+208    	; 0x152 <__bad_interrupt>
      82:	00 00       	nop
      84:	66 c0       	rjmp	.+204    	; 0x152 <__bad_interrupt>
      86:	00 00       	nop
      88:	64 c0       	rjmp	.+200    	; 0x152 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	d1 06       	cpc	r13, r17
      8e:	e1 06       	cpc	r14, r17
      90:	e5 06       	cpc	r14, r21
      92:	e9 06       	cpc	r14, r25
      94:	ed 06       	cpc	r14, r29
      96:	f1 06       	cpc	r15, r17
      98:	f5 06       	cpc	r15, r21
      9a:	f9 06       	cpc	r15, r25
      9c:	fd 06       	cpc	r15, r29
      9e:	26 07       	cpc	r18, r22
      a0:	4f 07       	cpc	r20, r31
      a2:	78 07       	cpc	r23, r24
      a4:	a1 07       	cpc	r26, r17
      a6:	ca 07       	cpc	r28, r26
      a8:	f3 07       	cpc	r31, r19
      aa:	1c 08       	sbc	r1, r12
      ac:	1f 08       	sbc	r1, r15
      ae:	2b 08       	sbc	r2, r11
      b0:	30 08       	sbc	r3, r0
      b2:	44 08       	sbc	r4, r4
      b4:	53 08       	sbc	r5, r3
      b6:	61 08       	sbc	r6, r1
      b8:	70 08       	sbc	r7, r0
      ba:	7f 08       	sbc	r7, r15
      bc:	8e 08       	sbc	r8, r14
      be:	9c 08       	sbc	r9, r12
      c0:	af 08       	sbc	r10, r15
      c2:	b8 08       	sbc	r11, r8
      c4:	c1 08       	sbc	r12, r1
      c6:	ca 08       	sbc	r12, r10
      c8:	d3 08       	sbc	r13, r3
      ca:	de 08       	sbc	r13, r14
      cc:	ea 08       	sbc	r14, r10
      ce:	03 09       	sbc	r16, r3
      d0:	42 09       	sbc	r20, r2
      d2:	52 09       	sbc	r21, r2
      d4:	56 09       	sbc	r21, r6
      d6:	5a 09       	sbc	r21, r10
      d8:	5e 09       	sbc	r21, r14
      da:	62 09       	sbc	r22, r2
      dc:	66 09       	sbc	r22, r6
      de:	6a 09       	sbc	r22, r10
      e0:	6e 09       	sbc	r22, r14
      e2:	90 09       	sbc	r25, r0
      e4:	b9 09       	sbc	r27, r9
      e6:	e2 09       	sbc	r30, r2
      e8:	0b 0a       	sbc	r0, r27
      ea:	34 0a       	sbc	r3, r20
      ec:	5d 0a       	sbc	r5, r29
      ee:	87 0a       	sbc	r8, r23
      f0:	8a 0a       	sbc	r8, r26
      f2:	96 0a       	sbc	r9, r22
      f4:	9b 0a       	sbc	r9, r27
      f6:	b1 0a       	sbc	r11, r17
      f8:	c2 0a       	sbc	r12, r18
      fa:	d2 0a       	sbc	r13, r18
      fc:	e3 0a       	sbc	r14, r19
      fe:	f4 0a       	sbc	r15, r20
     100:	05 0b       	sbc	r16, r21
     102:	15 0b       	sbc	r17, r21
     104:	2c 0b       	sbc	r18, r28
     106:	38 0b       	sbc	r19, r24
     108:	44 0b       	sbc	r20, r20
     10a:	50 0b       	sbc	r21, r16
     10c:	5c 0b       	sbc	r21, r28
     10e:	68 0b       	sbc	r22, r24
     110:	74 0b       	sbc	r23, r20
     112:	8e 0b       	sbc	r24, r30

00000114 <__ctors_end>:
     114:	11 24       	eor	r1, r1
     116:	1f be       	out	0x3f, r1	; 63
     118:	cf ef       	ldi	r28, 0xFF	; 255
     11a:	d0 e4       	ldi	r29, 0x40	; 64
     11c:	de bf       	out	0x3e, r29	; 62
     11e:	cd bf       	out	0x3d, r28	; 61

00000120 <__do_copy_data>:
     120:	12 e0       	ldi	r17, 0x02	; 2
     122:	a0 e0       	ldi	r26, 0x00	; 0
     124:	b1 e0       	ldi	r27, 0x01	; 1
     126:	e6 e1       	ldi	r30, 0x16	; 22
     128:	f8 e1       	ldi	r31, 0x18	; 24
     12a:	00 e0       	ldi	r16, 0x00	; 0
     12c:	0b bf       	out	0x3b, r16	; 59
     12e:	02 c0       	rjmp	.+4      	; 0x134 <__do_copy_data+0x14>
     130:	07 90       	elpm	r0, Z+
     132:	0d 92       	st	X+, r0
     134:	a6 32       	cpi	r26, 0x26	; 38
     136:	b1 07       	cpc	r27, r17
     138:	d9 f7       	brne	.-10     	; 0x130 <__do_copy_data+0x10>

0000013a <__do_clear_bss>:
     13a:	22 e0       	ldi	r18, 0x02	; 2
     13c:	a6 e2       	ldi	r26, 0x26	; 38
     13e:	b2 e0       	ldi	r27, 0x02	; 2
     140:	01 c0       	rjmp	.+2      	; 0x144 <.do_clear_bss_start>

00000142 <.do_clear_bss_loop>:
     142:	1d 92       	st	X+, r1

00000144 <.do_clear_bss_start>:
     144:	af 33       	cpi	r26, 0x3F	; 63
     146:	b2 07       	cpc	r27, r18
     148:	e1 f7       	brne	.-8      	; 0x142 <.do_clear_bss_loop>
     14a:	0e 94 af 0b 	call	0x175e	; 0x175e <main>
     14e:	0c 94 09 0c 	jmp	0x1812	; 0x1812 <_exit>

00000152 <__bad_interrupt>:
     152:	56 cf       	rjmp	.-340    	; 0x0 <__vectors>

00000154 <delay_ms>:
	//Enable global interrupts
	SREG |= 0x80;	// 0x80: 1000000
}

void TimerOff() {
	TCCR1B 	= 0x00; // bit3bit2bit1bit0=0000: timer off
     154:	18 16       	cp	r1, r24
     156:	19 06       	cpc	r1, r25
     158:	5c f0       	brlt	.+22     	; 0x170 <delay_ms+0x1c>
     15a:	08 95       	ret
     15c:	00 00       	nop
     15e:	21 50       	subi	r18, 0x01	; 1
     160:	31 09       	sbc	r19, r1
     162:	e1 f7       	brne	.-8      	; 0x15c <delay_ms+0x8>
     164:	4f 5f       	subi	r20, 0xFF	; 255
     166:	5f 4f       	sbci	r21, 0xFF	; 255
     168:	48 17       	cp	r20, r24
     16a:	59 07       	cpc	r21, r25
     16c:	29 f4       	brne	.+10     	; 0x178 <delay_ms+0x24>
     16e:	08 95       	ret
     170:	40 e0       	ldi	r20, 0x00	; 0
     172:	50 e0       	ldi	r21, 0x00	; 0
     174:	67 e0       	ldi	r22, 0x07	; 7
     176:	73 e0       	ldi	r23, 0x03	; 3
     178:	9b 01       	movw	r18, r22
     17a:	f0 cf       	rjmp	.-32     	; 0x15c <delay_ms+0x8>

0000017c <LCD_WriteData>:
     17c:	10 9a       	sbi	0x02, 0	; 2
     17e:	8b b9       	out	0x0b, r24	; 11
     180:	11 9a       	sbi	0x02, 1	; 2
     182:	00 00       	nop
     184:	11 98       	cbi	0x02, 1	; 2
     186:	81 e0       	ldi	r24, 0x01	; 1
     188:	90 e0       	ldi	r25, 0x00	; 0
     18a:	e4 cf       	rjmp	.-56     	; 0x154 <delay_ms>

0000018c <LCD_WriteCommand>:
     18c:	10 98       	cbi	0x02, 0	; 2
     18e:	8b b9       	out	0x0b, r24	; 11
     190:	11 9a       	sbi	0x02, 1	; 2
     192:	00 00       	nop
     194:	11 98       	cbi	0x02, 1	; 2
     196:	82 e0       	ldi	r24, 0x02	; 2
     198:	90 e0       	ldi	r25, 0x00	; 0
     19a:	dc cf       	rjmp	.-72     	; 0x154 <delay_ms>

0000019c <LCD_Cursor>:
     19c:	81 31       	cpi	r24, 0x11	; 17
     19e:	10 f4       	brcc	.+4      	; 0x1a4 <LCD_Cursor+0x8>
     1a0:	81 58       	subi	r24, 0x81	; 129
     1a2:	f4 cf       	rjmp	.-24     	; 0x18c <LCD_WriteCommand>
     1a4:	81 55       	subi	r24, 0x51	; 81
     1a6:	f2 cf       	rjmp	.-28     	; 0x18c <LCD_WriteCommand>

000001a8 <LCD_ClearScreen>:
     1a8:	81 e0       	ldi	r24, 0x01	; 1
     1aa:	f0 cf       	rjmp	.-32     	; 0x18c <LCD_WriteCommand>

000001ac <LCD_DisplayString>:
     1ac:	1f 93       	push	r17
     1ae:	cf 93       	push	r28
     1b0:	df 93       	push	r29
     1b2:	18 2f       	mov	r17, r24
     1b4:	eb 01       	movw	r28, r22
     1b6:	f8 df       	rcall	.-16     	; 0x1a8 <LCD_ClearScreen>
     1b8:	98 81       	ld	r25, Y
     1ba:	99 23       	and	r25, r25
     1bc:	51 f0       	breq	.+20     	; 0x1d2 <LCD_DisplayString+0x26>
     1be:	81 2f       	mov	r24, r17
     1c0:	18 2f       	mov	r17, r24
     1c2:	1f 5f       	subi	r17, 0xFF	; 255
     1c4:	eb df       	rcall	.-42     	; 0x19c <LCD_Cursor>
     1c6:	89 91       	ld	r24, Y+
     1c8:	d9 df       	rcall	.-78     	; 0x17c <LCD_WriteData>
     1ca:	81 2f       	mov	r24, r17
     1cc:	98 81       	ld	r25, Y
     1ce:	91 11       	cpse	r25, r1
     1d0:	f7 cf       	rjmp	.-18     	; 0x1c0 <LCD_DisplayString+0x14>
     1d2:	df 91       	pop	r29
     1d4:	cf 91       	pop	r28
     1d6:	1f 91       	pop	r17
     1d8:	08 95       	ret

000001da <LCD_init>:
     1da:	84 e6       	ldi	r24, 0x64	; 100
     1dc:	90 e0       	ldi	r25, 0x00	; 0
     1de:	ba df       	rcall	.-140    	; 0x154 <delay_ms>
     1e0:	88 e3       	ldi	r24, 0x38	; 56
     1e2:	d4 df       	rcall	.-88     	; 0x18c <LCD_WriteCommand>
     1e4:	86 e0       	ldi	r24, 0x06	; 6
     1e6:	d2 df       	rcall	.-92     	; 0x18c <LCD_WriteCommand>
     1e8:	8f e0       	ldi	r24, 0x0F	; 15
     1ea:	d0 df       	rcall	.-96     	; 0x18c <LCD_WriteCommand>
     1ec:	81 e0       	ldi	r24, 0x01	; 1
     1ee:	ce df       	rcall	.-100    	; 0x18c <LCD_WriteCommand>
     1f0:	8a e0       	ldi	r24, 0x0A	; 10
     1f2:	90 e0       	ldi	r25, 0x00	; 0
     1f4:	af cf       	rjmp	.-162    	; 0x154 <delay_ms>

000001f6 <TimerSet>:
     1f6:	60 93 21 01 	sts	0x0121, r22
     1fa:	70 93 22 01 	sts	0x0122, r23
     1fe:	80 93 23 01 	sts	0x0123, r24
     202:	90 93 24 01 	sts	0x0124, r25
     206:	60 93 33 02 	sts	0x0233, r22
     20a:	70 93 34 02 	sts	0x0234, r23
     20e:	80 93 35 02 	sts	0x0235, r24
     212:	90 93 36 02 	sts	0x0236, r25
     216:	08 95       	ret

00000218 <TimerOn>:
     218:	8b e0       	ldi	r24, 0x0B	; 11
     21a:	80 93 81 00 	sts	0x0081, r24
     21e:	8d e7       	ldi	r24, 0x7D	; 125
     220:	90 e0       	ldi	r25, 0x00	; 0
     222:	90 93 89 00 	sts	0x0089, r25
     226:	80 93 88 00 	sts	0x0088, r24
     22a:	82 e0       	ldi	r24, 0x02	; 2
     22c:	80 93 6f 00 	sts	0x006F, r24
     230:	10 92 85 00 	sts	0x0085, r1
     234:	10 92 84 00 	sts	0x0084, r1
     238:	80 91 21 01 	lds	r24, 0x0121
     23c:	90 91 22 01 	lds	r25, 0x0122
     240:	a0 91 23 01 	lds	r26, 0x0123
     244:	b0 91 24 01 	lds	r27, 0x0124
     248:	80 93 33 02 	sts	0x0233, r24
     24c:	90 93 34 02 	sts	0x0234, r25
     250:	a0 93 35 02 	sts	0x0235, r26
     254:	b0 93 36 02 	sts	0x0236, r27
     258:	8f b7       	in	r24, 0x3f	; 63
     25a:	80 68       	ori	r24, 0x80	; 128
     25c:	8f bf       	out	0x3f, r24	; 63
     25e:	08 95       	ret

00000260 <TimerISR>:
}

void TimerISR() {
	TimerFlag = 1;
     260:	81 e0       	ldi	r24, 0x01	; 1
     262:	80 93 37 02 	sts	0x0237, r24
     266:	08 95       	ret

00000268 <__vector_13>:
}

// In our approach, the C programmer does not touch this ISR, but rather TimerISR()
ISR(TIMER1_COMPA_vect)
{
     268:	1f 92       	push	r1
     26a:	0f 92       	push	r0
     26c:	0f b6       	in	r0, 0x3f	; 63
     26e:	0f 92       	push	r0
     270:	11 24       	eor	r1, r1
     272:	0b b6       	in	r0, 0x3b	; 59
     274:	0f 92       	push	r0
     276:	2f 93       	push	r18
     278:	3f 93       	push	r19
     27a:	4f 93       	push	r20
     27c:	5f 93       	push	r21
     27e:	6f 93       	push	r22
     280:	7f 93       	push	r23
     282:	8f 93       	push	r24
     284:	9f 93       	push	r25
     286:	af 93       	push	r26
     288:	bf 93       	push	r27
     28a:	ef 93       	push	r30
     28c:	ff 93       	push	r31
	// CPU automatically calls when TCNT0 == OCR0 (every 1 ms per TimerOn settings)
	_avr_timer_cntcurr--; 			// Count down to 0 rather than up to TOP
     28e:	80 91 33 02 	lds	r24, 0x0233
     292:	90 91 34 02 	lds	r25, 0x0234
     296:	a0 91 35 02 	lds	r26, 0x0235
     29a:	b0 91 36 02 	lds	r27, 0x0236
     29e:	01 97       	sbiw	r24, 0x01	; 1
     2a0:	a1 09       	sbc	r26, r1
     2a2:	b1 09       	sbc	r27, r1
     2a4:	80 93 33 02 	sts	0x0233, r24
     2a8:	90 93 34 02 	sts	0x0234, r25
     2ac:	a0 93 35 02 	sts	0x0235, r26
     2b0:	b0 93 36 02 	sts	0x0236, r27
	if (_avr_timer_cntcurr == 0) { 	// results in a more efficient compare
     2b4:	89 2b       	or	r24, r25
     2b6:	8a 2b       	or	r24, r26
     2b8:	8b 2b       	or	r24, r27
     2ba:	89 f4       	brne	.+34     	; 0x2de <__vector_13+0x76>
		TimerISR(); 				// Call the ISR that the user uses
     2bc:	d1 df       	rcall	.-94     	; 0x260 <TimerISR>
		_avr_timer_cntcurr = _avr_timer_M;
     2be:	80 91 21 01 	lds	r24, 0x0121
     2c2:	90 91 22 01 	lds	r25, 0x0122
     2c6:	a0 91 23 01 	lds	r26, 0x0123
     2ca:	b0 91 24 01 	lds	r27, 0x0124
     2ce:	80 93 33 02 	sts	0x0233, r24
     2d2:	90 93 34 02 	sts	0x0234, r25
     2d6:	a0 93 35 02 	sts	0x0235, r26
     2da:	b0 93 36 02 	sts	0x0236, r27
	}
}
     2de:	ff 91       	pop	r31
     2e0:	ef 91       	pop	r30
     2e2:	bf 91       	pop	r27
     2e4:	af 91       	pop	r26
     2e6:	9f 91       	pop	r25
     2e8:	8f 91       	pop	r24
     2ea:	7f 91       	pop	r23
     2ec:	6f 91       	pop	r22
     2ee:	5f 91       	pop	r21
     2f0:	4f 91       	pop	r20
     2f2:	3f 91       	pop	r19
     2f4:	2f 91       	pop	r18
     2f6:	0f 90       	pop	r0
     2f8:	0b be       	out	0x3b, r0	; 59
     2fa:	0f 90       	pop	r0
     2fc:	0f be       	out	0x3f, r0	; 63
     2fe:	0f 90       	pop	r0
     300:	1f 90       	pop	r1
     302:	18 95       	reti

00000304 <menu_sm_tick>:
unsigned char b4 = 0;

enum menu_sms {menu, start, choose_level, highscore, wait} menu_sm;
void menu_sm_tick()
{
	start_l1 = 0;
     304:	10 92 30 02 	sts	0x0230, r1
	start_l2 = 0;
     308:	10 92 2f 02 	sts	0x022F, r1
	start_l3 = 0;
     30c:	10 92 2e 02 	sts	0x022E, r1
	b0 = ~PINA & 0x04;
     310:	20 b1       	in	r18, 0x00	; 0
     312:	20 95       	com	r18
     314:	24 70       	andi	r18, 0x04	; 4
     316:	20 93 2a 02 	sts	0x022A, r18
	b1 = ~PINA & 0x08;
     31a:	30 b1       	in	r19, 0x00	; 0
     31c:	30 95       	com	r19
     31e:	38 70       	andi	r19, 0x08	; 8
     320:	30 93 29 02 	sts	0x0229, r19
	b2 = ~PINA & 0x10;
     324:	40 b1       	in	r20, 0x00	; 0
     326:	40 95       	com	r20
     328:	40 71       	andi	r20, 0x10	; 16
     32a:	40 93 28 02 	sts	0x0228, r20
	b3 = ~PINA & 0x20;
     32e:	80 b1       	in	r24, 0x00	; 0
     330:	80 95       	com	r24
     332:	80 72       	andi	r24, 0x20	; 32
     334:	80 93 27 02 	sts	0x0227, r24
	b4 = ~PINA & 0x40;
     338:	90 b1       	in	r25, 0x00	; 0
     33a:	90 95       	com	r25
     33c:	90 74       	andi	r25, 0x40	; 64
     33e:	90 93 26 02 	sts	0x0226, r25
	switch (menu_sm)
     342:	80 91 3b 02 	lds	r24, 0x023B
     346:	81 30       	cpi	r24, 0x01	; 1
     348:	09 f4       	brne	.+2      	; 0x34c <menu_sm_tick+0x48>
     34a:	3d c0       	rjmp	.+122    	; 0x3c6 <menu_sm_tick+0xc2>
     34c:	38 f0       	brcs	.+14     	; 0x35c <menu_sm_tick+0x58>
     34e:	82 30       	cpi	r24, 0x02	; 2
     350:	09 f4       	brne	.+2      	; 0x354 <menu_sm_tick+0x50>
     352:	3d c0       	rjmp	.+122    	; 0x3ce <menu_sm_tick+0xca>
     354:	83 30       	cpi	r24, 0x03	; 3
     356:	09 f0       	breq	.+2      	; 0x35a <menu_sm_tick+0x56>
     358:	6e c0       	rjmp	.+220    	; 0x436 <menu_sm_tick+0x132>
     35a:	60 c0       	rjmp	.+192    	; 0x41c <menu_sm_tick+0x118>
	{
		case menu:
		if (b4)
     35c:	99 23       	and	r25, r25
     35e:	29 f0       	breq	.+10     	; 0x36a <menu_sm_tick+0x66>
		{
			flash = 0;
     360:	10 92 32 02 	sts	0x0232, r1
			menu_sm = menu;
     364:	10 92 3b 02 	sts	0x023B, r1
     368:	75 c0       	rjmp	.+234    	; 0x454 <menu_sm_tick+0x150>
		}
		else if (b0 && !end_l1)
     36a:	22 23       	and	r18, r18
     36c:	51 f0       	breq	.+20     	; 0x382 <menu_sm_tick+0x7e>
     36e:	80 91 2b 02 	lds	r24, 0x022B
     372:	81 11       	cpse	r24, r1
     374:	06 c0       	rjmp	.+12     	; 0x382 <menu_sm_tick+0x7e>
		{
			flash = 0;
     376:	10 92 32 02 	sts	0x0232, r1
			menu_sm = start;
     37a:	81 e0       	ldi	r24, 0x01	; 1
     37c:	80 93 3b 02 	sts	0x023B, r24
     380:	81 c0       	rjmp	.+258    	; 0x484 <menu_sm_tick+0x180>
		}
		else if (b1 && !end_l1)
     382:	33 23       	and	r19, r19
     384:	99 f0       	breq	.+38     	; 0x3ac <menu_sm_tick+0xa8>
     386:	80 91 2b 02 	lds	r24, 0x022B
     38a:	81 11       	cpse	r24, r1
     38c:	0f c0       	rjmp	.+30     	; 0x3ac <menu_sm_tick+0xa8>
		{
			flash = 0;
     38e:	10 92 32 02 	sts	0x0232, r1
			menu_sm = choose_level;
     392:	82 e0       	ldi	r24, 0x02	; 2
     394:	80 93 3b 02 	sts	0x023B, r24
			LCD_ClearScreen();
     398:	07 df       	rcall	.-498    	; 0x1a8 <LCD_ClearScreen>
			LCD_Cursor(1);
     39a:	81 e0       	ldi	r24, 0x01	; 1
     39c:	ff de       	rcall	.-514    	; 0x19c <LCD_Cursor>
			LCD_DisplayString(1, start_string);
     39e:	60 91 1c 01 	lds	r22, 0x011C
     3a2:	70 91 1d 01 	lds	r23, 0x011D
     3a6:	81 e0       	ldi	r24, 0x01	; 1
     3a8:	01 df       	rcall	.-510    	; 0x1ac <LCD_DisplayString>
     3aa:	48 c0       	rjmp	.+144    	; 0x43c <menu_sm_tick+0x138>
		}
		else if(b2 && !end_l1)
     3ac:	44 23       	and	r20, r20
     3ae:	09 f4       	brne	.+2      	; 0x3b2 <menu_sm_tick+0xae>
     3b0:	51 c0       	rjmp	.+162    	; 0x454 <menu_sm_tick+0x150>
     3b2:	80 91 2b 02 	lds	r24, 0x022B
     3b6:	81 11       	cpse	r24, r1
     3b8:	4d c0       	rjmp	.+154    	; 0x454 <menu_sm_tick+0x150>
		{
			flash = 0;
     3ba:	10 92 32 02 	sts	0x0232, r1
			menu_sm = highscore;
     3be:	83 e0       	ldi	r24, 0x03	; 3
     3c0:	80 93 3b 02 	sts	0x023B, r24
     3c4:	8d c0       	rjmp	.+282    	; 0x4e0 <menu_sm_tick+0x1dc>
		break;
		
		//------------------------------
		
		case start:
		menu_sm = wait;
     3c6:	84 e0       	ldi	r24, 0x04	; 4
     3c8:	80 93 3b 02 	sts	0x023B, r24
     3cc:	08 95       	ret
		break;
		
		//-----------------------------
		
		case choose_level:
		if (b4)
     3ce:	99 23       	and	r25, r25
     3d0:	29 f0       	breq	.+10     	; 0x3dc <menu_sm_tick+0xd8>
		{
			flash = 0;
     3d2:	10 92 32 02 	sts	0x0232, r1
			menu_sm = menu;
     3d6:	10 92 3b 02 	sts	0x023B, r1
     3da:	3c c0       	rjmp	.+120    	; 0x454 <menu_sm_tick+0x150>
		}
		else if (b0 && (level < 5))
     3dc:	22 23       	and	r18, r18
     3de:	51 f0       	breq	.+20     	; 0x3f4 <menu_sm_tick+0xf0>
     3e0:	80 91 20 01 	lds	r24, 0x0120
     3e4:	85 30       	cpi	r24, 0x05	; 5
     3e6:	30 f4       	brcc	.+12     	; 0x3f4 <menu_sm_tick+0xf0>
		{
			flash = 0;
     3e8:	10 92 32 02 	sts	0x0232, r1
			level++;
     3ec:	8f 5f       	subi	r24, 0xFF	; 255
     3ee:	80 93 20 01 	sts	0x0120, r24
     3f2:	24 c0       	rjmp	.+72     	; 0x43c <menu_sm_tick+0x138>
		}
		else if (b1 && (level > 1))
     3f4:	33 23       	and	r19, r19
     3f6:	51 f0       	breq	.+20     	; 0x40c <menu_sm_tick+0x108>
     3f8:	80 91 20 01 	lds	r24, 0x0120
     3fc:	82 30       	cpi	r24, 0x02	; 2
     3fe:	30 f0       	brcs	.+12     	; 0x40c <menu_sm_tick+0x108>
		{
			flash = 0;
     400:	10 92 32 02 	sts	0x0232, r1
			level--;
     404:	81 50       	subi	r24, 0x01	; 1
     406:	80 93 20 01 	sts	0x0120, r24
     40a:	18 c0       	rjmp	.+48     	; 0x43c <menu_sm_tick+0x138>
		}
		else if (b2)
     40c:	44 23       	and	r20, r20
     40e:	09 f4       	brne	.+2      	; 0x412 <menu_sm_tick+0x10e>
     410:	58 c0       	rjmp	.+176    	; 0x4c2 <menu_sm_tick+0x1be>
		{
			flash = 0;
     412:	10 92 32 02 	sts	0x0232, r1
			menu_sm = menu;
     416:	10 92 3b 02 	sts	0x023B, r1
     41a:	1c c0       	rjmp	.+56     	; 0x454 <menu_sm_tick+0x150>
		break;
		
		//-----------------------------
		
		case highscore:
		if (b4)
     41c:	99 23       	and	r25, r25
     41e:	29 f0       	breq	.+10     	; 0x42a <menu_sm_tick+0x126>
		{
			flash = 0;
     420:	10 92 32 02 	sts	0x0232, r1
			menu_sm = menu;
     424:	10 92 3b 02 	sts	0x023B, r1
     428:	15 c0       	rjmp	.+42     	; 0x454 <menu_sm_tick+0x150>
		}
		else
		{
			flash = 0;
     42a:	10 92 32 02 	sts	0x0232, r1
			menu_sm = highscore;
     42e:	83 e0       	ldi	r24, 0x03	; 3
     430:	80 93 3b 02 	sts	0x023B, r24
     434:	55 c0       	rjmp	.+170    	; 0x4e0 <menu_sm_tick+0x1dc>
		break;
		
		//-----------------------------
		
		default:
		menu_sm = menu;
     436:	10 92 3b 02 	sts	0x023B, r1
		break;
     43a:	0c c0       	rjmp	.+24     	; 0x454 <menu_sm_tick+0x150>
	}
	
	
	switch (menu_sm)
     43c:	80 91 3b 02 	lds	r24, 0x023B
     440:	81 30       	cpi	r24, 0x01	; 1
     442:	01 f1       	breq	.+64     	; 0x484 <menu_sm_tick+0x180>
     444:	38 f0       	brcs	.+14     	; 0x454 <menu_sm_tick+0x150>
     446:	82 30       	cpi	r24, 0x02	; 2
     448:	09 f4       	brne	.+2      	; 0x44c <menu_sm_tick+0x148>
     44a:	3b c0       	rjmp	.+118    	; 0x4c2 <menu_sm_tick+0x1be>
     44c:	83 30       	cpi	r24, 0x03	; 3
     44e:	09 f0       	breq	.+2      	; 0x452 <menu_sm_tick+0x14e>
     450:	5d c0       	rjmp	.+186    	; 0x50c <menu_sm_tick+0x208>
     452:	46 c0       	rjmp	.+140    	; 0x4e0 <menu_sm_tick+0x1dc>
	{	
		case menu:
		TimerSet(300);
     454:	6c e2       	ldi	r22, 0x2C	; 44
     456:	71 e0       	ldi	r23, 0x01	; 1
     458:	80 e0       	ldi	r24, 0x00	; 0
     45a:	90 e0       	ldi	r25, 0x00	; 0
     45c:	cc de       	rcall	.-616    	; 0x1f6 <TimerSet>
		if(flash == 0)
     45e:	80 91 32 02 	lds	r24, 0x0232
     462:	81 11       	cpse	r24, r1
     464:	53 c0       	rjmp	.+166    	; 0x50c <menu_sm_tick+0x208>
		{
			LCD_ClearScreen();
     466:	a0 de       	rcall	.-704    	; 0x1a8 <LCD_ClearScreen>
			LCD_Cursor(1);
     468:	81 e0       	ldi	r24, 0x01	; 1
     46a:	98 de       	rcall	.-720    	; 0x19c <LCD_Cursor>
			LCD_DisplayString(1, menu_string);
     46c:	60 91 1e 01 	lds	r22, 0x011E
     470:	70 91 1f 01 	lds	r23, 0x011F
     474:	81 e0       	ldi	r24, 0x01	; 1
     476:	9a de       	rcall	.-716    	; 0x1ac <LCD_DisplayString>
			LCD_WriteData(0);
     478:	80 e0       	ldi	r24, 0x00	; 0
     47a:	80 de       	rcall	.-768    	; 0x17c <LCD_WriteData>
			flash = 1;
     47c:	81 e0       	ldi	r24, 0x01	; 1
     47e:	80 93 32 02 	sts	0x0232, r24
     482:	08 95       	ret
		}
		break;
		
		//-----------------------------
		case start:
		if (level == 1)
     484:	80 91 20 01 	lds	r24, 0x0120
     488:	81 30       	cpi	r24, 0x01	; 1
     48a:	19 f4       	brne	.+6      	; 0x492 <menu_sm_tick+0x18e>
		{
			start_l1 = 1;
     48c:	80 93 30 02 	sts	0x0230, r24
     490:	08 95       	ret
		}
		else if (level == 2)
     492:	82 30       	cpi	r24, 0x02	; 2
     494:	21 f4       	brne	.+8      	; 0x49e <menu_sm_tick+0x19a>
		{
			start_l2 = 1;
     496:	81 e0       	ldi	r24, 0x01	; 1
     498:	80 93 2f 02 	sts	0x022F, r24
     49c:	08 95       	ret
		}
		else if (level == 3)
     49e:	83 30       	cpi	r24, 0x03	; 3
     4a0:	21 f4       	brne	.+8      	; 0x4aa <menu_sm_tick+0x1a6>
		{
			start_l3 = 1;
     4a2:	81 e0       	ldi	r24, 0x01	; 1
     4a4:	80 93 2e 02 	sts	0x022E, r24
     4a8:	08 95       	ret
		}
		else if (level == 4)
     4aa:	84 30       	cpi	r24, 0x04	; 4
     4ac:	21 f4       	brne	.+8      	; 0x4b6 <menu_sm_tick+0x1b2>
		{
			start_l4 = 1;
     4ae:	81 e0       	ldi	r24, 0x01	; 1
     4b0:	80 93 2d 02 	sts	0x022D, r24
     4b4:	08 95       	ret
		}
		else if (level == 5)
     4b6:	85 30       	cpi	r24, 0x05	; 5
     4b8:	49 f5       	brne	.+82     	; 0x50c <menu_sm_tick+0x208>
		{
			start_l5 = 1;
     4ba:	81 e0       	ldi	r24, 0x01	; 1
     4bc:	80 93 2c 02 	sts	0x022C, r24
     4c0:	08 95       	ret
		}
		break;
		
		case choose_level:
		if (flash == 0)
     4c2:	80 91 32 02 	lds	r24, 0x0232
     4c6:	81 11       	cpse	r24, r1
     4c8:	21 c0       	rjmp	.+66     	; 0x50c <menu_sm_tick+0x208>
		{
			LCD_ClearScreen();
     4ca:	6e de       	rcall	.-804    	; 0x1a8 <LCD_ClearScreen>
			LCD_Cursor(1);
     4cc:	81 e0       	ldi	r24, 0x01	; 1
     4ce:	66 de       	rcall	.-820    	; 0x19c <LCD_Cursor>
			LCD_WriteData(level + '0');
     4d0:	80 91 20 01 	lds	r24, 0x0120
     4d4:	80 5d       	subi	r24, 0xD0	; 208
     4d6:	52 de       	rcall	.-860    	; 0x17c <LCD_WriteData>
			flash = 1;
     4d8:	81 e0       	ldi	r24, 0x01	; 1
     4da:	80 93 32 02 	sts	0x0232, r24
     4de:	08 95       	ret
		break;
		
		//-----------------------------
		
		case highscore:
		if (flash == 0)
     4e0:	80 91 32 02 	lds	r24, 0x0232
     4e4:	81 11       	cpse	r24, r1
     4e6:	12 c0       	rjmp	.+36     	; 0x50c <menu_sm_tick+0x208>
		{
			LCD_ClearScreen();
     4e8:	5f de       	rcall	.-834    	; 0x1a8 <LCD_ClearScreen>
			LCD_Cursor(1);
     4ea:	81 e0       	ldi	r24, 0x01	; 1
     4ec:	57 de       	rcall	.-850    	; 0x19c <LCD_Cursor>
			LCD_DisplayString(1, highscore_string);
     4ee:	60 91 16 01 	lds	r22, 0x0116
     4f2:	70 91 17 01 	lds	r23, 0x0117
     4f6:	81 e0       	ldi	r24, 0x01	; 1
     4f8:	59 de       	rcall	.-846    	; 0x1ac <LCD_DisplayString>
			uint8_t byteRead = eeprom_read_byte((uint8_t*)46);
     4fa:	8e e2       	ldi	r24, 0x2E	; 46
     4fc:	90 e0       	ldi	r25, 0x00	; 0
     4fe:	0e 94 f3 0b 	call	0x17e6	; 0x17e6 <__eerd_byte_m1284>
			LCD_WriteData(byteRead +'0');
     502:	80 5d       	subi	r24, 0xD0	; 208
     504:	3b de       	rcall	.-906    	; 0x17c <LCD_WriteData>
			flash = 1;
     506:	81 e0       	ldi	r24, 0x01	; 1
     508:	80 93 32 02 	sts	0x0232, r24
     50c:	08 95       	ret

0000050e <level1_tick>:
}

enum level1s {l1_init, blink1, display, wrong, win, highscore1} level1;
void level1_tick()
{
	b0 = ~PINA & 0x04;
     50e:	90 b1       	in	r25, 0x00	; 0
     510:	90 95       	com	r25
     512:	94 70       	andi	r25, 0x04	; 4
     514:	90 93 2a 02 	sts	0x022A, r25
	b1 = ~PINA & 0x08;
     518:	20 b1       	in	r18, 0x00	; 0
     51a:	20 95       	com	r18
     51c:	28 70       	andi	r18, 0x08	; 8
     51e:	20 93 29 02 	sts	0x0229, r18
	b2 = ~PINA & 0x10;
     522:	30 b1       	in	r19, 0x00	; 0
     524:	30 95       	com	r19
     526:	30 71       	andi	r19, 0x10	; 16
     528:	30 93 28 02 	sts	0x0228, r19
	b3 = ~PINA & 0x20;
     52c:	40 b1       	in	r20, 0x00	; 0
     52e:	40 95       	com	r20
     530:	40 72       	andi	r20, 0x20	; 32
     532:	40 93 27 02 	sts	0x0227, r20
	b4 = ~PINA & 0x40;
     536:	50 b1       	in	r21, 0x00	; 0
     538:	50 95       	com	r21
     53a:	50 74       	andi	r21, 0x40	; 64
     53c:	50 93 26 02 	sts	0x0226, r21
	switch (level1)
     540:	80 91 39 02 	lds	r24, 0x0239
     544:	82 30       	cpi	r24, 0x02	; 2
     546:	19 f1       	breq	.+70     	; 0x58e <level1_tick+0x80>
     548:	30 f4       	brcc	.+12     	; 0x556 <level1_tick+0x48>
     54a:	88 23       	and	r24, r24
     54c:	59 f0       	breq	.+22     	; 0x564 <level1_tick+0x56>
     54e:	81 30       	cpi	r24, 0x01	; 1
     550:	09 f0       	breq	.+2      	; 0x554 <level1_tick+0x46>
     552:	4c c0       	rjmp	.+152    	; 0x5ec <level1_tick+0xde>
     554:	18 c0       	rjmp	.+48     	; 0x586 <level1_tick+0x78>
     556:	83 30       	cpi	r24, 0x03	; 3
     558:	09 f4       	brne	.+2      	; 0x55c <level1_tick+0x4e>
     55a:	42 c0       	rjmp	.+132    	; 0x5e0 <level1_tick+0xd2>
     55c:	84 30       	cpi	r24, 0x04	; 4
     55e:	09 f0       	breq	.+2      	; 0x562 <level1_tick+0x54>
     560:	45 c0       	rjmp	.+138    	; 0x5ec <level1_tick+0xde>
     562:	41 c0       	rjmp	.+130    	; 0x5e6 <level1_tick+0xd8>
	{
		case l1_init:
		end_l1 = 0;
     564:	10 92 2b 02 	sts	0x022B, r1
		if (!start_l1)
     568:	80 91 30 02 	lds	r24, 0x0230
     56c:	81 11       	cpse	r24, r1
     56e:	03 c0       	rjmp	.+6      	; 0x576 <level1_tick+0x68>
		{
			level1 = l1_init;
     570:	10 92 39 02 	sts	0x0239, r1
     574:	4d c0       	rjmp	.+154    	; 0x610 <level1_tick+0x102>
		}
		else if (start_l1)
		{
			highscore_total = 0;
     576:	10 92 31 02 	sts	0x0231, r1
			level1 = blink1;
     57a:	81 e0       	ldi	r24, 0x01	; 1
     57c:	80 93 39 02 	sts	0x0239, r24
			end_l1 = 1;
     580:	80 93 2b 02 	sts	0x022B, r24
     584:	33 c0       	rjmp	.+102    	; 0x5ec <level1_tick+0xde>
		}
		break;
		//-----------------------------
		case blink1:
		level1 = display;
     586:	82 e0       	ldi	r24, 0x02	; 2
     588:	80 93 39 02 	sts	0x0239, r24
		break;
     58c:	5f c0       	rjmp	.+190    	; 0x64c <level1_tick+0x13e>
		//-----------------------------
		case display:
		if (b0)
     58e:	99 23       	and	r25, r25
     590:	79 f0       	breq	.+30     	; 0x5b0 <level1_tick+0xa2>
		{
			highscore_total++;
     592:	80 91 31 02 	lds	r24, 0x0231
     596:	8f 5f       	subi	r24, 0xFF	; 255
     598:	80 93 31 02 	sts	0x0231, r24
			if (highscore_total >= final_highscore)
     59c:	90 91 3c 02 	lds	r25, 0x023C
     5a0:	89 17       	cp	r24, r25
     5a2:	10 f0       	brcs	.+4      	; 0x5a8 <level1_tick+0x9a>
			{
				final_highscore = highscore_total;
     5a4:	80 93 3c 02 	sts	0x023C, r24
			}
			level1 = win;
     5a8:	84 e0       	ldi	r24, 0x04	; 4
     5aa:	80 93 39 02 	sts	0x0239, r24
     5ae:	77 c0       	rjmp	.+238    	; 0x69e <level1_tick+0x190>
		}
		else if (b1 || b2 || b3)
     5b0:	21 11       	cpse	r18, r1
     5b2:	04 c0       	rjmp	.+8      	; 0x5bc <level1_tick+0xae>
     5b4:	31 11       	cpse	r19, r1
     5b6:	02 c0       	rjmp	.+4      	; 0x5bc <level1_tick+0xae>
     5b8:	44 23       	and	r20, r20
     5ba:	61 f0       	breq	.+24     	; 0x5d4 <level1_tick+0xc6>
		{
			if (highscore_total >= final_highscore)
     5bc:	80 91 31 02 	lds	r24, 0x0231
     5c0:	90 91 3c 02 	lds	r25, 0x023C
     5c4:	89 17       	cp	r24, r25
     5c6:	10 f0       	brcs	.+4      	; 0x5cc <level1_tick+0xbe>
			{
				final_highscore = highscore_total;
     5c8:	80 93 3c 02 	sts	0x023C, r24
			}
			level1 = wrong;
     5cc:	83 e0       	ldi	r24, 0x03	; 3
     5ce:	80 93 39 02 	sts	0x0239, r24
     5d2:	4f c0       	rjmp	.+158    	; 0x672 <level1_tick+0x164>
		}
		else if (b4)
     5d4:	55 23       	and	r21, r21
     5d6:	09 f4       	brne	.+2      	; 0x5da <level1_tick+0xcc>
     5d8:	39 c0       	rjmp	.+114    	; 0x64c <level1_tick+0x13e>
		{
			level1 = l1_init;
     5da:	10 92 39 02 	sts	0x0239, r1
     5de:	18 c0       	rjmp	.+48     	; 0x610 <level1_tick+0x102>
		}
		break;
		//-----------------------------
		case wrong:
		level1 = l1_init;
     5e0:	10 92 39 02 	sts	0x0239, r1
		break;
     5e4:	15 c0       	rjmp	.+42     	; 0x610 <level1_tick+0x102>
		//-----------------------------
		case win:
		level1 = l1_init;
     5e6:	10 92 39 02 	sts	0x0239, r1
		break;
     5ea:	12 c0       	rjmp	.+36     	; 0x610 <level1_tick+0x102>
		//-----------------------------
	}
	
	switch(level1)
     5ec:	80 91 39 02 	lds	r24, 0x0239
     5f0:	82 30       	cpi	r24, 0x02	; 2
     5f2:	61 f1       	breq	.+88     	; 0x64c <level1_tick+0x13e>
     5f4:	30 f4       	brcc	.+12     	; 0x602 <level1_tick+0xf4>
     5f6:	88 23       	and	r24, r24
     5f8:	59 f0       	breq	.+22     	; 0x610 <level1_tick+0x102>
     5fa:	81 30       	cpi	r24, 0x01	; 1
     5fc:	09 f0       	breq	.+2      	; 0x600 <level1_tick+0xf2>
     5fe:	65 c0       	rjmp	.+202    	; 0x6ca <level1_tick+0x1bc>
     600:	11 c0       	rjmp	.+34     	; 0x624 <level1_tick+0x116>
     602:	83 30       	cpi	r24, 0x03	; 3
     604:	09 f4       	brne	.+2      	; 0x608 <level1_tick+0xfa>
     606:	35 c0       	rjmp	.+106    	; 0x672 <level1_tick+0x164>
     608:	84 30       	cpi	r24, 0x04	; 4
     60a:	09 f0       	breq	.+2      	; 0x60e <level1_tick+0x100>
     60c:	5e c0       	rjmp	.+188    	; 0x6ca <level1_tick+0x1bc>
     60e:	47 c0       	rjmp	.+142    	; 0x69e <level1_tick+0x190>
	{
		case l1_init:
		TimerSet(500);
     610:	64 ef       	ldi	r22, 0xF4	; 244
     612:	71 e0       	ldi	r23, 0x01	; 1
     614:	80 e0       	ldi	r24, 0x00	; 0
     616:	90 e0       	ldi	r25, 0x00	; 0
     618:	ee dd       	rcall	.-1060   	; 0x1f6 <TimerSet>
		start_l1 = 0;
     61a:	10 92 30 02 	sts	0x0230, r1
		end_l1 = 0;
     61e:	10 92 2b 02 	sts	0x022B, r1
		break;
     622:	08 95       	ret
		//-----------------------------
		case blink1:
		TimerSet(2000);
     624:	60 ed       	ldi	r22, 0xD0	; 208
     626:	77 e0       	ldi	r23, 0x07	; 7
     628:	80 e0       	ldi	r24, 0x00	; 0
     62a:	90 e0       	ldi	r25, 0x00	; 0
     62c:	e4 dd       	rcall	.-1080   	; 0x1f6 <TimerSet>
		//TOP LEFT
		DDRB = 0xFF; PORTB = 0x0F;
     62e:	9f ef       	ldi	r25, 0xFF	; 255
     630:	94 b9       	out	0x04, r25	; 4
     632:	8f e0       	ldi	r24, 0x0F	; 15
     634:	85 b9       	out	0x05, r24	; 5
		DDRC = 0xFF; PORTC = 0x0F;
     636:	97 b9       	out	0x07, r25	; 7
     638:	88 b9       	out	0x08, r24	; 8
		LCD_ClearScreen();
     63a:	b6 dd       	rcall	.-1172   	; 0x1a8 <LCD_ClearScreen>
		LCD_Cursor(1);
     63c:	81 e0       	ldi	r24, 0x01	; 1
     63e:	ae dd       	rcall	.-1188   	; 0x19c <LCD_Cursor>
		LCD_DisplayString(1, start_string);
     640:	60 91 1c 01 	lds	r22, 0x011C
     644:	70 91 1d 01 	lds	r23, 0x011D
     648:	81 e0       	ldi	r24, 0x01	; 1
		break;
     64a:	b0 cd       	rjmp	.-1184   	; 0x1ac <LCD_DisplayString>
		//-----------------------------
		case display:
		TimerSet(500);
     64c:	64 ef       	ldi	r22, 0xF4	; 244
     64e:	71 e0       	ldi	r23, 0x01	; 1
     650:	80 e0       	ldi	r24, 0x00	; 0
     652:	90 e0       	ldi	r25, 0x00	; 0
     654:	d0 dd       	rcall	.-1120   	; 0x1f6 <TimerSet>
		//TURNS OFF SCREEN
		DDRB = 0xFF; PORTB = 0xFF;
     656:	8f ef       	ldi	r24, 0xFF	; 255
     658:	84 b9       	out	0x04, r24	; 4
     65a:	85 b9       	out	0x05, r24	; 5
		DDRC = 0xFF; PORTC = 0x00;
     65c:	87 b9       	out	0x07, r24	; 7
     65e:	18 b8       	out	0x08, r1	; 8
		LCD_ClearScreen();
     660:	a3 dd       	rcall	.-1210   	; 0x1a8 <LCD_ClearScreen>
		LCD_Cursor(1);
     662:	81 e0       	ldi	r24, 0x01	; 1
     664:	9b dd       	rcall	.-1226   	; 0x19c <LCD_Cursor>
		LCD_DisplayString(1, key_press1);
     666:	60 91 14 01 	lds	r22, 0x0114
     66a:	70 91 15 01 	lds	r23, 0x0115
     66e:	81 e0       	ldi	r24, 0x01	; 1
		break;
     670:	9d cd       	rjmp	.-1222   	; 0x1ac <LCD_DisplayString>
		//-----------------------------
		case wrong:
		eeprom_write_byte((uint8_t*)46, final_highscore);
     672:	60 91 3c 02 	lds	r22, 0x023C
     676:	8e e2       	ldi	r24, 0x2E	; 46
     678:	90 e0       	ldi	r25, 0x00	; 0
     67a:	0e 94 fb 0b 	call	0x17f6	; 0x17f6 <__eewr_byte_m1284>
		TimerSet(1000);
     67e:	68 ee       	ldi	r22, 0xE8	; 232
     680:	73 e0       	ldi	r23, 0x03	; 3
     682:	80 e0       	ldi	r24, 0x00	; 0
     684:	90 e0       	ldi	r25, 0x00	; 0
     686:	b7 dd       	rcall	.-1170   	; 0x1f6 <TimerSet>
		LCD_ClearScreen();
     688:	8f dd       	rcall	.-1250   	; 0x1a8 <LCD_ClearScreen>
		LCD_Cursor(1);
     68a:	81 e0       	ldi	r24, 0x01	; 1
     68c:	87 dd       	rcall	.-1266   	; 0x19c <LCD_Cursor>
		LCD_DisplayString(1, wrong_string);
     68e:	60 91 18 01 	lds	r22, 0x0118
     692:	70 91 19 01 	lds	r23, 0x0119
     696:	81 e0       	ldi	r24, 0x01	; 1
     698:	89 dd       	rcall	.-1262   	; 0x1ac <LCD_DisplayString>
		LCD_WriteData(0);
     69a:	80 e0       	ldi	r24, 0x00	; 0
		break;
     69c:	6f cd       	rjmp	.-1314   	; 0x17c <LCD_WriteData>
		//-----------------------------
		case win:
		eeprom_write_byte((uint8_t*)46, final_highscore);
     69e:	60 91 3c 02 	lds	r22, 0x023C
     6a2:	8e e2       	ldi	r24, 0x2E	; 46
     6a4:	90 e0       	ldi	r25, 0x00	; 0
     6a6:	0e 94 fb 0b 	call	0x17f6	; 0x17f6 <__eewr_byte_m1284>
		TimerSet(1000);
     6aa:	68 ee       	ldi	r22, 0xE8	; 232
     6ac:	73 e0       	ldi	r23, 0x03	; 3
     6ae:	80 e0       	ldi	r24, 0x00	; 0
     6b0:	90 e0       	ldi	r25, 0x00	; 0
     6b2:	a1 dd       	rcall	.-1214   	; 0x1f6 <TimerSet>
		LCD_ClearScreen();
     6b4:	79 dd       	rcall	.-1294   	; 0x1a8 <LCD_ClearScreen>
		LCD_Cursor(1);
     6b6:	81 e0       	ldi	r24, 0x01	; 1
     6b8:	71 dd       	rcall	.-1310   	; 0x19c <LCD_Cursor>
		LCD_DisplayString(1, win_string);
     6ba:	60 91 1a 01 	lds	r22, 0x011A
     6be:	70 91 1b 01 	lds	r23, 0x011B
     6c2:	81 e0       	ldi	r24, 0x01	; 1
     6c4:	73 dd       	rcall	.-1306   	; 0x1ac <LCD_DisplayString>
		LCD_WriteData(0);
     6c6:	80 e0       	ldi	r24, 0x00	; 0
     6c8:	59 cd       	rjmp	.-1358   	; 0x17c <LCD_WriteData>
     6ca:	08 95       	ret

000006cc <level2_tick>:
}

enum level2s {l2_init, blink21, blink22, display21, display22, wrong2, win2} level2;
void level2_tick()
{
	b0 = ~PINA & 0x04;
     6cc:	90 b1       	in	r25, 0x00	; 0
     6ce:	90 95       	com	r25
     6d0:	94 70       	andi	r25, 0x04	; 4
     6d2:	90 93 2a 02 	sts	0x022A, r25
	b1 = ~PINA & 0x08;
     6d6:	30 b1       	in	r19, 0x00	; 0
     6d8:	30 95       	com	r19
     6da:	38 70       	andi	r19, 0x08	; 8
     6dc:	30 93 29 02 	sts	0x0229, r19
	b2 = ~PINA & 0x10;
     6e0:	40 b1       	in	r20, 0x00	; 0
     6e2:	40 95       	com	r20
     6e4:	40 71       	andi	r20, 0x10	; 16
     6e6:	40 93 28 02 	sts	0x0228, r20
	b3 = ~PINA & 0x20;
     6ea:	20 b1       	in	r18, 0x00	; 0
     6ec:	20 95       	com	r18
     6ee:	20 72       	andi	r18, 0x20	; 32
     6f0:	20 93 27 02 	sts	0x0227, r18
	b4 = ~PINA & 0x40;
     6f4:	50 b1       	in	r21, 0x00	; 0
     6f6:	50 95       	com	r21
     6f8:	50 74       	andi	r21, 0x40	; 64
     6fa:	50 93 26 02 	sts	0x0226, r21
	switch (level2)
     6fe:	80 91 38 02 	lds	r24, 0x0238
     702:	83 30       	cpi	r24, 0x03	; 3
     704:	31 f1       	breq	.+76     	; 0x752 <level2_tick+0x86>
     706:	20 f4       	brcc	.+8      	; 0x710 <level2_tick+0x44>
     708:	81 30       	cpi	r24, 0x01	; 1
     70a:	d9 f0       	breq	.+54     	; 0x742 <level2_tick+0x76>
     70c:	f0 f4       	brcc	.+60     	; 0x74a <level2_tick+0x7e>
     70e:	09 c0       	rjmp	.+18     	; 0x722 <level2_tick+0x56>
     710:	85 30       	cpi	r24, 0x05	; 5
     712:	09 f4       	brne	.+2      	; 0x716 <level2_tick+0x4a>
     714:	70 c0       	rjmp	.+224    	; 0x7f6 <level2_tick+0x12a>
     716:	08 f4       	brcc	.+2      	; 0x71a <level2_tick+0x4e>
     718:	45 c0       	rjmp	.+138    	; 0x7a4 <level2_tick+0xd8>
     71a:	86 30       	cpi	r24, 0x06	; 6
     71c:	09 f0       	breq	.+2      	; 0x720 <level2_tick+0x54>
     71e:	71 c0       	rjmp	.+226    	; 0x802 <level2_tick+0x136>
     720:	6d c0       	rjmp	.+218    	; 0x7fc <level2_tick+0x130>
	{
		case l2_init:
		end_l1 = 1;
     722:	81 e0       	ldi	r24, 0x01	; 1
     724:	80 93 2b 02 	sts	0x022B, r24
		if (!start_l2)
     728:	80 91 2f 02 	lds	r24, 0x022F
     72c:	81 11       	cpse	r24, r1
     72e:	03 c0       	rjmp	.+6      	; 0x736 <level2_tick+0x6a>
		{
			level2 = l2_init;
     730:	10 92 38 02 	sts	0x0238, r1
     734:	77 c0       	rjmp	.+238    	; 0x824 <level2_tick+0x158>
		}
		else if (start_l2)
		{
			highscore_total = 0;
     736:	10 92 31 02 	sts	0x0231, r1
			level2 = blink21;
     73a:	81 e0       	ldi	r24, 0x01	; 1
     73c:	80 93 38 02 	sts	0x0238, r24
     740:	76 c0       	rjmp	.+236    	; 0x82e <level2_tick+0x162>
			end_l1 = 1;
		}
		break;
		//-----------------------------
		case blink21:
		level2 = blink22;
     742:	82 e0       	ldi	r24, 0x02	; 2
     744:	80 93 38 02 	sts	0x0238, r24
     748:	86 c0       	rjmp	.+268    	; 0x856 <level2_tick+0x18a>
		break;
		//-----------------------------
		case blink22:
		level2 = display21;
     74a:	83 e0       	ldi	r24, 0x03	; 3
     74c:	80 93 38 02 	sts	0x0238, r24
		break;
     750:	92 c0       	rjmp	.+292    	; 0x876 <level2_tick+0x1aa>
		//-----------------------------
		case display21:
		if (b0)
     752:	99 23       	and	r25, r25
     754:	79 f0       	breq	.+30     	; 0x774 <level2_tick+0xa8>
		{
			highscore_total++;
     756:	80 91 31 02 	lds	r24, 0x0231
     75a:	8f 5f       	subi	r24, 0xFF	; 255
     75c:	80 93 31 02 	sts	0x0231, r24
			if (highscore_total >= final_highscore)
     760:	90 91 3c 02 	lds	r25, 0x023C
     764:	89 17       	cp	r24, r25
     766:	10 f0       	brcs	.+4      	; 0x76c <level2_tick+0xa0>
			{
				final_highscore = highscore_total;
     768:	80 93 3c 02 	sts	0x023C, r24
			}
			level2 = display22;
     76c:	84 e0       	ldi	r24, 0x04	; 4
     76e:	80 93 38 02 	sts	0x0238, r24
     772:	94 c0       	rjmp	.+296    	; 0x89c <level2_tick+0x1d0>
		}
		else if (b1 || b2 || b3)
     774:	31 11       	cpse	r19, r1
     776:	04 c0       	rjmp	.+8      	; 0x780 <level2_tick+0xb4>
     778:	41 11       	cpse	r20, r1
     77a:	02 c0       	rjmp	.+4      	; 0x780 <level2_tick+0xb4>
     77c:	22 23       	and	r18, r18
     77e:	61 f0       	breq	.+24     	; 0x798 <level2_tick+0xcc>
		{
			if (highscore_total >= final_highscore)
     780:	80 91 31 02 	lds	r24, 0x0231
     784:	90 91 3c 02 	lds	r25, 0x023C
     788:	89 17       	cp	r24, r25
     78a:	10 f0       	brcs	.+4      	; 0x790 <level2_tick+0xc4>
			{
				final_highscore = highscore_total;
     78c:	80 93 3c 02 	sts	0x023C, r24
			}
			level2 = wrong2;
     790:	85 e0       	ldi	r24, 0x05	; 5
     792:	80 93 38 02 	sts	0x0238, r24
     796:	8b c0       	rjmp	.+278    	; 0x8ae <level2_tick+0x1e2>
		}
		else if (b4)
     798:	55 23       	and	r21, r21
     79a:	09 f4       	brne	.+2      	; 0x79e <level2_tick+0xd2>
     79c:	6c c0       	rjmp	.+216    	; 0x876 <level2_tick+0x1aa>
		{
			level2 = l2_init;
     79e:	10 92 38 02 	sts	0x0238, r1
     7a2:	40 c0       	rjmp	.+128    	; 0x824 <level2_tick+0x158>
		}
		break;
		//-----------------------------
		case display22:
		if (b3)
     7a4:	22 23       	and	r18, r18
     7a6:	79 f0       	breq	.+30     	; 0x7c6 <level2_tick+0xfa>
		{
			highscore_total++;
     7a8:	80 91 31 02 	lds	r24, 0x0231
     7ac:	8f 5f       	subi	r24, 0xFF	; 255
     7ae:	80 93 31 02 	sts	0x0231, r24
			if (highscore_total >= final_highscore)
     7b2:	90 91 3c 02 	lds	r25, 0x023C
     7b6:	89 17       	cp	r24, r25
     7b8:	10 f0       	brcs	.+4      	; 0x7be <level2_tick+0xf2>
			{
				final_highscore = highscore_total;
     7ba:	80 93 3c 02 	sts	0x023C, r24
			}
			level2 = win2;
     7be:	86 e0       	ldi	r24, 0x06	; 6
     7c0:	80 93 38 02 	sts	0x0238, r24
     7c4:	89 c0       	rjmp	.+274    	; 0x8d8 <level2_tick+0x20c>
		}
		else if (b1 || b2 || b0)
     7c6:	31 11       	cpse	r19, r1
     7c8:	04 c0       	rjmp	.+8      	; 0x7d2 <level2_tick+0x106>
     7ca:	41 11       	cpse	r20, r1
     7cc:	02 c0       	rjmp	.+4      	; 0x7d2 <level2_tick+0x106>
     7ce:	99 23       	and	r25, r25
     7d0:	61 f0       	breq	.+24     	; 0x7ea <level2_tick+0x11e>
		{
			if (highscore_total >= final_highscore)
     7d2:	80 91 31 02 	lds	r24, 0x0231
     7d6:	90 91 3c 02 	lds	r25, 0x023C
     7da:	89 17       	cp	r24, r25
     7dc:	10 f0       	brcs	.+4      	; 0x7e2 <level2_tick+0x116>
			{
				final_highscore = highscore_total;
     7de:	80 93 3c 02 	sts	0x023C, r24
			}
			level2 = wrong2;
     7e2:	85 e0       	ldi	r24, 0x05	; 5
     7e4:	80 93 38 02 	sts	0x0238, r24
     7e8:	62 c0       	rjmp	.+196    	; 0x8ae <level2_tick+0x1e2>
		}
		else if (b4)
     7ea:	55 23       	and	r21, r21
     7ec:	09 f4       	brne	.+2      	; 0x7f0 <level2_tick+0x124>
     7ee:	56 c0       	rjmp	.+172    	; 0x89c <level2_tick+0x1d0>
		{
			level2 = l2_init;
     7f0:	10 92 38 02 	sts	0x0238, r1
     7f4:	17 c0       	rjmp	.+46     	; 0x824 <level2_tick+0x158>
		}
		break;
		//-----------------------------
		case wrong2:
		level2 = l2_init;
     7f6:	10 92 38 02 	sts	0x0238, r1
		break;
     7fa:	14 c0       	rjmp	.+40     	; 0x824 <level2_tick+0x158>
		//-----------------------------
		case win2:
		level2 = l2_init;
     7fc:	10 92 38 02 	sts	0x0238, r1
		break;
     800:	11 c0       	rjmp	.+34     	; 0x824 <level2_tick+0x158>
	}
	
	switch(level2)
     802:	83 30       	cpi	r24, 0x03	; 3
     804:	09 f4       	brne	.+2      	; 0x808 <level2_tick+0x13c>
     806:	37 c0       	rjmp	.+110    	; 0x876 <level2_tick+0x1aa>
     808:	20 f4       	brcc	.+8      	; 0x812 <level2_tick+0x146>
     80a:	81 30       	cpi	r24, 0x01	; 1
     80c:	81 f0       	breq	.+32     	; 0x82e <level2_tick+0x162>
     80e:	18 f5       	brcc	.+70     	; 0x856 <level2_tick+0x18a>
     810:	09 c0       	rjmp	.+18     	; 0x824 <level2_tick+0x158>
     812:	85 30       	cpi	r24, 0x05	; 5
     814:	09 f4       	brne	.+2      	; 0x818 <level2_tick+0x14c>
     816:	4b c0       	rjmp	.+150    	; 0x8ae <level2_tick+0x1e2>
     818:	08 f4       	brcc	.+2      	; 0x81c <level2_tick+0x150>
     81a:	40 c0       	rjmp	.+128    	; 0x89c <level2_tick+0x1d0>
     81c:	86 30       	cpi	r24, 0x06	; 6
     81e:	09 f0       	breq	.+2      	; 0x822 <level2_tick+0x156>
     820:	70 c0       	rjmp	.+224    	; 0x902 <level2_tick+0x236>
     822:	5a c0       	rjmp	.+180    	; 0x8d8 <level2_tick+0x20c>
	{
		case l2_init:
		start_l2 = 0;
     824:	10 92 2f 02 	sts	0x022F, r1
		end_l1 = 0;
     828:	10 92 2b 02 	sts	0x022B, r1
		break;
     82c:	08 95       	ret
		//-----------------------------
		case blink21:
		TimerSet(1500);
     82e:	6c ed       	ldi	r22, 0xDC	; 220
     830:	75 e0       	ldi	r23, 0x05	; 5
     832:	80 e0       	ldi	r24, 0x00	; 0
     834:	90 e0       	ldi	r25, 0x00	; 0
     836:	df dc       	rcall	.-1602   	; 0x1f6 <TimerSet>
		//TOP LEFT
		DDRB = 0xFF; PORTB = 0x0F;
     838:	9f ef       	ldi	r25, 0xFF	; 255
     83a:	94 b9       	out	0x04, r25	; 4
     83c:	8f e0       	ldi	r24, 0x0F	; 15
     83e:	85 b9       	out	0x05, r24	; 5
		DDRC = 0xFF; PORTC = 0x0F;
     840:	97 b9       	out	0x07, r25	; 7
     842:	88 b9       	out	0x08, r24	; 8
		LCD_ClearScreen();
     844:	b1 dc       	rcall	.-1694   	; 0x1a8 <LCD_ClearScreen>
		LCD_Cursor(1);
     846:	81 e0       	ldi	r24, 0x01	; 1
     848:	a9 dc       	rcall	.-1710   	; 0x19c <LCD_Cursor>
		LCD_DisplayString(1, start_string);
     84a:	60 91 1c 01 	lds	r22, 0x011C
     84e:	70 91 1d 01 	lds	r23, 0x011D
     852:	81 e0       	ldi	r24, 0x01	; 1
		break;
     854:	ab cc       	rjmp	.-1706   	; 0x1ac <LCD_DisplayString>
		//-----------------------------
		case blink22:
		//BOTTOM RIGHT
		DDRB = 0x0F; PORTB = 0xF0;
     856:	8f e0       	ldi	r24, 0x0F	; 15
     858:	84 b9       	out	0x04, r24	; 4
     85a:	80 ef       	ldi	r24, 0xF0	; 240
     85c:	85 b9       	out	0x05, r24	; 5
		DDRC = 0xFF; PORTC = 0xF0;
     85e:	9f ef       	ldi	r25, 0xFF	; 255
     860:	97 b9       	out	0x07, r25	; 7
     862:	88 b9       	out	0x08, r24	; 8
		LCD_ClearScreen();
     864:	a1 dc       	rcall	.-1726   	; 0x1a8 <LCD_ClearScreen>
		LCD_Cursor(1);
     866:	81 e0       	ldi	r24, 0x01	; 1
     868:	99 dc       	rcall	.-1742   	; 0x19c <LCD_Cursor>
		LCD_DisplayString(1, start_string);
     86a:	60 91 1c 01 	lds	r22, 0x011C
     86e:	70 91 1d 01 	lds	r23, 0x011D
     872:	81 e0       	ldi	r24, 0x01	; 1
		break;
     874:	9b cc       	rjmp	.-1738   	; 0x1ac <LCD_DisplayString>
		//-----------------------------
		case display21:
		TimerSet(300);
     876:	6c e2       	ldi	r22, 0x2C	; 44
     878:	71 e0       	ldi	r23, 0x01	; 1
     87a:	80 e0       	ldi	r24, 0x00	; 0
     87c:	90 e0       	ldi	r25, 0x00	; 0
     87e:	bb dc       	rcall	.-1674   	; 0x1f6 <TimerSet>
		//TURNS OFF SCREEN
		DDRB = 0xFF; PORTB = 0xFF;
     880:	8f ef       	ldi	r24, 0xFF	; 255
     882:	84 b9       	out	0x04, r24	; 4
     884:	85 b9       	out	0x05, r24	; 5
		DDRC = 0xFF; PORTC = 0x00;
     886:	87 b9       	out	0x07, r24	; 7
     888:	18 b8       	out	0x08, r1	; 8
		LCD_ClearScreen();
     88a:	8e dc       	rcall	.-1764   	; 0x1a8 <LCD_ClearScreen>
		LCD_Cursor(1);
     88c:	81 e0       	ldi	r24, 0x01	; 1
     88e:	86 dc       	rcall	.-1780   	; 0x19c <LCD_Cursor>
		LCD_DisplayString(1, key_press1);
     890:	60 91 14 01 	lds	r22, 0x0114
     894:	70 91 15 01 	lds	r23, 0x0115
     898:	81 e0       	ldi	r24, 0x01	; 1
		break;
     89a:	88 cc       	rjmp	.-1776   	; 0x1ac <LCD_DisplayString>
		//-----------------------------
		case display22:
		LCD_ClearScreen();
     89c:	85 dc       	rcall	.-1782   	; 0x1a8 <LCD_ClearScreen>
		LCD_Cursor(1);
     89e:	81 e0       	ldi	r24, 0x01	; 1
     8a0:	7d dc       	rcall	.-1798   	; 0x19c <LCD_Cursor>
		LCD_DisplayString(1, key_press2);
     8a2:	60 91 12 01 	lds	r22, 0x0112
     8a6:	70 91 13 01 	lds	r23, 0x0113
     8aa:	81 e0       	ldi	r24, 0x01	; 1
		break;
     8ac:	7f cc       	rjmp	.-1794   	; 0x1ac <LCD_DisplayString>
		//-----------------------------
		case wrong2:
		TimerSet(1000);
     8ae:	68 ee       	ldi	r22, 0xE8	; 232
     8b0:	73 e0       	ldi	r23, 0x03	; 3
     8b2:	80 e0       	ldi	r24, 0x00	; 0
     8b4:	90 e0       	ldi	r25, 0x00	; 0
     8b6:	9f dc       	rcall	.-1730   	; 0x1f6 <TimerSet>
		eeprom_write_byte((uint8_t*)46, final_highscore);
     8b8:	60 91 3c 02 	lds	r22, 0x023C
     8bc:	8e e2       	ldi	r24, 0x2E	; 46
     8be:	90 e0       	ldi	r25, 0x00	; 0
     8c0:	9a d7       	rcall	.+3892   	; 0x17f6 <__eewr_byte_m1284>
		LCD_ClearScreen();
     8c2:	72 dc       	rcall	.-1820   	; 0x1a8 <LCD_ClearScreen>
		LCD_Cursor(1);
     8c4:	81 e0       	ldi	r24, 0x01	; 1
     8c6:	6a dc       	rcall	.-1836   	; 0x19c <LCD_Cursor>
		LCD_DisplayString(1, wrong_string);
     8c8:	60 91 18 01 	lds	r22, 0x0118
     8cc:	70 91 19 01 	lds	r23, 0x0119
     8d0:	81 e0       	ldi	r24, 0x01	; 1
     8d2:	6c dc       	rcall	.-1832   	; 0x1ac <LCD_DisplayString>
		LCD_WriteData(0);
     8d4:	80 e0       	ldi	r24, 0x00	; 0
		break;
     8d6:	52 cc       	rjmp	.-1884   	; 0x17c <LCD_WriteData>
		//-----------------------------
		case win2:
		TimerSet(1000);
     8d8:	68 ee       	ldi	r22, 0xE8	; 232
     8da:	73 e0       	ldi	r23, 0x03	; 3
     8dc:	80 e0       	ldi	r24, 0x00	; 0
     8de:	90 e0       	ldi	r25, 0x00	; 0
     8e0:	8a dc       	rcall	.-1772   	; 0x1f6 <TimerSet>
		eeprom_write_byte((uint8_t*)46, final_highscore);
     8e2:	60 91 3c 02 	lds	r22, 0x023C
     8e6:	8e e2       	ldi	r24, 0x2E	; 46
     8e8:	90 e0       	ldi	r25, 0x00	; 0
     8ea:	85 d7       	rcall	.+3850   	; 0x17f6 <__eewr_byte_m1284>
		LCD_ClearScreen();
     8ec:	5d dc       	rcall	.-1862   	; 0x1a8 <LCD_ClearScreen>
		LCD_Cursor(1);
     8ee:	81 e0       	ldi	r24, 0x01	; 1
     8f0:	55 dc       	rcall	.-1878   	; 0x19c <LCD_Cursor>
		LCD_DisplayString(1, win_string);
     8f2:	60 91 1a 01 	lds	r22, 0x011A
     8f6:	70 91 1b 01 	lds	r23, 0x011B
     8fa:	81 e0       	ldi	r24, 0x01	; 1
     8fc:	57 dc       	rcall	.-1874   	; 0x1ac <LCD_DisplayString>
		LCD_WriteData(0);
     8fe:	80 e0       	ldi	r24, 0x00	; 0
     900:	3d cc       	rjmp	.-1926   	; 0x17c <LCD_WriteData>
     902:	08 95       	ret

00000904 <level3_tick>:
}

enum level3s {l3_init, blink31, blink32, blinkoff32_33, blink33, blink34, blink35, display31, display32, display33, display34, display35, wrong3, win3} level3;
void level3_tick()
{
	b0 = ~PINA & 0x04;
     904:	40 b1       	in	r20, 0x00	; 0
     906:	40 95       	com	r20
     908:	44 70       	andi	r20, 0x04	; 4
     90a:	40 93 2a 02 	sts	0x022A, r20
	b1 = ~PINA & 0x08;
     90e:	90 b1       	in	r25, 0x00	; 0
     910:	90 95       	com	r25
     912:	98 70       	andi	r25, 0x08	; 8
     914:	90 93 29 02 	sts	0x0229, r25
	b2 = ~PINA & 0x10;
     918:	30 b1       	in	r19, 0x00	; 0
     91a:	30 95       	com	r19
     91c:	30 71       	andi	r19, 0x10	; 16
     91e:	30 93 28 02 	sts	0x0228, r19
	b3 = ~PINA & 0x20;
     922:	20 b1       	in	r18, 0x00	; 0
     924:	20 95       	com	r18
     926:	20 72       	andi	r18, 0x20	; 32
     928:	20 93 27 02 	sts	0x0227, r18
	b4 = ~PINA & 0x40;
     92c:	50 b1       	in	r21, 0x00	; 0
     92e:	50 95       	com	r21
     930:	50 74       	andi	r21, 0x40	; 64
     932:	50 93 26 02 	sts	0x0226, r21
	switch (level3)
     936:	80 91 3e 02 	lds	r24, 0x023E
     93a:	86 30       	cpi	r24, 0x06	; 6
     93c:	09 f4       	brne	.+2      	; 0x940 <level3_tick+0x3c>
     93e:	45 c0       	rjmp	.+138    	; 0x9ca <level3_tick+0xc6>
     940:	68 f4       	brcc	.+26     	; 0x95c <level3_tick+0x58>
     942:	82 30       	cpi	r24, 0x02	; 2
     944:	91 f1       	breq	.+100    	; 0x9aa <level3_tick+0xa6>
     946:	30 f4       	brcc	.+12     	; 0x954 <level3_tick+0x50>
     948:	88 23       	and	r24, r24
     94a:	d9 f0       	breq	.+54     	; 0x982 <level3_tick+0x7e>
     94c:	81 30       	cpi	r24, 0x01	; 1
     94e:	09 f0       	breq	.+2      	; 0x952 <level3_tick+0x4e>
     950:	13 c1       	rjmp	.+550    	; 0xb78 <level3_tick+0x274>
     952:	27 c0       	rjmp	.+78     	; 0x9a2 <level3_tick+0x9e>
     954:	84 30       	cpi	r24, 0x04	; 4
     956:	89 f1       	breq	.+98     	; 0x9ba <level3_tick+0xb6>
     958:	a0 f5       	brcc	.+104    	; 0x9c2 <level3_tick+0xbe>
     95a:	2b c0       	rjmp	.+86     	; 0x9b2 <level3_tick+0xae>
     95c:	8a 30       	cpi	r24, 0x0A	; 10
     95e:	09 f4       	brne	.+2      	; 0x962 <level3_tick+0x5e>
     960:	b3 c0       	rjmp	.+358    	; 0xac8 <level3_tick+0x1c4>
     962:	30 f4       	brcc	.+12     	; 0x970 <level3_tick+0x6c>
     964:	88 30       	cpi	r24, 0x08	; 8
     966:	09 f4       	brne	.+2      	; 0x96a <level3_tick+0x66>
     968:	5d c0       	rjmp	.+186    	; 0xa24 <level3_tick+0x120>
     96a:	08 f0       	brcs	.+2      	; 0x96e <level3_tick+0x6a>
     96c:	84 c0       	rjmp	.+264    	; 0xa76 <level3_tick+0x172>
     96e:	31 c0       	rjmp	.+98     	; 0x9d2 <level3_tick+0xce>
     970:	8c 30       	cpi	r24, 0x0C	; 12
     972:	09 f4       	brne	.+2      	; 0x976 <level3_tick+0x72>
     974:	fb c0       	rjmp	.+502    	; 0xb6c <level3_tick+0x268>
     976:	08 f4       	brcc	.+2      	; 0x97a <level3_tick+0x76>
     978:	d0 c0       	rjmp	.+416    	; 0xb1a <level3_tick+0x216>
     97a:	8d 30       	cpi	r24, 0x0D	; 13
     97c:	09 f0       	breq	.+2      	; 0x980 <level3_tick+0x7c>
     97e:	fc c0       	rjmp	.+504    	; 0xb78 <level3_tick+0x274>
     980:	f8 c0       	rjmp	.+496    	; 0xb72 <level3_tick+0x26e>
	{
		case l3_init:
		end_l1 = 1;
     982:	81 e0       	ldi	r24, 0x01	; 1
     984:	80 93 2b 02 	sts	0x022B, r24
		if (!start_l3)
     988:	80 91 2e 02 	lds	r24, 0x022E
     98c:	81 11       	cpse	r24, r1
     98e:	03 c0       	rjmp	.+6      	; 0x996 <level3_tick+0x92>
		{
			level3 = l3_init;
     990:	10 92 3e 02 	sts	0x023E, r1
     994:	17 c1       	rjmp	.+558    	; 0xbc4 <level3_tick+0x2c0>
		}
		else if (start_l3)
		{
			highscore_total = 0;
     996:	10 92 31 02 	sts	0x0231, r1
			level3 = blink31;
     99a:	81 e0       	ldi	r24, 0x01	; 1
     99c:	80 93 3e 02 	sts	0x023E, r24
     9a0:	16 c1       	rjmp	.+556    	; 0xbce <level3_tick+0x2ca>
			end_l1 = 1;
		}
		break;
		//-----------------------------
		case blink31:
		level3 = blink32;
     9a2:	82 e0       	ldi	r24, 0x02	; 2
     9a4:	80 93 3e 02 	sts	0x023E, r24
     9a8:	26 c1       	rjmp	.+588    	; 0xbf6 <level3_tick+0x2f2>
		break;
		//-----------------------------
		case blink32:
		level3 = blinkoff32_33;
     9aa:	83 e0       	ldi	r24, 0x03	; 3
     9ac:	80 93 3e 02 	sts	0x023E, r24
     9b0:	32 c1       	rjmp	.+612    	; 0xc16 <level3_tick+0x312>
		break;
		//-----------------------------
		case blinkoff32_33:
		level3 = blink33;
     9b2:	84 e0       	ldi	r24, 0x04	; 4
     9b4:	80 93 3e 02 	sts	0x023E, r24
     9b8:	39 c1       	rjmp	.+626    	; 0xc2c <level3_tick+0x328>
		break;
		//-----------------------------
		case blink33:
		level3 = blink34;
     9ba:	85 e0       	ldi	r24, 0x05	; 5
     9bc:	80 93 3e 02 	sts	0x023E, r24
     9c0:	4a c1       	rjmp	.+660    	; 0xc56 <level3_tick+0x352>
		break;
		//-----------------------------
		case blink34:
		level3 = blink35;
     9c2:	86 e0       	ldi	r24, 0x06	; 6
     9c4:	80 93 3e 02 	sts	0x023E, r24
     9c8:	56 c1       	rjmp	.+684    	; 0xc76 <level3_tick+0x372>
		break;
		//-----------------------------
		case blink35:
		level3 = display31;
     9ca:	87 e0       	ldi	r24, 0x07	; 7
     9cc:	80 93 3e 02 	sts	0x023E, r24
		break;
     9d0:	62 c1       	rjmp	.+708    	; 0xc96 <level3_tick+0x392>
		//-----------------------------
		case display31:
		if (b0)
     9d2:	44 23       	and	r20, r20
     9d4:	79 f0       	breq	.+30     	; 0x9f4 <level3_tick+0xf0>
		{
			highscore_total++;
     9d6:	80 91 31 02 	lds	r24, 0x0231
     9da:	8f 5f       	subi	r24, 0xFF	; 255
     9dc:	80 93 31 02 	sts	0x0231, r24
			if (highscore_total >= final_highscore)
     9e0:	90 91 3c 02 	lds	r25, 0x023C
     9e4:	89 17       	cp	r24, r25
     9e6:	10 f0       	brcs	.+4      	; 0x9ec <level3_tick+0xe8>
			{
				final_highscore = highscore_total;
     9e8:	80 93 3c 02 	sts	0x023C, r24
			}
			level3 = display32;
     9ec:	88 e0       	ldi	r24, 0x08	; 8
     9ee:	80 93 3e 02 	sts	0x023E, r24
     9f2:	64 c1       	rjmp	.+712    	; 0xcbc <level3_tick+0x3b8>
		}
		else if (b1 || b2 || b3)
     9f4:	91 11       	cpse	r25, r1
     9f6:	04 c0       	rjmp	.+8      	; 0xa00 <level3_tick+0xfc>
     9f8:	31 11       	cpse	r19, r1
     9fa:	02 c0       	rjmp	.+4      	; 0xa00 <level3_tick+0xfc>
     9fc:	22 23       	and	r18, r18
     9fe:	61 f0       	breq	.+24     	; 0xa18 <level3_tick+0x114>
		{
			if (highscore_total >= final_highscore)
     a00:	80 91 31 02 	lds	r24, 0x0231
     a04:	90 91 3c 02 	lds	r25, 0x023C
     a08:	89 17       	cp	r24, r25
     a0a:	10 f0       	brcs	.+4      	; 0xa10 <level3_tick+0x10c>
			{
				final_highscore = highscore_total;
     a0c:	80 93 3c 02 	sts	0x023C, r24
			}
			level3 = wrong3;
     a10:	8c e0       	ldi	r24, 0x0C	; 12
     a12:	80 93 3e 02 	sts	0x023E, r24
     a16:	76 c1       	rjmp	.+748    	; 0xd04 <level3_tick+0x400>
		}
		else if (b4)
     a18:	55 23       	and	r21, r21
     a1a:	09 f4       	brne	.+2      	; 0xa1e <level3_tick+0x11a>
     a1c:	3c c1       	rjmp	.+632    	; 0xc96 <level3_tick+0x392>
		{
			level3 = l3_init;
     a1e:	10 92 3e 02 	sts	0x023E, r1
     a22:	d0 c0       	rjmp	.+416    	; 0xbc4 <level3_tick+0x2c0>
		}
		break;
		//-----------------------------
		case display32:
		if (b1)
     a24:	99 23       	and	r25, r25
     a26:	79 f0       	breq	.+30     	; 0xa46 <level3_tick+0x142>
		{
			highscore_total++;
     a28:	80 91 31 02 	lds	r24, 0x0231
     a2c:	8f 5f       	subi	r24, 0xFF	; 255
     a2e:	80 93 31 02 	sts	0x0231, r24
			if (highscore_total >= final_highscore)
     a32:	90 91 3c 02 	lds	r25, 0x023C
     a36:	89 17       	cp	r24, r25
     a38:	10 f0       	brcs	.+4      	; 0xa3e <level3_tick+0x13a>
			{
				final_highscore = highscore_total;
     a3a:	80 93 3c 02 	sts	0x023C, r24
			}
			level3 = display33;
     a3e:	89 e0       	ldi	r24, 0x09	; 9
     a40:	80 93 3e 02 	sts	0x023E, r24
     a44:	44 c1       	rjmp	.+648    	; 0xcce <level3_tick+0x3ca>
		}
		else if (b3 || b2 || b0)
     a46:	21 11       	cpse	r18, r1
     a48:	04 c0       	rjmp	.+8      	; 0xa52 <level3_tick+0x14e>
     a4a:	31 11       	cpse	r19, r1
     a4c:	02 c0       	rjmp	.+4      	; 0xa52 <level3_tick+0x14e>
     a4e:	44 23       	and	r20, r20
     a50:	61 f0       	breq	.+24     	; 0xa6a <level3_tick+0x166>
		{
			if (highscore_total >= final_highscore)
     a52:	80 91 31 02 	lds	r24, 0x0231
     a56:	90 91 3c 02 	lds	r25, 0x023C
     a5a:	89 17       	cp	r24, r25
     a5c:	10 f0       	brcs	.+4      	; 0xa62 <level3_tick+0x15e>
			{
				final_highscore = highscore_total;
     a5e:	80 93 3c 02 	sts	0x023C, r24
			}
			level3 = wrong3;
     a62:	8c e0       	ldi	r24, 0x0C	; 12
     a64:	80 93 3e 02 	sts	0x023E, r24
     a68:	4d c1       	rjmp	.+666    	; 0xd04 <level3_tick+0x400>
		}
		else if (b4)
     a6a:	55 23       	and	r21, r21
     a6c:	09 f4       	brne	.+2      	; 0xa70 <level3_tick+0x16c>
     a6e:	26 c1       	rjmp	.+588    	; 0xcbc <level3_tick+0x3b8>
		{
			level3 = l3_init;
     a70:	10 92 3e 02 	sts	0x023E, r1
     a74:	a7 c0       	rjmp	.+334    	; 0xbc4 <level3_tick+0x2c0>
		}
		break;
		//-----------------------------
		case display33:
		if (b1)
     a76:	99 23       	and	r25, r25
     a78:	79 f0       	breq	.+30     	; 0xa98 <level3_tick+0x194>
		{
			highscore_total++;
     a7a:	80 91 31 02 	lds	r24, 0x0231
     a7e:	8f 5f       	subi	r24, 0xFF	; 255
     a80:	80 93 31 02 	sts	0x0231, r24
			if (highscore_total >= final_highscore)
     a84:	90 91 3c 02 	lds	r25, 0x023C
     a88:	89 17       	cp	r24, r25
     a8a:	10 f0       	brcs	.+4      	; 0xa90 <level3_tick+0x18c>
			{
				final_highscore = highscore_total;
     a8c:	80 93 3c 02 	sts	0x023C, r24
			}
			level3 = display34;
     a90:	8a e0       	ldi	r24, 0x0A	; 10
     a92:	80 93 3e 02 	sts	0x023E, r24
     a96:	24 c1       	rjmp	.+584    	; 0xce0 <level3_tick+0x3dc>
		}
		else if (b3 || b2 || b0)
     a98:	21 11       	cpse	r18, r1
     a9a:	04 c0       	rjmp	.+8      	; 0xaa4 <level3_tick+0x1a0>
     a9c:	31 11       	cpse	r19, r1
     a9e:	02 c0       	rjmp	.+4      	; 0xaa4 <level3_tick+0x1a0>
     aa0:	44 23       	and	r20, r20
     aa2:	61 f0       	breq	.+24     	; 0xabc <level3_tick+0x1b8>
		{
			if (highscore_total >= final_highscore)
     aa4:	80 91 31 02 	lds	r24, 0x0231
     aa8:	90 91 3c 02 	lds	r25, 0x023C
     aac:	89 17       	cp	r24, r25
     aae:	10 f0       	brcs	.+4      	; 0xab4 <level3_tick+0x1b0>
			{
				final_highscore = highscore_total;
     ab0:	80 93 3c 02 	sts	0x023C, r24
			}
			level3 = wrong3;
     ab4:	8c e0       	ldi	r24, 0x0C	; 12
     ab6:	80 93 3e 02 	sts	0x023E, r24
     aba:	24 c1       	rjmp	.+584    	; 0xd04 <level3_tick+0x400>
		}
		else if (b4)
     abc:	55 23       	and	r21, r21
     abe:	09 f4       	brne	.+2      	; 0xac2 <level3_tick+0x1be>
     ac0:	06 c1       	rjmp	.+524    	; 0xcce <level3_tick+0x3ca>
		{
			level3 = l3_init;
     ac2:	10 92 3e 02 	sts	0x023E, r1
     ac6:	7e c0       	rjmp	.+252    	; 0xbc4 <level3_tick+0x2c0>
		}
		break;
		//-----------------------------
		case display34:
		if (b2)
     ac8:	33 23       	and	r19, r19
     aca:	79 f0       	breq	.+30     	; 0xaea <level3_tick+0x1e6>
		{
			highscore_total++;
     acc:	80 91 31 02 	lds	r24, 0x0231
     ad0:	8f 5f       	subi	r24, 0xFF	; 255
     ad2:	80 93 31 02 	sts	0x0231, r24
			if (highscore_total >= final_highscore)
     ad6:	90 91 3c 02 	lds	r25, 0x023C
     ada:	89 17       	cp	r24, r25
     adc:	10 f0       	brcs	.+4      	; 0xae2 <level3_tick+0x1de>
			{
				final_highscore = highscore_total;
     ade:	80 93 3c 02 	sts	0x023C, r24
			}
			level3 = display35;
     ae2:	8b e0       	ldi	r24, 0x0B	; 11
     ae4:	80 93 3e 02 	sts	0x023E, r24
     ae8:	04 c1       	rjmp	.+520    	; 0xcf2 <level3_tick+0x3ee>
		}
		else if (b1 || b3 || b0)
     aea:	91 11       	cpse	r25, r1
     aec:	04 c0       	rjmp	.+8      	; 0xaf6 <level3_tick+0x1f2>
     aee:	21 11       	cpse	r18, r1
     af0:	02 c0       	rjmp	.+4      	; 0xaf6 <level3_tick+0x1f2>
     af2:	44 23       	and	r20, r20
     af4:	61 f0       	breq	.+24     	; 0xb0e <level3_tick+0x20a>
		{
			if (highscore_total >= final_highscore)
     af6:	80 91 31 02 	lds	r24, 0x0231
     afa:	90 91 3c 02 	lds	r25, 0x023C
     afe:	89 17       	cp	r24, r25
     b00:	10 f0       	brcs	.+4      	; 0xb06 <level3_tick+0x202>
			{
				final_highscore = highscore_total;
     b02:	80 93 3c 02 	sts	0x023C, r24
			}
			level3 = wrong3;
     b06:	8c e0       	ldi	r24, 0x0C	; 12
     b08:	80 93 3e 02 	sts	0x023E, r24
     b0c:	fb c0       	rjmp	.+502    	; 0xd04 <level3_tick+0x400>
		}
		else if (b4)
     b0e:	55 23       	and	r21, r21
     b10:	09 f4       	brne	.+2      	; 0xb14 <level3_tick+0x210>
     b12:	e6 c0       	rjmp	.+460    	; 0xce0 <level3_tick+0x3dc>
		{
			level3 = l3_init;
     b14:	10 92 3e 02 	sts	0x023E, r1
     b18:	55 c0       	rjmp	.+170    	; 0xbc4 <level3_tick+0x2c0>
		}
		break;
		//-----------------------------
		case display35:
		if (b3)
     b1a:	22 23       	and	r18, r18
     b1c:	79 f0       	breq	.+30     	; 0xb3c <level3_tick+0x238>
		{
			highscore_total++;
     b1e:	80 91 31 02 	lds	r24, 0x0231
     b22:	8f 5f       	subi	r24, 0xFF	; 255
     b24:	80 93 31 02 	sts	0x0231, r24
			if (highscore_total >= final_highscore)
     b28:	90 91 3c 02 	lds	r25, 0x023C
     b2c:	89 17       	cp	r24, r25
     b2e:	10 f0       	brcs	.+4      	; 0xb34 <level3_tick+0x230>
			{
				final_highscore = highscore_total;
     b30:	80 93 3c 02 	sts	0x023C, r24
			}
			level3 = win3;
     b34:	8d e0       	ldi	r24, 0x0D	; 13
     b36:	80 93 3e 02 	sts	0x023E, r24
     b3a:	f9 c0       	rjmp	.+498    	; 0xd2e <level3_tick+0x42a>
		}
		else if (b1 || b2 || b0)
     b3c:	91 11       	cpse	r25, r1
     b3e:	04 c0       	rjmp	.+8      	; 0xb48 <level3_tick+0x244>
     b40:	31 11       	cpse	r19, r1
     b42:	02 c0       	rjmp	.+4      	; 0xb48 <level3_tick+0x244>
     b44:	44 23       	and	r20, r20
     b46:	61 f0       	breq	.+24     	; 0xb60 <level3_tick+0x25c>
		{
			if (highscore_total >= final_highscore)
     b48:	80 91 31 02 	lds	r24, 0x0231
     b4c:	90 91 3c 02 	lds	r25, 0x023C
     b50:	89 17       	cp	r24, r25
     b52:	10 f0       	brcs	.+4      	; 0xb58 <level3_tick+0x254>
			{
				final_highscore = highscore_total;
     b54:	80 93 3c 02 	sts	0x023C, r24
			}
			level3 = wrong3;
     b58:	8c e0       	ldi	r24, 0x0C	; 12
     b5a:	80 93 3e 02 	sts	0x023E, r24
     b5e:	d2 c0       	rjmp	.+420    	; 0xd04 <level3_tick+0x400>
		}
		else if (b4)
     b60:	55 23       	and	r21, r21
     b62:	09 f4       	brne	.+2      	; 0xb66 <level3_tick+0x262>
     b64:	c6 c0       	rjmp	.+396    	; 0xcf2 <level3_tick+0x3ee>
		{
			level3 = l3_init;
     b66:	10 92 3e 02 	sts	0x023E, r1
     b6a:	2c c0       	rjmp	.+88     	; 0xbc4 <level3_tick+0x2c0>
		}
		break;
		//-----------------------------
		case wrong3:
		level3 = l3_init;
     b6c:	10 92 3e 02 	sts	0x023E, r1
		break;
     b70:	29 c0       	rjmp	.+82     	; 0xbc4 <level3_tick+0x2c0>
		//-----------------------------
		case win3:
		level3 = l3_init;
     b72:	10 92 3e 02 	sts	0x023E, r1
		break;
     b76:	26 c0       	rjmp	.+76     	; 0xbc4 <level3_tick+0x2c0>
	}
	
	switch(level3)
     b78:	86 30       	cpi	r24, 0x06	; 6
     b7a:	09 f4       	brne	.+2      	; 0xb7e <level3_tick+0x27a>
     b7c:	7c c0       	rjmp	.+248    	; 0xc76 <level3_tick+0x372>
     b7e:	78 f4       	brcc	.+30     	; 0xb9e <level3_tick+0x29a>
     b80:	82 30       	cpi	r24, 0x02	; 2
     b82:	c9 f1       	breq	.+114    	; 0xbf6 <level3_tick+0x2f2>
     b84:	30 f4       	brcc	.+12     	; 0xb92 <level3_tick+0x28e>
     b86:	88 23       	and	r24, r24
     b88:	e9 f0       	breq	.+58     	; 0xbc4 <level3_tick+0x2c0>
     b8a:	81 30       	cpi	r24, 0x01	; 1
     b8c:	09 f0       	breq	.+2      	; 0xb90 <level3_tick+0x28c>
     b8e:	e4 c0       	rjmp	.+456    	; 0xd58 <level3_tick+0x454>
     b90:	1e c0       	rjmp	.+60     	; 0xbce <level3_tick+0x2ca>
     b92:	84 30       	cpi	r24, 0x04	; 4
     b94:	09 f4       	brne	.+2      	; 0xb98 <level3_tick+0x294>
     b96:	4a c0       	rjmp	.+148    	; 0xc2c <level3_tick+0x328>
     b98:	08 f0       	brcs	.+2      	; 0xb9c <level3_tick+0x298>
     b9a:	5d c0       	rjmp	.+186    	; 0xc56 <level3_tick+0x352>
     b9c:	3c c0       	rjmp	.+120    	; 0xc16 <level3_tick+0x312>
     b9e:	8a 30       	cpi	r24, 0x0A	; 10
     ba0:	09 f4       	brne	.+2      	; 0xba4 <level3_tick+0x2a0>
     ba2:	9e c0       	rjmp	.+316    	; 0xce0 <level3_tick+0x3dc>
     ba4:	30 f4       	brcc	.+12     	; 0xbb2 <level3_tick+0x2ae>
     ba6:	88 30       	cpi	r24, 0x08	; 8
     ba8:	09 f4       	brne	.+2      	; 0xbac <level3_tick+0x2a8>
     baa:	88 c0       	rjmp	.+272    	; 0xcbc <level3_tick+0x3b8>
     bac:	08 f0       	brcs	.+2      	; 0xbb0 <level3_tick+0x2ac>
     bae:	8f c0       	rjmp	.+286    	; 0xcce <level3_tick+0x3ca>
     bb0:	72 c0       	rjmp	.+228    	; 0xc96 <level3_tick+0x392>
     bb2:	8c 30       	cpi	r24, 0x0C	; 12
     bb4:	09 f4       	brne	.+2      	; 0xbb8 <level3_tick+0x2b4>
     bb6:	a6 c0       	rjmp	.+332    	; 0xd04 <level3_tick+0x400>
     bb8:	08 f4       	brcc	.+2      	; 0xbbc <level3_tick+0x2b8>
     bba:	9b c0       	rjmp	.+310    	; 0xcf2 <level3_tick+0x3ee>
     bbc:	8d 30       	cpi	r24, 0x0D	; 13
     bbe:	09 f0       	breq	.+2      	; 0xbc2 <level3_tick+0x2be>
     bc0:	cb c0       	rjmp	.+406    	; 0xd58 <level3_tick+0x454>
     bc2:	b5 c0       	rjmp	.+362    	; 0xd2e <level3_tick+0x42a>
	{
		case l3_init:
		start_l3 = 0;
     bc4:	10 92 2e 02 	sts	0x022E, r1
		end_l1 = 0;
     bc8:	10 92 2b 02 	sts	0x022B, r1
		break;
     bcc:	08 95       	ret
		//-----------------------------
		case blink31:
		TimerSet(500);
     bce:	64 ef       	ldi	r22, 0xF4	; 244
     bd0:	71 e0       	ldi	r23, 0x01	; 1
     bd2:	80 e0       	ldi	r24, 0x00	; 0
     bd4:	90 e0       	ldi	r25, 0x00	; 0
     bd6:	0f db       	rcall	.-2530   	; 0x1f6 <TimerSet>
		//TOP LEFT
		DDRB = 0xFF; PORTB = 0x0F;
     bd8:	9f ef       	ldi	r25, 0xFF	; 255
     bda:	94 b9       	out	0x04, r25	; 4
     bdc:	8f e0       	ldi	r24, 0x0F	; 15
     bde:	85 b9       	out	0x05, r24	; 5
		DDRC = 0xFF; PORTC = 0x0F;
     be0:	97 b9       	out	0x07, r25	; 7
     be2:	88 b9       	out	0x08, r24	; 8
		LCD_ClearScreen();
     be4:	e1 da       	rcall	.-2622   	; 0x1a8 <LCD_ClearScreen>
		LCD_Cursor(1);
     be6:	81 e0       	ldi	r24, 0x01	; 1
     be8:	d9 da       	rcall	.-2638   	; 0x19c <LCD_Cursor>
		LCD_DisplayString(1, start_string);
     bea:	60 91 1c 01 	lds	r22, 0x011C
     bee:	70 91 1d 01 	lds	r23, 0x011D
     bf2:	81 e0       	ldi	r24, 0x01	; 1
		break;
     bf4:	db ca       	rjmp	.-2634   	; 0x1ac <LCD_DisplayString>
		//-----------------------------
		case blink32:
		//BOTTOM LEFT
		DDRB = 0x0F; PORTB = 0xF0;
     bf6:	8f e0       	ldi	r24, 0x0F	; 15
     bf8:	84 b9       	out	0x04, r24	; 4
     bfa:	90 ef       	ldi	r25, 0xF0	; 240
     bfc:	95 b9       	out	0x05, r25	; 5
		DDRC = 0xFF; PORTC = 0x0F;
     bfe:	9f ef       	ldi	r25, 0xFF	; 255
     c00:	97 b9       	out	0x07, r25	; 7
     c02:	88 b9       	out	0x08, r24	; 8
		LCD_ClearScreen();
     c04:	d1 da       	rcall	.-2654   	; 0x1a8 <LCD_ClearScreen>
		LCD_Cursor(1);
     c06:	81 e0       	ldi	r24, 0x01	; 1
     c08:	c9 da       	rcall	.-2670   	; 0x19c <LCD_Cursor>
		LCD_DisplayString(1, start_string);
     c0a:	60 91 1c 01 	lds	r22, 0x011C
     c0e:	70 91 1d 01 	lds	r23, 0x011D
     c12:	81 e0       	ldi	r24, 0x01	; 1
		break;
     c14:	cb ca       	rjmp	.-2666   	; 0x1ac <LCD_DisplayString>
		//-----------------------------
		case blinkoff32_33:
		TimerSet(75);
     c16:	6b e4       	ldi	r22, 0x4B	; 75
     c18:	70 e0       	ldi	r23, 0x00	; 0
     c1a:	80 e0       	ldi	r24, 0x00	; 0
     c1c:	90 e0       	ldi	r25, 0x00	; 0
     c1e:	eb da       	rcall	.-2602   	; 0x1f6 <TimerSet>
		//BLINKS OFF FOR NEXT REPEAT STATE
		DDRB = 0xFF; PORTB = 0xFF;
     c20:	8f ef       	ldi	r24, 0xFF	; 255
     c22:	84 b9       	out	0x04, r24	; 4
     c24:	85 b9       	out	0x05, r24	; 5
		DDRC = 0xFF; PORTC = 0x00;
     c26:	87 b9       	out	0x07, r24	; 7
     c28:	18 b8       	out	0x08, r1	; 8
		break;
     c2a:	08 95       	ret
		//-----------------------------
		case blink33:
		TimerSet(500);
     c2c:	64 ef       	ldi	r22, 0xF4	; 244
     c2e:	71 e0       	ldi	r23, 0x01	; 1
     c30:	80 e0       	ldi	r24, 0x00	; 0
     c32:	90 e0       	ldi	r25, 0x00	; 0
     c34:	e0 da       	rcall	.-2624   	; 0x1f6 <TimerSet>
		//BOTTOM LEFT
		DDRB = 0x0F; PORTB = 0xF0;
     c36:	8f e0       	ldi	r24, 0x0F	; 15
     c38:	84 b9       	out	0x04, r24	; 4
     c3a:	90 ef       	ldi	r25, 0xF0	; 240
     c3c:	95 b9       	out	0x05, r25	; 5
		DDRC = 0xFF; PORTC = 0x0F;
     c3e:	9f ef       	ldi	r25, 0xFF	; 255
     c40:	97 b9       	out	0x07, r25	; 7
     c42:	88 b9       	out	0x08, r24	; 8
		LCD_ClearScreen();
     c44:	b1 da       	rcall	.-2718   	; 0x1a8 <LCD_ClearScreen>
		LCD_Cursor(1);
     c46:	81 e0       	ldi	r24, 0x01	; 1
     c48:	a9 da       	rcall	.-2734   	; 0x19c <LCD_Cursor>
		LCD_DisplayString(1, start_string);
     c4a:	60 91 1c 01 	lds	r22, 0x011C
     c4e:	70 91 1d 01 	lds	r23, 0x011D
     c52:	81 e0       	ldi	r24, 0x01	; 1
		break;
     c54:	ab ca       	rjmp	.-2730   	; 0x1ac <LCD_DisplayString>
		//-----------------------------
		case blink34:
		//TOP RIGHT
		DDRB = 0xFF; PORTB = 0x0F;
     c56:	8f ef       	ldi	r24, 0xFF	; 255
     c58:	84 b9       	out	0x04, r24	; 4
     c5a:	9f e0       	ldi	r25, 0x0F	; 15
     c5c:	95 b9       	out	0x05, r25	; 5
		DDRC = 0xFF; PORTC = 0xF0;
     c5e:	87 b9       	out	0x07, r24	; 7
     c60:	80 ef       	ldi	r24, 0xF0	; 240
     c62:	88 b9       	out	0x08, r24	; 8
		LCD_ClearScreen();
     c64:	a1 da       	rcall	.-2750   	; 0x1a8 <LCD_ClearScreen>
		LCD_Cursor(1);
     c66:	81 e0       	ldi	r24, 0x01	; 1
     c68:	99 da       	rcall	.-2766   	; 0x19c <LCD_Cursor>
		LCD_DisplayString(1, start_string);
     c6a:	60 91 1c 01 	lds	r22, 0x011C
     c6e:	70 91 1d 01 	lds	r23, 0x011D
     c72:	81 e0       	ldi	r24, 0x01	; 1
		break;
     c74:	9b ca       	rjmp	.-2762   	; 0x1ac <LCD_DisplayString>
		//-----------------------------
		case blink35:
		//BOTTOM RIGHT
		DDRB = 0x0F; PORTB = 0xF0;
     c76:	8f e0       	ldi	r24, 0x0F	; 15
     c78:	84 b9       	out	0x04, r24	; 4
     c7a:	80 ef       	ldi	r24, 0xF0	; 240
     c7c:	85 b9       	out	0x05, r24	; 5
		DDRC = 0xFF; PORTC = 0xF0;
     c7e:	9f ef       	ldi	r25, 0xFF	; 255
     c80:	97 b9       	out	0x07, r25	; 7
     c82:	88 b9       	out	0x08, r24	; 8
		LCD_ClearScreen();
     c84:	91 da       	rcall	.-2782   	; 0x1a8 <LCD_ClearScreen>
		LCD_Cursor(1);
     c86:	81 e0       	ldi	r24, 0x01	; 1
     c88:	89 da       	rcall	.-2798   	; 0x19c <LCD_Cursor>
		LCD_DisplayString(1, start_string);
     c8a:	60 91 1c 01 	lds	r22, 0x011C
     c8e:	70 91 1d 01 	lds	r23, 0x011D
     c92:	81 e0       	ldi	r24, 0x01	; 1
		break;
     c94:	8b ca       	rjmp	.-2794   	; 0x1ac <LCD_DisplayString>
		//-----------------------------
		case display31:
		TimerSet(300);
     c96:	6c e2       	ldi	r22, 0x2C	; 44
     c98:	71 e0       	ldi	r23, 0x01	; 1
     c9a:	80 e0       	ldi	r24, 0x00	; 0
     c9c:	90 e0       	ldi	r25, 0x00	; 0
     c9e:	ab da       	rcall	.-2730   	; 0x1f6 <TimerSet>
		//TURNS OFF SCREEN
		DDRB = 0xFF; PORTB = 0xFF;
     ca0:	8f ef       	ldi	r24, 0xFF	; 255
     ca2:	84 b9       	out	0x04, r24	; 4
     ca4:	85 b9       	out	0x05, r24	; 5
		DDRC = 0xFF; PORTC = 0x00;
     ca6:	87 b9       	out	0x07, r24	; 7
     ca8:	18 b8       	out	0x08, r1	; 8
		LCD_ClearScreen();
     caa:	7e da       	rcall	.-2820   	; 0x1a8 <LCD_ClearScreen>
		LCD_Cursor(1);
     cac:	81 e0       	ldi	r24, 0x01	; 1
     cae:	76 da       	rcall	.-2836   	; 0x19c <LCD_Cursor>
		LCD_DisplayString(1, key_press1);
     cb0:	60 91 14 01 	lds	r22, 0x0114
     cb4:	70 91 15 01 	lds	r23, 0x0115
     cb8:	81 e0       	ldi	r24, 0x01	; 1
		break;
     cba:	78 ca       	rjmp	.-2832   	; 0x1ac <LCD_DisplayString>
		//-----------------------------
		case display32:
		LCD_ClearScreen();
     cbc:	75 da       	rcall	.-2838   	; 0x1a8 <LCD_ClearScreen>
		LCD_Cursor(1);
     cbe:	81 e0       	ldi	r24, 0x01	; 1
     cc0:	6d da       	rcall	.-2854   	; 0x19c <LCD_Cursor>
		LCD_DisplayString(1, key_press2);
     cc2:	60 91 12 01 	lds	r22, 0x0112
     cc6:	70 91 13 01 	lds	r23, 0x0113
     cca:	81 e0       	ldi	r24, 0x01	; 1
		break;
     ccc:	6f ca       	rjmp	.-2850   	; 0x1ac <LCD_DisplayString>
		//-----------------------------
		case display33:
		LCD_ClearScreen();
     cce:	6c da       	rcall	.-2856   	; 0x1a8 <LCD_ClearScreen>
		LCD_Cursor(1);
     cd0:	81 e0       	ldi	r24, 0x01	; 1
     cd2:	64 da       	rcall	.-2872   	; 0x19c <LCD_Cursor>
		LCD_DisplayString(1, key_press3);
     cd4:	60 91 10 01 	lds	r22, 0x0110
     cd8:	70 91 11 01 	lds	r23, 0x0111
     cdc:	81 e0       	ldi	r24, 0x01	; 1
		break;
     cde:	66 ca       	rjmp	.-2868   	; 0x1ac <LCD_DisplayString>
		//-----------------------------
		case display34:
		LCD_ClearScreen();
     ce0:	63 da       	rcall	.-2874   	; 0x1a8 <LCD_ClearScreen>
		LCD_Cursor(1);
     ce2:	81 e0       	ldi	r24, 0x01	; 1
     ce4:	5b da       	rcall	.-2890   	; 0x19c <LCD_Cursor>
		LCD_DisplayString(1, key_press4);
     ce6:	60 91 0e 01 	lds	r22, 0x010E
     cea:	70 91 0f 01 	lds	r23, 0x010F
     cee:	81 e0       	ldi	r24, 0x01	; 1
		break;
     cf0:	5d ca       	rjmp	.-2886   	; 0x1ac <LCD_DisplayString>
		//-----------------------------
		case display35:
		LCD_ClearScreen();
     cf2:	5a da       	rcall	.-2892   	; 0x1a8 <LCD_ClearScreen>
		LCD_Cursor(1);
     cf4:	81 e0       	ldi	r24, 0x01	; 1
     cf6:	52 da       	rcall	.-2908   	; 0x19c <LCD_Cursor>
		LCD_DisplayString(1, key_press5);
     cf8:	60 91 0c 01 	lds	r22, 0x010C
     cfc:	70 91 0d 01 	lds	r23, 0x010D
     d00:	81 e0       	ldi	r24, 0x01	; 1
		break;
     d02:	54 ca       	rjmp	.-2904   	; 0x1ac <LCD_DisplayString>
		//-----------------------------
		case wrong3:
		TimerSet(1000);
     d04:	68 ee       	ldi	r22, 0xE8	; 232
     d06:	73 e0       	ldi	r23, 0x03	; 3
     d08:	80 e0       	ldi	r24, 0x00	; 0
     d0a:	90 e0       	ldi	r25, 0x00	; 0
     d0c:	74 da       	rcall	.-2840   	; 0x1f6 <TimerSet>
		eeprom_write_byte((uint8_t*)46, final_highscore);
     d0e:	60 91 3c 02 	lds	r22, 0x023C
     d12:	8e e2       	ldi	r24, 0x2E	; 46
     d14:	90 e0       	ldi	r25, 0x00	; 0
     d16:	6f d5       	rcall	.+2782   	; 0x17f6 <__eewr_byte_m1284>
		LCD_ClearScreen();
     d18:	47 da       	rcall	.-2930   	; 0x1a8 <LCD_ClearScreen>
		LCD_Cursor(1);
     d1a:	81 e0       	ldi	r24, 0x01	; 1
     d1c:	3f da       	rcall	.-2946   	; 0x19c <LCD_Cursor>
		LCD_DisplayString(1, wrong_string);
     d1e:	60 91 18 01 	lds	r22, 0x0118
     d22:	70 91 19 01 	lds	r23, 0x0119
     d26:	81 e0       	ldi	r24, 0x01	; 1
     d28:	41 da       	rcall	.-2942   	; 0x1ac <LCD_DisplayString>
		LCD_WriteData(0);
     d2a:	80 e0       	ldi	r24, 0x00	; 0
		break;
     d2c:	27 ca       	rjmp	.-2994   	; 0x17c <LCD_WriteData>
		//-----------------------------
		case win3:
		TimerSet(1000);
     d2e:	68 ee       	ldi	r22, 0xE8	; 232
     d30:	73 e0       	ldi	r23, 0x03	; 3
     d32:	80 e0       	ldi	r24, 0x00	; 0
     d34:	90 e0       	ldi	r25, 0x00	; 0
     d36:	5f da       	rcall	.-2882   	; 0x1f6 <TimerSet>
		eeprom_write_byte((uint8_t*)46, final_highscore);
     d38:	60 91 3c 02 	lds	r22, 0x023C
     d3c:	8e e2       	ldi	r24, 0x2E	; 46
     d3e:	90 e0       	ldi	r25, 0x00	; 0
     d40:	5a d5       	rcall	.+2740   	; 0x17f6 <__eewr_byte_m1284>
		LCD_ClearScreen();
     d42:	32 da       	rcall	.-2972   	; 0x1a8 <LCD_ClearScreen>
		LCD_Cursor(1);
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	2a da       	rcall	.-2988   	; 0x19c <LCD_Cursor>
		LCD_DisplayString(1, win_string);
     d48:	60 91 1a 01 	lds	r22, 0x011A
     d4c:	70 91 1b 01 	lds	r23, 0x011B
     d50:	81 e0       	ldi	r24, 0x01	; 1
     d52:	2c da       	rcall	.-2984   	; 0x1ac <LCD_DisplayString>
		LCD_WriteData(0);
     d54:	80 e0       	ldi	r24, 0x00	; 0
     d56:	12 ca       	rjmp	.-3036   	; 0x17c <LCD_WriteData>
     d58:	08 95       	ret

00000d5a <level4_tick>:
}

enum level4s {l4_init, blink41, blink42, blink43, blink44, blink45, blink46, blink47, display41, display42, display43, display44, display45, display46, display47, wrong4, win4} level4;
void level4_tick()
{
	b0 = ~PINA & 0x04;
     d5a:	30 b1       	in	r19, 0x00	; 0
     d5c:	30 95       	com	r19
     d5e:	34 70       	andi	r19, 0x04	; 4
     d60:	30 93 2a 02 	sts	0x022A, r19
	b1 = ~PINA & 0x08;
     d64:	90 b1       	in	r25, 0x00	; 0
     d66:	90 95       	com	r25
     d68:	98 70       	andi	r25, 0x08	; 8
     d6a:	90 93 29 02 	sts	0x0229, r25
	b2 = ~PINA & 0x10;
     d6e:	20 b1       	in	r18, 0x00	; 0
     d70:	20 95       	com	r18
     d72:	20 71       	andi	r18, 0x10	; 16
     d74:	20 93 28 02 	sts	0x0228, r18
	b3 = ~PINA & 0x20;
     d78:	80 b1       	in	r24, 0x00	; 0
     d7a:	80 95       	com	r24
     d7c:	80 72       	andi	r24, 0x20	; 32
     d7e:	80 93 27 02 	sts	0x0227, r24
	b4 = ~PINA & 0x40;
     d82:	50 b1       	in	r21, 0x00	; 0
     d84:	50 95       	com	r21
     d86:	50 74       	andi	r21, 0x40	; 64
     d88:	50 93 26 02 	sts	0x0226, r21
	switch (level4)
     d8c:	40 91 3a 02 	lds	r20, 0x023A
     d90:	e4 2f       	mov	r30, r20
     d92:	f0 e0       	ldi	r31, 0x00	; 0
     d94:	e1 31       	cpi	r30, 0x11	; 17
     d96:	f1 05       	cpc	r31, r1
     d98:	08 f0       	brcs	.+2      	; 0xd9c <level4_tick+0x42>
     d9a:	54 c1       	rjmp	.+680    	; 0x1044 <level4_tick+0x2ea>
     d9c:	ea 5b       	subi	r30, 0xBA	; 186
     d9e:	ff 4f       	sbci	r31, 0xFF	; 255
     da0:	1c c5       	rjmp	.+2616   	; 0x17da <__tablejump2__>
	{
		case l4_init:
		end_l1 = 1;
     da2:	81 e0       	ldi	r24, 0x01	; 1
     da4:	80 93 2b 02 	sts	0x022B, r24
		if (!start_l4)
     da8:	80 91 2d 02 	lds	r24, 0x022D
     dac:	81 11       	cpse	r24, r1
     dae:	03 c0       	rjmp	.+6      	; 0xdb6 <level4_tick+0x5c>
		{
			level4 = l4_init;
     db0:	10 92 3a 02 	sts	0x023A, r1
     db4:	50 c1       	rjmp	.+672    	; 0x1056 <level4_tick+0x2fc>
		}
		else if (start_l4)
		{
			highscore_total = 0;
     db6:	10 92 31 02 	sts	0x0231, r1
			level4 = blink41;
     dba:	81 e0       	ldi	r24, 0x01	; 1
     dbc:	80 93 3a 02 	sts	0x023A, r24
     dc0:	4f c1       	rjmp	.+670    	; 0x1060 <level4_tick+0x306>
			end_l1 = 1;
		}
		break;
		//-----------------------------
		case blink41:
		level4 = blink32;
     dc2:	82 e0       	ldi	r24, 0x02	; 2
     dc4:	80 93 3a 02 	sts	0x023A, r24
     dc8:	5f c1       	rjmp	.+702    	; 0x1088 <level4_tick+0x32e>
		break;
		//-----------------------------
		case blink42:
		level4 = blink43;
     dca:	83 e0       	ldi	r24, 0x03	; 3
     dcc:	80 93 3a 02 	sts	0x023A, r24
     dd0:	6a c1       	rjmp	.+724    	; 0x10a6 <level4_tick+0x34c>
		break;
		//-----------------------------
		case blink43:
		level4 = blink44;
     dd2:	84 e0       	ldi	r24, 0x04	; 4
     dd4:	80 93 3a 02 	sts	0x023A, r24
     dd8:	74 c1       	rjmp	.+744    	; 0x10c2 <level4_tick+0x368>
		break;
		//-----------------------------
		case blink44:
		level4 = blink45;
     dda:	85 e0       	ldi	r24, 0x05	; 5
     ddc:	80 93 3a 02 	sts	0x023A, r24
     de0:	7f c1       	rjmp	.+766    	; 0x10e0 <level4_tick+0x386>
		break;
		//-----------------------------
		case blink45:
		level4 = blink46;
     de2:	86 e0       	ldi	r24, 0x06	; 6
     de4:	80 93 3a 02 	sts	0x023A, r24
     de8:	8a c1       	rjmp	.+788    	; 0x10fe <level4_tick+0x3a4>
		break;
		//-----------------------------
		case blink46:
		level4 = blink47;
     dea:	87 e0       	ldi	r24, 0x07	; 7
     dec:	80 93 3a 02 	sts	0x023A, r24
     df0:	95 c1       	rjmp	.+810    	; 0x111c <level4_tick+0x3c2>
		break;
		//-----------------------------
		case blink47:
		level4 = display41;
     df2:	88 e0       	ldi	r24, 0x08	; 8
     df4:	80 93 3a 02 	sts	0x023A, r24
		break;
     df8:	9f c1       	rjmp	.+830    	; 0x1138 <level4_tick+0x3de>
		//-----------------------------
		case display41:
		if (b3)
     dfa:	88 23       	and	r24, r24
     dfc:	79 f0       	breq	.+30     	; 0xe1c <level4_tick+0xc2>
		{
			highscore_total++;
     dfe:	80 91 31 02 	lds	r24, 0x0231
     e02:	8f 5f       	subi	r24, 0xFF	; 255
     e04:	80 93 31 02 	sts	0x0231, r24
			if (highscore_total >= final_highscore)
     e08:	90 91 3c 02 	lds	r25, 0x023C
     e0c:	89 17       	cp	r24, r25
     e0e:	10 f0       	brcs	.+4      	; 0xe14 <level4_tick+0xba>
			{
				final_highscore = highscore_total;
     e10:	80 93 3c 02 	sts	0x023C, r24
			}
			level4 = display42;
     e14:	89 e0       	ldi	r24, 0x09	; 9
     e16:	80 93 3a 02 	sts	0x023A, r24
     e1a:	a1 c1       	rjmp	.+834    	; 0x115e <level4_tick+0x404>
		}
		else if (b1 || b2 || b0)
     e1c:	91 11       	cpse	r25, r1
     e1e:	04 c0       	rjmp	.+8      	; 0xe28 <level4_tick+0xce>
     e20:	21 11       	cpse	r18, r1
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <level4_tick+0xce>
     e24:	33 23       	and	r19, r19
     e26:	61 f0       	breq	.+24     	; 0xe40 <level4_tick+0xe6>
		{
			if (highscore_total >= final_highscore)
     e28:	80 91 31 02 	lds	r24, 0x0231
     e2c:	90 91 3c 02 	lds	r25, 0x023C
     e30:	89 17       	cp	r24, r25
     e32:	10 f0       	brcs	.+4      	; 0xe38 <level4_tick+0xde>
			{
				final_highscore = highscore_total;
     e34:	80 93 3c 02 	sts	0x023C, r24
			}
			level4 = wrong4;
     e38:	8f e0       	ldi	r24, 0x0F	; 15
     e3a:	80 93 3a 02 	sts	0x023A, r24
     e3e:	ca c1       	rjmp	.+916    	; 0x11d4 <level4_tick+0x47a>
		}
		else if (b4)
     e40:	55 23       	and	r21, r21
     e42:	09 f4       	brne	.+2      	; 0xe46 <level4_tick+0xec>
     e44:	79 c1       	rjmp	.+754    	; 0x1138 <level4_tick+0x3de>
		{
			level4 = l4_init;
     e46:	10 92 3a 02 	sts	0x023A, r1
     e4a:	05 c1       	rjmp	.+522    	; 0x1056 <level4_tick+0x2fc>
		}
		break;
		//-----------------------------
		case display42:
		if (b2)
     e4c:	22 23       	and	r18, r18
     e4e:	79 f0       	breq	.+30     	; 0xe6e <level4_tick+0x114>
		{
			highscore_total++;
     e50:	80 91 31 02 	lds	r24, 0x0231
     e54:	8f 5f       	subi	r24, 0xFF	; 255
     e56:	80 93 31 02 	sts	0x0231, r24
			if (highscore_total >= final_highscore)
     e5a:	90 91 3c 02 	lds	r25, 0x023C
     e5e:	89 17       	cp	r24, r25
     e60:	10 f0       	brcs	.+4      	; 0xe66 <level4_tick+0x10c>
			{
				final_highscore = highscore_total;
     e62:	80 93 3c 02 	sts	0x023C, r24
			}
			level4 = display43;
     e66:	8a e0       	ldi	r24, 0x0A	; 10
     e68:	80 93 3a 02 	sts	0x023A, r24
     e6c:	81 c1       	rjmp	.+770    	; 0x1170 <level4_tick+0x416>
		}
		else if (b3 || b1 || b0)
     e6e:	81 11       	cpse	r24, r1
     e70:	04 c0       	rjmp	.+8      	; 0xe7a <level4_tick+0x120>
     e72:	91 11       	cpse	r25, r1
     e74:	02 c0       	rjmp	.+4      	; 0xe7a <level4_tick+0x120>
     e76:	33 23       	and	r19, r19
     e78:	61 f0       	breq	.+24     	; 0xe92 <level4_tick+0x138>
		{
			if (highscore_total >= final_highscore)
     e7a:	80 91 31 02 	lds	r24, 0x0231
     e7e:	90 91 3c 02 	lds	r25, 0x023C
     e82:	89 17       	cp	r24, r25
     e84:	10 f0       	brcs	.+4      	; 0xe8a <level4_tick+0x130>
			{
				final_highscore = highscore_total;
     e86:	80 93 3c 02 	sts	0x023C, r24
			}
			level4 = wrong4;
     e8a:	8f e0       	ldi	r24, 0x0F	; 15
     e8c:	80 93 3a 02 	sts	0x023A, r24
     e90:	a1 c1       	rjmp	.+834    	; 0x11d4 <level4_tick+0x47a>
		}
		else if (b4)
     e92:	55 23       	and	r21, r21
     e94:	09 f4       	brne	.+2      	; 0xe98 <level4_tick+0x13e>
     e96:	63 c1       	rjmp	.+710    	; 0x115e <level4_tick+0x404>
		{
			level4 = l4_init;
     e98:	10 92 3a 02 	sts	0x023A, r1
     e9c:	dc c0       	rjmp	.+440    	; 0x1056 <level4_tick+0x2fc>
		}
		break;
		//-----------------------------
		case display43:
		if (b0)
     e9e:	33 23       	and	r19, r19
     ea0:	79 f0       	breq	.+30     	; 0xec0 <level4_tick+0x166>
		{
			highscore_total++;
     ea2:	80 91 31 02 	lds	r24, 0x0231
     ea6:	8f 5f       	subi	r24, 0xFF	; 255
     ea8:	80 93 31 02 	sts	0x0231, r24
			if (highscore_total >= final_highscore)
     eac:	90 91 3c 02 	lds	r25, 0x023C
     eb0:	89 17       	cp	r24, r25
     eb2:	10 f0       	brcs	.+4      	; 0xeb8 <level4_tick+0x15e>
			{
				final_highscore = highscore_total;
     eb4:	80 93 3c 02 	sts	0x023C, r24
			}
			level4 = display44;
     eb8:	8b e0       	ldi	r24, 0x0B	; 11
     eba:	80 93 3a 02 	sts	0x023A, r24
     ebe:	61 c1       	rjmp	.+706    	; 0x1182 <level4_tick+0x428>
		}
		else if (b3 || b2 || b1)
     ec0:	81 11       	cpse	r24, r1
     ec2:	04 c0       	rjmp	.+8      	; 0xecc <level4_tick+0x172>
     ec4:	21 11       	cpse	r18, r1
     ec6:	02 c0       	rjmp	.+4      	; 0xecc <level4_tick+0x172>
     ec8:	99 23       	and	r25, r25
     eca:	61 f0       	breq	.+24     	; 0xee4 <level4_tick+0x18a>
		{
			if (highscore_total >= final_highscore)
     ecc:	80 91 31 02 	lds	r24, 0x0231
     ed0:	90 91 3c 02 	lds	r25, 0x023C
     ed4:	89 17       	cp	r24, r25
     ed6:	10 f0       	brcs	.+4      	; 0xedc <level4_tick+0x182>
			{
				final_highscore = highscore_total;
     ed8:	80 93 3c 02 	sts	0x023C, r24
			}
			level4 = wrong4;
     edc:	8f e0       	ldi	r24, 0x0F	; 15
     ede:	80 93 3a 02 	sts	0x023A, r24
     ee2:	78 c1       	rjmp	.+752    	; 0x11d4 <level4_tick+0x47a>
		}
		else if (b4)
     ee4:	55 23       	and	r21, r21
     ee6:	09 f4       	brne	.+2      	; 0xeea <level4_tick+0x190>
     ee8:	43 c1       	rjmp	.+646    	; 0x1170 <level4_tick+0x416>
		{
			level4 = l4_init;
     eea:	10 92 3a 02 	sts	0x023A, r1
     eee:	b3 c0       	rjmp	.+358    	; 0x1056 <level4_tick+0x2fc>
		}
		break;
		//-----------------------------
		case display44:
		if (b3)
     ef0:	88 23       	and	r24, r24
     ef2:	79 f0       	breq	.+30     	; 0xf12 <level4_tick+0x1b8>
		{
			highscore_total++;
     ef4:	80 91 31 02 	lds	r24, 0x0231
     ef8:	8f 5f       	subi	r24, 0xFF	; 255
     efa:	80 93 31 02 	sts	0x0231, r24
			if (highscore_total >= final_highscore)
     efe:	90 91 3c 02 	lds	r25, 0x023C
     f02:	89 17       	cp	r24, r25
     f04:	10 f0       	brcs	.+4      	; 0xf0a <level4_tick+0x1b0>
			{
				final_highscore = highscore_total;
     f06:	80 93 3c 02 	sts	0x023C, r24
			}
			level4 = display45;
     f0a:	8c e0       	ldi	r24, 0x0C	; 12
     f0c:	80 93 3a 02 	sts	0x023A, r24
     f10:	41 c1       	rjmp	.+642    	; 0x1194 <level4_tick+0x43a>
		}
		else if (b1 || b2 || b0)
     f12:	91 11       	cpse	r25, r1
     f14:	04 c0       	rjmp	.+8      	; 0xf1e <level4_tick+0x1c4>
     f16:	21 11       	cpse	r18, r1
     f18:	02 c0       	rjmp	.+4      	; 0xf1e <level4_tick+0x1c4>
     f1a:	33 23       	and	r19, r19
     f1c:	61 f0       	breq	.+24     	; 0xf36 <level4_tick+0x1dc>
		{
			if (highscore_total >= final_highscore)
     f1e:	80 91 31 02 	lds	r24, 0x0231
     f22:	90 91 3c 02 	lds	r25, 0x023C
     f26:	89 17       	cp	r24, r25
     f28:	10 f0       	brcs	.+4      	; 0xf2e <level4_tick+0x1d4>
			{
				final_highscore = highscore_total;
     f2a:	80 93 3c 02 	sts	0x023C, r24
			}
			level4 = wrong4;
     f2e:	8f e0       	ldi	r24, 0x0F	; 15
     f30:	80 93 3a 02 	sts	0x023A, r24
     f34:	4f c1       	rjmp	.+670    	; 0x11d4 <level4_tick+0x47a>
		}
		else if (b4)
     f36:	55 23       	and	r21, r21
     f38:	09 f4       	brne	.+2      	; 0xf3c <level4_tick+0x1e2>
     f3a:	23 c1       	rjmp	.+582    	; 0x1182 <level4_tick+0x428>
		{
			level4 = l4_init;
     f3c:	10 92 3a 02 	sts	0x023A, r1
     f40:	8a c0       	rjmp	.+276    	; 0x1056 <level4_tick+0x2fc>
		}
		break;
		//-----------------------------
		case display45:
		if (b1)
     f42:	99 23       	and	r25, r25
     f44:	79 f0       	breq	.+30     	; 0xf64 <level4_tick+0x20a>
		{
			highscore_total++;
     f46:	80 91 31 02 	lds	r24, 0x0231
     f4a:	8f 5f       	subi	r24, 0xFF	; 255
     f4c:	80 93 31 02 	sts	0x0231, r24
			if (highscore_total >= final_highscore)
     f50:	90 91 3c 02 	lds	r25, 0x023C
     f54:	89 17       	cp	r24, r25
     f56:	10 f0       	brcs	.+4      	; 0xf5c <level4_tick+0x202>
			{
				final_highscore = highscore_total;
     f58:	80 93 3c 02 	sts	0x023C, r24
			}
			level4 = display46;
     f5c:	8d e0       	ldi	r24, 0x0D	; 13
     f5e:	80 93 3a 02 	sts	0x023A, r24
     f62:	21 c1       	rjmp	.+578    	; 0x11a6 <level4_tick+0x44c>
		}
		else if (b3 || b2 || b0)
     f64:	81 11       	cpse	r24, r1
     f66:	04 c0       	rjmp	.+8      	; 0xf70 <level4_tick+0x216>
     f68:	21 11       	cpse	r18, r1
     f6a:	02 c0       	rjmp	.+4      	; 0xf70 <level4_tick+0x216>
     f6c:	33 23       	and	r19, r19
     f6e:	61 f0       	breq	.+24     	; 0xf88 <level4_tick+0x22e>
		{
			if (highscore_total >= final_highscore)
     f70:	80 91 31 02 	lds	r24, 0x0231
     f74:	90 91 3c 02 	lds	r25, 0x023C
     f78:	89 17       	cp	r24, r25
     f7a:	10 f0       	brcs	.+4      	; 0xf80 <level4_tick+0x226>
			{
				final_highscore = highscore_total;
     f7c:	80 93 3c 02 	sts	0x023C, r24
			}
			level4 = wrong4;
     f80:	8f e0       	ldi	r24, 0x0F	; 15
     f82:	80 93 3a 02 	sts	0x023A, r24
     f86:	26 c1       	rjmp	.+588    	; 0x11d4 <level4_tick+0x47a>
		}
		else if (b4)
     f88:	55 23       	and	r21, r21
     f8a:	09 f4       	brne	.+2      	; 0xf8e <level4_tick+0x234>
     f8c:	03 c1       	rjmp	.+518    	; 0x1194 <level4_tick+0x43a>
		{
			level4 = l4_init;
     f8e:	10 92 3a 02 	sts	0x023A, r1
     f92:	61 c0       	rjmp	.+194    	; 0x1056 <level4_tick+0x2fc>
		}
		break;
		//-----------------------------
		case display46:
		if (b2)
     f94:	22 23       	and	r18, r18
     f96:	79 f0       	breq	.+30     	; 0xfb6 <level4_tick+0x25c>
		{
			highscore_total++;
     f98:	80 91 31 02 	lds	r24, 0x0231
     f9c:	8f 5f       	subi	r24, 0xFF	; 255
     f9e:	80 93 31 02 	sts	0x0231, r24
			if (highscore_total >= final_highscore)
     fa2:	90 91 3c 02 	lds	r25, 0x023C
     fa6:	89 17       	cp	r24, r25
     fa8:	10 f0       	brcs	.+4      	; 0xfae <level4_tick+0x254>
			{
				final_highscore = highscore_total;
     faa:	80 93 3c 02 	sts	0x023C, r24
			}
			level4 = display47;
     fae:	8e e0       	ldi	r24, 0x0E	; 14
     fb0:	80 93 3a 02 	sts	0x023A, r24
     fb4:	03 c1       	rjmp	.+518    	; 0x11bc <level4_tick+0x462>
		}
		else if (b1 || b3 || b0)
     fb6:	91 11       	cpse	r25, r1
     fb8:	04 c0       	rjmp	.+8      	; 0xfc2 <level4_tick+0x268>
     fba:	81 11       	cpse	r24, r1
     fbc:	02 c0       	rjmp	.+4      	; 0xfc2 <level4_tick+0x268>
     fbe:	33 23       	and	r19, r19
     fc0:	61 f0       	breq	.+24     	; 0xfda <level4_tick+0x280>
		{
			if (highscore_total >= final_highscore)
     fc2:	80 91 31 02 	lds	r24, 0x0231
     fc6:	90 91 3c 02 	lds	r25, 0x023C
     fca:	89 17       	cp	r24, r25
     fcc:	10 f0       	brcs	.+4      	; 0xfd2 <level4_tick+0x278>
			{
				final_highscore = highscore_total;
     fce:	80 93 3c 02 	sts	0x023C, r24
			}
			level4 = wrong4;
     fd2:	8f e0       	ldi	r24, 0x0F	; 15
     fd4:	80 93 3a 02 	sts	0x023A, r24
     fd8:	fd c0       	rjmp	.+506    	; 0x11d4 <level4_tick+0x47a>
		}
		else if (b4)
     fda:	55 23       	and	r21, r21
     fdc:	09 f4       	brne	.+2      	; 0xfe0 <level4_tick+0x286>
     fde:	e3 c0       	rjmp	.+454    	; 0x11a6 <level4_tick+0x44c>
		{
			level4 = l4_init;
     fe0:	10 92 3a 02 	sts	0x023A, r1
     fe4:	38 c0       	rjmp	.+112    	; 0x1056 <level4_tick+0x2fc>
		}
		break;
		//-----------------------------
		case display47:
		if (b0)
     fe6:	33 23       	and	r19, r19
     fe8:	79 f0       	breq	.+30     	; 0x1008 <level4_tick+0x2ae>
		{
			highscore_total++;
     fea:	80 91 31 02 	lds	r24, 0x0231
     fee:	8f 5f       	subi	r24, 0xFF	; 255
     ff0:	80 93 31 02 	sts	0x0231, r24
			if (highscore_total >= final_highscore)
     ff4:	90 91 3c 02 	lds	r25, 0x023C
     ff8:	89 17       	cp	r24, r25
     ffa:	10 f0       	brcs	.+4      	; 0x1000 <level4_tick+0x2a6>
			{
				final_highscore = highscore_total;
     ffc:	80 93 3c 02 	sts	0x023C, r24
			}
			level4 = win4;
    1000:	80 e1       	ldi	r24, 0x10	; 16
    1002:	80 93 3a 02 	sts	0x023A, r24
    1006:	ff c0       	rjmp	.+510    	; 0x1206 <level4_tick+0x4ac>
		}
		else if (b1 || b2 || b3)
    1008:	91 11       	cpse	r25, r1
    100a:	04 c0       	rjmp	.+8      	; 0x1014 <level4_tick+0x2ba>
    100c:	21 11       	cpse	r18, r1
    100e:	02 c0       	rjmp	.+4      	; 0x1014 <level4_tick+0x2ba>
    1010:	88 23       	and	r24, r24
    1012:	61 f0       	breq	.+24     	; 0x102c <level4_tick+0x2d2>
		{
			if (highscore_total >= final_highscore)
    1014:	80 91 31 02 	lds	r24, 0x0231
    1018:	90 91 3c 02 	lds	r25, 0x023C
    101c:	89 17       	cp	r24, r25
    101e:	10 f0       	brcs	.+4      	; 0x1024 <level4_tick+0x2ca>
			{
				final_highscore = highscore_total;
    1020:	80 93 3c 02 	sts	0x023C, r24
			}
			level4 = wrong4;
    1024:	8f e0       	ldi	r24, 0x0F	; 15
    1026:	80 93 3a 02 	sts	0x023A, r24
    102a:	d4 c0       	rjmp	.+424    	; 0x11d4 <level4_tick+0x47a>
		}
		else if (b4)
    102c:	55 23       	and	r21, r21
    102e:	09 f4       	brne	.+2      	; 0x1032 <level4_tick+0x2d8>
    1030:	c5 c0       	rjmp	.+394    	; 0x11bc <level4_tick+0x462>
		{
			level4 = l4_init;
    1032:	10 92 3a 02 	sts	0x023A, r1
    1036:	0f c0       	rjmp	.+30     	; 0x1056 <level4_tick+0x2fc>
		}
		break;
		//-----------------------------
		case wrong4:
		level4 = l4_init;
    1038:	10 92 3a 02 	sts	0x023A, r1
		break;
    103c:	0c c0       	rjmp	.+24     	; 0x1056 <level4_tick+0x2fc>
		//-----------------------------
		case win4:
		level4 = l4_init;
    103e:	10 92 3a 02 	sts	0x023A, r1
		break;
    1042:	09 c0       	rjmp	.+18     	; 0x1056 <level4_tick+0x2fc>
	}
	
	switch(level4)
    1044:	e4 2f       	mov	r30, r20
    1046:	f0 e0       	ldi	r31, 0x00	; 0
    1048:	e1 31       	cpi	r30, 0x11	; 17
    104a:	f1 05       	cpc	r31, r1
    104c:	08 f0       	brcs	.+2      	; 0x1050 <level4_tick+0x2f6>
    104e:	f5 c0       	rjmp	.+490    	; 0x123a <level4_tick+0x4e0>
    1050:	e9 5a       	subi	r30, 0xA9	; 169
    1052:	ff 4f       	sbci	r31, 0xFF	; 255
    1054:	c2 c3       	rjmp	.+1924   	; 0x17da <__tablejump2__>
	{
		case l4_init:
		start_l4 = 0;
    1056:	10 92 2d 02 	sts	0x022D, r1
		end_l1 = 0;
    105a:	10 92 2b 02 	sts	0x022B, r1
		break;
    105e:	08 95       	ret
		//-----------------------------
		case blink41:
		TimerSet(500);
    1060:	64 ef       	ldi	r22, 0xF4	; 244
    1062:	71 e0       	ldi	r23, 0x01	; 1
    1064:	80 e0       	ldi	r24, 0x00	; 0
    1066:	90 e0       	ldi	r25, 0x00	; 0
    1068:	c6 d8       	rcall	.-3700   	; 0x1f6 <TimerSet>
		//BOTTOM RIGHT
		DDRB = 0x0F; PORTB = 0xF0;
    106a:	8f e0       	ldi	r24, 0x0F	; 15
    106c:	84 b9       	out	0x04, r24	; 4
    106e:	80 ef       	ldi	r24, 0xF0	; 240
    1070:	85 b9       	out	0x05, r24	; 5
		DDRC = 0xFF; PORTC = 0xF0;
    1072:	9f ef       	ldi	r25, 0xFF	; 255
    1074:	97 b9       	out	0x07, r25	; 7
    1076:	88 b9       	out	0x08, r24	; 8
		//LCD_ClearScreen();
		LCD_Cursor(1);
    1078:	81 e0       	ldi	r24, 0x01	; 1
    107a:	90 d8       	rcall	.-3808   	; 0x19c <LCD_Cursor>
		LCD_DisplayString(1, start_string);
    107c:	60 91 1c 01 	lds	r22, 0x011C
    1080:	70 91 1d 01 	lds	r23, 0x011D
    1084:	81 e0       	ldi	r24, 0x01	; 1
		break;
    1086:	92 c8       	rjmp	.-3804   	; 0x1ac <LCD_DisplayString>
		//-----------------------------
		case blink42:
		//TOP RIGHT
		DDRB = 0xFF; PORTB = 0x0F;
    1088:	8f ef       	ldi	r24, 0xFF	; 255
    108a:	84 b9       	out	0x04, r24	; 4
    108c:	9f e0       	ldi	r25, 0x0F	; 15
    108e:	95 b9       	out	0x05, r25	; 5
		DDRC = 0xFF; PORTC = 0xF0;
    1090:	87 b9       	out	0x07, r24	; 7
    1092:	80 ef       	ldi	r24, 0xF0	; 240
    1094:	88 b9       	out	0x08, r24	; 8
		//LCD_ClearScreen();
		LCD_Cursor(1);
    1096:	81 e0       	ldi	r24, 0x01	; 1
    1098:	81 d8       	rcall	.-3838   	; 0x19c <LCD_Cursor>
		LCD_DisplayString(1, start_string);
    109a:	60 91 1c 01 	lds	r22, 0x011C
    109e:	70 91 1d 01 	lds	r23, 0x011D
    10a2:	81 e0       	ldi	r24, 0x01	; 1
		break;
    10a4:	83 c8       	rjmp	.-3834   	; 0x1ac <LCD_DisplayString>
		//-----------------------------
		case blink43:
		//TOP LEFT
		DDRB = 0xFF; PORTB = 0x0F;
    10a6:	9f ef       	ldi	r25, 0xFF	; 255
    10a8:	94 b9       	out	0x04, r25	; 4
    10aa:	8f e0       	ldi	r24, 0x0F	; 15
    10ac:	85 b9       	out	0x05, r24	; 5
		DDRC = 0xFF; PORTC = 0x0F;
    10ae:	97 b9       	out	0x07, r25	; 7
    10b0:	88 b9       	out	0x08, r24	; 8
		//LCD_ClearScreen();
		LCD_Cursor(1);
    10b2:	81 e0       	ldi	r24, 0x01	; 1
    10b4:	73 d8       	rcall	.-3866   	; 0x19c <LCD_Cursor>
		LCD_DisplayString(1, start_string);
    10b6:	60 91 1c 01 	lds	r22, 0x011C
    10ba:	70 91 1d 01 	lds	r23, 0x011D
    10be:	81 e0       	ldi	r24, 0x01	; 1
		break;
    10c0:	75 c8       	rjmp	.-3862   	; 0x1ac <LCD_DisplayString>
		//-----------------------------
		case blink44:
		//BOTTOM RIGHT
		DDRB = 0x0F; PORTB = 0xF0;
    10c2:	8f e0       	ldi	r24, 0x0F	; 15
    10c4:	84 b9       	out	0x04, r24	; 4
    10c6:	80 ef       	ldi	r24, 0xF0	; 240
    10c8:	85 b9       	out	0x05, r24	; 5
		DDRC = 0xFF; PORTC = 0xF0;
    10ca:	9f ef       	ldi	r25, 0xFF	; 255
    10cc:	97 b9       	out	0x07, r25	; 7
    10ce:	88 b9       	out	0x08, r24	; 8
		//LCD_ClearScreen();
		LCD_Cursor(1);
    10d0:	81 e0       	ldi	r24, 0x01	; 1
    10d2:	64 d8       	rcall	.-3896   	; 0x19c <LCD_Cursor>
		LCD_DisplayString(1, start_string);
    10d4:	60 91 1c 01 	lds	r22, 0x011C
    10d8:	70 91 1d 01 	lds	r23, 0x011D
    10dc:	81 e0       	ldi	r24, 0x01	; 1
		break;
    10de:	66 c8       	rjmp	.-3892   	; 0x1ac <LCD_DisplayString>
		//-----------------------------
		case blink45:
		//BOTTOM LEFT
		DDRB = 0x0F; PORTB = 0xF0;
    10e0:	8f e0       	ldi	r24, 0x0F	; 15
    10e2:	84 b9       	out	0x04, r24	; 4
    10e4:	90 ef       	ldi	r25, 0xF0	; 240
    10e6:	95 b9       	out	0x05, r25	; 5
		DDRC = 0xFF; PORTC = 0x0F;
    10e8:	9f ef       	ldi	r25, 0xFF	; 255
    10ea:	97 b9       	out	0x07, r25	; 7
    10ec:	88 b9       	out	0x08, r24	; 8
		//LCD_ClearScreen();
		LCD_Cursor(1);
    10ee:	81 e0       	ldi	r24, 0x01	; 1
    10f0:	55 d8       	rcall	.-3926   	; 0x19c <LCD_Cursor>
		LCD_DisplayString(1, start_string);
    10f2:	60 91 1c 01 	lds	r22, 0x011C
    10f6:	70 91 1d 01 	lds	r23, 0x011D
    10fa:	81 e0       	ldi	r24, 0x01	; 1
		break;
    10fc:	57 c8       	rjmp	.-3922   	; 0x1ac <LCD_DisplayString>
		//-----------------------------
		case blink46:
		//TOP RIGHT
		DDRB = 0xFF; PORTB = 0x0F;
    10fe:	8f ef       	ldi	r24, 0xFF	; 255
    1100:	84 b9       	out	0x04, r24	; 4
    1102:	9f e0       	ldi	r25, 0x0F	; 15
    1104:	95 b9       	out	0x05, r25	; 5
		DDRC = 0xFF; PORTC = 0xF0;
    1106:	87 b9       	out	0x07, r24	; 7
    1108:	80 ef       	ldi	r24, 0xF0	; 240
    110a:	88 b9       	out	0x08, r24	; 8
		//LCD_ClearScreen();
		LCD_Cursor(1);
    110c:	81 e0       	ldi	r24, 0x01	; 1
    110e:	46 d8       	rcall	.-3956   	; 0x19c <LCD_Cursor>
		LCD_DisplayString(1, start_string);
    1110:	60 91 1c 01 	lds	r22, 0x011C
    1114:	70 91 1d 01 	lds	r23, 0x011D
    1118:	81 e0       	ldi	r24, 0x01	; 1
		break;
    111a:	48 c8       	rjmp	.-3952   	; 0x1ac <LCD_DisplayString>
		//-----------------------------
		case blink47:
		//TOP LEFT
		DDRB = 0xFF; PORTB = 0x0F;
    111c:	9f ef       	ldi	r25, 0xFF	; 255
    111e:	94 b9       	out	0x04, r25	; 4
    1120:	8f e0       	ldi	r24, 0x0F	; 15
    1122:	85 b9       	out	0x05, r24	; 5
		DDRC = 0xFF; PORTC = 0x0F;
    1124:	97 b9       	out	0x07, r25	; 7
    1126:	88 b9       	out	0x08, r24	; 8
		//LCD_ClearScreen();
		LCD_Cursor(1);
    1128:	81 e0       	ldi	r24, 0x01	; 1
    112a:	38 d8       	rcall	.-3984   	; 0x19c <LCD_Cursor>
		LCD_DisplayString(1, start_string);
    112c:	60 91 1c 01 	lds	r22, 0x011C
    1130:	70 91 1d 01 	lds	r23, 0x011D
    1134:	81 e0       	ldi	r24, 0x01	; 1
		break;
    1136:	3a c8       	rjmp	.-3980   	; 0x1ac <LCD_DisplayString>
		//-----------------------------
		case display41:
		TimerSet(300);
    1138:	6c e2       	ldi	r22, 0x2C	; 44
    113a:	71 e0       	ldi	r23, 0x01	; 1
    113c:	80 e0       	ldi	r24, 0x00	; 0
    113e:	90 e0       	ldi	r25, 0x00	; 0
    1140:	5a d8       	rcall	.-3916   	; 0x1f6 <TimerSet>
		//TURNS OFF SCREEN
		DDRB = 0xFF; PORTB = 0xFF;
    1142:	8f ef       	ldi	r24, 0xFF	; 255
    1144:	84 b9       	out	0x04, r24	; 4
    1146:	85 b9       	out	0x05, r24	; 5
		DDRC = 0xFF; PORTC = 0x00;
    1148:	87 b9       	out	0x07, r24	; 7
    114a:	18 b8       	out	0x08, r1	; 8
		LCD_ClearScreen();
    114c:	2d d8       	rcall	.-4006   	; 0x1a8 <LCD_ClearScreen>
		LCD_Cursor(1);
    114e:	81 e0       	ldi	r24, 0x01	; 1
    1150:	25 d8       	rcall	.-4022   	; 0x19c <LCD_Cursor>
		LCD_DisplayString(1, key_press1);
    1152:	60 91 14 01 	lds	r22, 0x0114
    1156:	70 91 15 01 	lds	r23, 0x0115
    115a:	81 e0       	ldi	r24, 0x01	; 1
		break;
    115c:	27 c8       	rjmp	.-4018   	; 0x1ac <LCD_DisplayString>
		//-----------------------------
		case display42:
		LCD_ClearScreen();
    115e:	24 d8       	rcall	.-4024   	; 0x1a8 <LCD_ClearScreen>
		LCD_Cursor(1);
    1160:	81 e0       	ldi	r24, 0x01	; 1
    1162:	1c d8       	rcall	.-4040   	; 0x19c <LCD_Cursor>
		LCD_DisplayString(1, key_press2);
    1164:	60 91 12 01 	lds	r22, 0x0112
    1168:	70 91 13 01 	lds	r23, 0x0113
    116c:	81 e0       	ldi	r24, 0x01	; 1
		break;
    116e:	1e c8       	rjmp	.-4036   	; 0x1ac <LCD_DisplayString>
		//-----------------------------
		case display43:
		LCD_ClearScreen();
    1170:	1b d8       	rcall	.-4042   	; 0x1a8 <LCD_ClearScreen>
		LCD_Cursor(1);
    1172:	81 e0       	ldi	r24, 0x01	; 1
    1174:	13 d8       	rcall	.-4058   	; 0x19c <LCD_Cursor>
		LCD_DisplayString(1, key_press3);
    1176:	60 91 10 01 	lds	r22, 0x0110
    117a:	70 91 11 01 	lds	r23, 0x0111
    117e:	81 e0       	ldi	r24, 0x01	; 1
		break;
    1180:	15 c8       	rjmp	.-4054   	; 0x1ac <LCD_DisplayString>
		//-----------------------------
		case display44:
		LCD_ClearScreen();
    1182:	12 d8       	rcall	.-4060   	; 0x1a8 <LCD_ClearScreen>
		LCD_Cursor(1);
    1184:	81 e0       	ldi	r24, 0x01	; 1
    1186:	0a d8       	rcall	.-4076   	; 0x19c <LCD_Cursor>
		LCD_DisplayString(1, key_press4);
    1188:	60 91 0e 01 	lds	r22, 0x010E
    118c:	70 91 0f 01 	lds	r23, 0x010F
    1190:	81 e0       	ldi	r24, 0x01	; 1
		break;
    1192:	0c c8       	rjmp	.-4072   	; 0x1ac <LCD_DisplayString>
		//-----------------------------
		case display45:
		LCD_ClearScreen();
    1194:	09 d8       	rcall	.-4078   	; 0x1a8 <LCD_ClearScreen>
		LCD_Cursor(1);
    1196:	81 e0       	ldi	r24, 0x01	; 1
    1198:	01 d8       	rcall	.-4094   	; 0x19c <LCD_Cursor>
		LCD_DisplayString(1, key_press5);
    119a:	60 91 0c 01 	lds	r22, 0x010C
    119e:	70 91 0d 01 	lds	r23, 0x010D
    11a2:	81 e0       	ldi	r24, 0x01	; 1
		break;
    11a4:	03 c8       	rjmp	.-4090   	; 0x1ac <LCD_DisplayString>
		//-----------------------------
		case display46:
		LCD_ClearScreen();
    11a6:	00 d8       	rcall	.-4096   	; 0x1a8 <LCD_ClearScreen>
		LCD_Cursor(1);
    11a8:	81 e0       	ldi	r24, 0x01	; 1
    11aa:	0e 94 ce 00 	call	0x19c	; 0x19c <LCD_Cursor>
		LCD_DisplayString(1, key_press6);
    11ae:	60 91 0a 01 	lds	r22, 0x010A
    11b2:	70 91 0b 01 	lds	r23, 0x010B
    11b6:	81 e0       	ldi	r24, 0x01	; 1
    11b8:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <LCD_DisplayString>
		break;
		//-----------------------------
		case display47:
		LCD_ClearScreen();
    11bc:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <LCD_ClearScreen>
		LCD_Cursor(1);
    11c0:	81 e0       	ldi	r24, 0x01	; 1
    11c2:	0e 94 ce 00 	call	0x19c	; 0x19c <LCD_Cursor>
		LCD_DisplayString(1, key_press7);
    11c6:	60 91 08 01 	lds	r22, 0x0108
    11ca:	70 91 09 01 	lds	r23, 0x0109
    11ce:	81 e0       	ldi	r24, 0x01	; 1
    11d0:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <LCD_DisplayString>
		break;
		//-----------------------------
		case wrong4:
		TimerSet(1000);
    11d4:	68 ee       	ldi	r22, 0xE8	; 232
    11d6:	73 e0       	ldi	r23, 0x03	; 3
    11d8:	80 e0       	ldi	r24, 0x00	; 0
    11da:	90 e0       	ldi	r25, 0x00	; 0
    11dc:	0c d8       	rcall	.-4072   	; 0x1f6 <TimerSet>
		eeprom_write_byte((uint8_t*)46, final_highscore);
    11de:	60 91 3c 02 	lds	r22, 0x023C
    11e2:	8e e2       	ldi	r24, 0x2E	; 46
    11e4:	90 e0       	ldi	r25, 0x00	; 0
    11e6:	07 d3       	rcall	.+1550   	; 0x17f6 <__eewr_byte_m1284>
		LCD_ClearScreen();
    11e8:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <LCD_ClearScreen>
		LCD_Cursor(1);
    11ec:	81 e0       	ldi	r24, 0x01	; 1
    11ee:	0e 94 ce 00 	call	0x19c	; 0x19c <LCD_Cursor>
		LCD_DisplayString(1, wrong_string);
    11f2:	60 91 18 01 	lds	r22, 0x0118
    11f6:	70 91 19 01 	lds	r23, 0x0119
    11fa:	81 e0       	ldi	r24, 0x01	; 1
    11fc:	0e 94 d6 00 	call	0x1ac	; 0x1ac <LCD_DisplayString>
		LCD_WriteData(0);
    1200:	80 e0       	ldi	r24, 0x00	; 0
    1202:	0c 94 be 00 	jmp	0x17c	; 0x17c <LCD_WriteData>
		break;
		//-----------------------------
		case win4:
		TimerSet(1000);
    1206:	68 ee       	ldi	r22, 0xE8	; 232
    1208:	73 e0       	ldi	r23, 0x03	; 3
    120a:	80 e0       	ldi	r24, 0x00	; 0
    120c:	90 e0       	ldi	r25, 0x00	; 0
    120e:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <TimerSet>
		eeprom_write_byte((uint8_t*)46, final_highscore);
    1212:	60 91 3c 02 	lds	r22, 0x023C
    1216:	8e e2       	ldi	r24, 0x2E	; 46
    1218:	90 e0       	ldi	r25, 0x00	; 0
    121a:	ed d2       	rcall	.+1498   	; 0x17f6 <__eewr_byte_m1284>
		LCD_ClearScreen();
    121c:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <LCD_ClearScreen>
		LCD_Cursor(1);
    1220:	81 e0       	ldi	r24, 0x01	; 1
    1222:	0e 94 ce 00 	call	0x19c	; 0x19c <LCD_Cursor>
		LCD_DisplayString(1, win_string);
    1226:	60 91 1a 01 	lds	r22, 0x011A
    122a:	70 91 1b 01 	lds	r23, 0x011B
    122e:	81 e0       	ldi	r24, 0x01	; 1
    1230:	0e 94 d6 00 	call	0x1ac	; 0x1ac <LCD_DisplayString>
		LCD_WriteData(0);
    1234:	80 e0       	ldi	r24, 0x00	; 0
    1236:	0c 94 be 00 	jmp	0x17c	; 0x17c <LCD_WriteData>
    123a:	08 95       	ret

0000123c <level5_tick>:
}

enum level5s {l5_init, blink51, blink52, blink53, blink54, blink55, blink56, blink57, display51, display52, display53, display54, display55, display56, display57, wrong5, win5} level5;
void level5_tick()
{
	b0 = ~PINA & 0x04;
    123c:	30 b1       	in	r19, 0x00	; 0
    123e:	30 95       	com	r19
    1240:	34 70       	andi	r19, 0x04	; 4
    1242:	30 93 2a 02 	sts	0x022A, r19
	b1 = ~PINA & 0x08;
    1246:	20 b1       	in	r18, 0x00	; 0
    1248:	20 95       	com	r18
    124a:	28 70       	andi	r18, 0x08	; 8
    124c:	20 93 29 02 	sts	0x0229, r18
	b2 = ~PINA & 0x10;
    1250:	80 b1       	in	r24, 0x00	; 0
    1252:	80 95       	com	r24
    1254:	80 71       	andi	r24, 0x10	; 16
    1256:	80 93 28 02 	sts	0x0228, r24
	b3 = ~PINA & 0x20;
    125a:	90 b1       	in	r25, 0x00	; 0
    125c:	90 95       	com	r25
    125e:	90 72       	andi	r25, 0x20	; 32
    1260:	90 93 27 02 	sts	0x0227, r25
	b4 = ~PINA & 0x40;
    1264:	50 b1       	in	r21, 0x00	; 0
    1266:	50 95       	com	r21
    1268:	50 74       	andi	r21, 0x40	; 64
    126a:	50 93 26 02 	sts	0x0226, r21
	switch (level5)
    126e:	40 91 3d 02 	lds	r20, 0x023D
    1272:	e4 2f       	mov	r30, r20
    1274:	f0 e0       	ldi	r31, 0x00	; 0
    1276:	e1 31       	cpi	r30, 0x11	; 17
    1278:	f1 05       	cpc	r31, r1
    127a:	08 f0       	brcs	.+2      	; 0x127e <level5_tick+0x42>
    127c:	4e c1       	rjmp	.+668    	; 0x151a <level5_tick+0x2de>
    127e:	e8 59       	subi	r30, 0x98	; 152
    1280:	ff 4f       	sbci	r31, 0xFF	; 255
    1282:	ab c2       	rjmp	.+1366   	; 0x17da <__tablejump2__>
	{
		case l5_init:
		end_l1 = 1;
    1284:	81 e0       	ldi	r24, 0x01	; 1
    1286:	80 93 2b 02 	sts	0x022B, r24
		if (!start_l5)
    128a:	80 91 2c 02 	lds	r24, 0x022C
    128e:	81 11       	cpse	r24, r1
    1290:	03 c0       	rjmp	.+6      	; 0x1298 <level5_tick+0x5c>
		{
			level5 = l5_init;
    1292:	10 92 3d 02 	sts	0x023D, r1
    1296:	4a c1       	rjmp	.+660    	; 0x152c <level5_tick+0x2f0>
		}
		else if (start_l5)
		{
			highscore_total = 0;
    1298:	10 92 31 02 	sts	0x0231, r1
			level5 = blink51;
    129c:	81 e0       	ldi	r24, 0x01	; 1
    129e:	80 93 3d 02 	sts	0x023D, r24
    12a2:	49 c1       	rjmp	.+658    	; 0x1536 <level5_tick+0x2fa>
			end_l1 = 1;
		}
		break;
		//-----------------------------
		case blink51:
		level5 = blink52;
    12a4:	82 e0       	ldi	r24, 0x02	; 2
    12a6:	80 93 3d 02 	sts	0x023D, r24
    12aa:	5b c1       	rjmp	.+694    	; 0x1562 <level5_tick+0x326>
		break;
		//-----------------------------
		case blink52:
		level5 = blink53;
    12ac:	83 e0       	ldi	r24, 0x03	; 3
    12ae:	80 93 3d 02 	sts	0x023D, r24
    12b2:	68 c1       	rjmp	.+720    	; 0x1584 <level5_tick+0x348>
		break;
		//-----------------------------
		case blink53:
		level5 = blink54;
    12b4:	84 e0       	ldi	r24, 0x04	; 4
    12b6:	80 93 3d 02 	sts	0x023D, r24
    12ba:	74 c1       	rjmp	.+744    	; 0x15a4 <level5_tick+0x368>
		break;
		//-----------------------------
		case blink54:
		level5 = blink55;
    12bc:	85 e0       	ldi	r24, 0x05	; 5
    12be:	80 93 3d 02 	sts	0x023D, r24
    12c2:	81 c1       	rjmp	.+770    	; 0x15c6 <level5_tick+0x38a>
		break;
		//-----------------------------
		case blink55:
		level5 = blink56;
    12c4:	86 e0       	ldi	r24, 0x06	; 6
    12c6:	80 93 3d 02 	sts	0x023D, r24
    12ca:	8e c1       	rjmp	.+796    	; 0x15e8 <level5_tick+0x3ac>
		break;
		//-----------------------------
		case blink56:
		level5 = blink57;
    12cc:	87 e0       	ldi	r24, 0x07	; 7
    12ce:	80 93 3d 02 	sts	0x023D, r24
    12d2:	9b c1       	rjmp	.+822    	; 0x160a <level5_tick+0x3ce>
		break;
		//-----------------------------
		case blink57:
		level5 = display51;
    12d4:	88 e0       	ldi	r24, 0x08	; 8
    12d6:	80 93 3d 02 	sts	0x023D, r24
		break;
    12da:	a7 c1       	rjmp	.+846    	; 0x162a <level5_tick+0x3ee>
		//-----------------------------
		case display51:
		if (b0 && b2)
    12dc:	33 23       	and	r19, r19
    12de:	09 f4       	brne	.+2      	; 0x12e2 <level5_tick+0xa6>
    12e0:	37 c2       	rjmp	.+1134   	; 0x1750 <level5_tick+0x514>
    12e2:	88 23       	and	r24, r24
    12e4:	99 f0       	breq	.+38     	; 0x130c <level5_tick+0xd0>
		{
			highscore_total += 2;
    12e6:	80 91 31 02 	lds	r24, 0x0231
    12ea:	8e 5f       	subi	r24, 0xFE	; 254
    12ec:	80 93 31 02 	sts	0x0231, r24
			if (highscore_total >= final_highscore)
    12f0:	90 91 3c 02 	lds	r25, 0x023C
    12f4:	89 17       	cp	r24, r25
    12f6:	10 f0       	brcs	.+4      	; 0x12fc <level5_tick+0xc0>
			{
				final_highscore = highscore_total;
    12f8:	80 93 3c 02 	sts	0x023C, r24
			}
			level5 = display52;
    12fc:	89 e0       	ldi	r24, 0x09	; 9
    12fe:	80 93 3d 02 	sts	0x023D, r24
    1302:	aa c1       	rjmp	.+852    	; 0x1658 <level5_tick+0x41c>
		}
		else if (b1 || b0 || b2 || b3)
    1304:	81 11       	cpse	r24, r1
    1306:	02 c0       	rjmp	.+4      	; 0x130c <level5_tick+0xd0>
    1308:	99 23       	and	r25, r25
    130a:	21 f0       	breq	.+8      	; 0x1314 <level5_tick+0xd8>
		{
			level5 = wrong5;
    130c:	8f e0       	ldi	r24, 0x0F	; 15
    130e:	80 93 3d 02 	sts	0x023D, r24
    1312:	ea c1       	rjmp	.+980    	; 0x16e8 <level5_tick+0x4ac>
		}
		else if (b4)
    1314:	55 23       	and	r21, r21
    1316:	09 f4       	brne	.+2      	; 0x131a <level5_tick+0xde>
    1318:	88 c1       	rjmp	.+784    	; 0x162a <level5_tick+0x3ee>
		{
			level5 = l5_init;
    131a:	10 92 3d 02 	sts	0x023D, r1
    131e:	06 c1       	rjmp	.+524    	; 0x152c <level5_tick+0x2f0>
		}
		break;
		//-----------------------------
		case display52:
		if (b2)
    1320:	88 23       	and	r24, r24
    1322:	79 f0       	breq	.+30     	; 0x1342 <level5_tick+0x106>
		{
			highscore_total++;
    1324:	80 91 31 02 	lds	r24, 0x0231
    1328:	8f 5f       	subi	r24, 0xFF	; 255
    132a:	80 93 31 02 	sts	0x0231, r24
			if (highscore_total >= final_highscore)
    132e:	90 91 3c 02 	lds	r25, 0x023C
    1332:	89 17       	cp	r24, r25
    1334:	10 f0       	brcs	.+4      	; 0x133a <level5_tick+0xfe>
			{
				final_highscore = highscore_total;
    1336:	80 93 3c 02 	sts	0x023C, r24
			}
			level5 = display53;
    133a:	8a e0       	ldi	r24, 0x0A	; 10
    133c:	80 93 3d 02 	sts	0x023D, r24
    1340:	97 c1       	rjmp	.+814    	; 0x1670 <level5_tick+0x434>
		}
		else if (b3 || b1 || b0)
    1342:	91 11       	cpse	r25, r1
    1344:	04 c0       	rjmp	.+8      	; 0x134e <level5_tick+0x112>
    1346:	21 11       	cpse	r18, r1
    1348:	02 c0       	rjmp	.+4      	; 0x134e <level5_tick+0x112>
    134a:	33 23       	and	r19, r19
    134c:	61 f0       	breq	.+24     	; 0x1366 <level5_tick+0x12a>
		{
			if (highscore_total >= final_highscore)
    134e:	80 91 31 02 	lds	r24, 0x0231
    1352:	90 91 3c 02 	lds	r25, 0x023C
    1356:	89 17       	cp	r24, r25
    1358:	10 f0       	brcs	.+4      	; 0x135e <level5_tick+0x122>
			{
				final_highscore = highscore_total;
    135a:	80 93 3c 02 	sts	0x023C, r24
			}
			level5 = wrong5;
    135e:	8f e0       	ldi	r24, 0x0F	; 15
    1360:	80 93 3d 02 	sts	0x023D, r24
    1364:	c1 c1       	rjmp	.+898    	; 0x16e8 <level5_tick+0x4ac>
		}
		else if (b4)
    1366:	55 23       	and	r21, r21
    1368:	09 f4       	brne	.+2      	; 0x136c <level5_tick+0x130>
    136a:	76 c1       	rjmp	.+748    	; 0x1658 <level5_tick+0x41c>
		{
			level5 = l5_init;
    136c:	10 92 3d 02 	sts	0x023D, r1
    1370:	dd c0       	rjmp	.+442    	; 0x152c <level5_tick+0x2f0>
		}
		break;
		//-----------------------------
		case display53:
		if (b0)
    1372:	33 23       	and	r19, r19
    1374:	79 f0       	breq	.+30     	; 0x1394 <level5_tick+0x158>
		{
			highscore_total++;
    1376:	80 91 31 02 	lds	r24, 0x0231
    137a:	8f 5f       	subi	r24, 0xFF	; 255
    137c:	80 93 31 02 	sts	0x0231, r24
			if (highscore_total >= final_highscore)
    1380:	90 91 3c 02 	lds	r25, 0x023C
    1384:	89 17       	cp	r24, r25
    1386:	10 f0       	brcs	.+4      	; 0x138c <level5_tick+0x150>
			{
				final_highscore = highscore_total;
    1388:	80 93 3c 02 	sts	0x023C, r24
			}
			level5 = display54;
    138c:	8b e0       	ldi	r24, 0x0B	; 11
    138e:	80 93 3d 02 	sts	0x023D, r24
    1392:	7a c1       	rjmp	.+756    	; 0x1688 <level5_tick+0x44c>
		}
		else if (b3 || b2 || b1)
    1394:	91 11       	cpse	r25, r1
    1396:	04 c0       	rjmp	.+8      	; 0x13a0 <level5_tick+0x164>
    1398:	81 11       	cpse	r24, r1
    139a:	02 c0       	rjmp	.+4      	; 0x13a0 <level5_tick+0x164>
    139c:	22 23       	and	r18, r18
    139e:	61 f0       	breq	.+24     	; 0x13b8 <level5_tick+0x17c>
		{
			if (highscore_total >= final_highscore)
    13a0:	80 91 31 02 	lds	r24, 0x0231
    13a4:	90 91 3c 02 	lds	r25, 0x023C
    13a8:	89 17       	cp	r24, r25
    13aa:	10 f0       	brcs	.+4      	; 0x13b0 <level5_tick+0x174>
			{
				final_highscore = highscore_total;
    13ac:	80 93 3c 02 	sts	0x023C, r24
			}
			level5 = wrong5;
    13b0:	8f e0       	ldi	r24, 0x0F	; 15
    13b2:	80 93 3d 02 	sts	0x023D, r24
    13b6:	98 c1       	rjmp	.+816    	; 0x16e8 <level5_tick+0x4ac>
		}
		else if (b4)
    13b8:	55 23       	and	r21, r21
    13ba:	09 f4       	brne	.+2      	; 0x13be <level5_tick+0x182>
    13bc:	59 c1       	rjmp	.+690    	; 0x1670 <level5_tick+0x434>
		{
			level5 = l5_init;
    13be:	10 92 3d 02 	sts	0x023D, r1
    13c2:	b4 c0       	rjmp	.+360    	; 0x152c <level5_tick+0x2f0>
		}
		break;
		//-----------------------------
		case display54:
		if (b3)
    13c4:	99 23       	and	r25, r25
    13c6:	79 f0       	breq	.+30     	; 0x13e6 <level5_tick+0x1aa>
		{
			highscore_total++;
    13c8:	80 91 31 02 	lds	r24, 0x0231
    13cc:	8f 5f       	subi	r24, 0xFF	; 255
    13ce:	80 93 31 02 	sts	0x0231, r24
			if (highscore_total >= final_highscore)
    13d2:	90 91 3c 02 	lds	r25, 0x023C
    13d6:	89 17       	cp	r24, r25
    13d8:	10 f0       	brcs	.+4      	; 0x13de <level5_tick+0x1a2>
			{
				final_highscore = highscore_total;
    13da:	80 93 3c 02 	sts	0x023C, r24
			}
			level5 = display55;
    13de:	8c e0       	ldi	r24, 0x0C	; 12
    13e0:	80 93 3d 02 	sts	0x023D, r24
    13e4:	5d c1       	rjmp	.+698    	; 0x16a0 <level5_tick+0x464>
		}
		else if (b1 || b2 || b0)
    13e6:	21 11       	cpse	r18, r1
    13e8:	04 c0       	rjmp	.+8      	; 0x13f2 <level5_tick+0x1b6>
    13ea:	81 11       	cpse	r24, r1
    13ec:	02 c0       	rjmp	.+4      	; 0x13f2 <level5_tick+0x1b6>
    13ee:	33 23       	and	r19, r19
    13f0:	61 f0       	breq	.+24     	; 0x140a <level5_tick+0x1ce>
		{
			if (highscore_total >= final_highscore)
    13f2:	80 91 31 02 	lds	r24, 0x0231
    13f6:	90 91 3c 02 	lds	r25, 0x023C
    13fa:	89 17       	cp	r24, r25
    13fc:	10 f0       	brcs	.+4      	; 0x1402 <level5_tick+0x1c6>
			{
				final_highscore = highscore_total;
    13fe:	80 93 3c 02 	sts	0x023C, r24
			}
			level5 = wrong5;
    1402:	8f e0       	ldi	r24, 0x0F	; 15
    1404:	80 93 3d 02 	sts	0x023D, r24
    1408:	6f c1       	rjmp	.+734    	; 0x16e8 <level5_tick+0x4ac>
		}
		else if (b4)
    140a:	55 23       	and	r21, r21
    140c:	09 f4       	brne	.+2      	; 0x1410 <level5_tick+0x1d4>
    140e:	3c c1       	rjmp	.+632    	; 0x1688 <level5_tick+0x44c>
		{
			level5 = l5_init;
    1410:	10 92 3d 02 	sts	0x023D, r1
    1414:	8b c0       	rjmp	.+278    	; 0x152c <level5_tick+0x2f0>
		}
		break;
		//-----------------------------
		case display55:
		if (b1)
    1416:	22 23       	and	r18, r18
    1418:	79 f0       	breq	.+30     	; 0x1438 <level5_tick+0x1fc>
		{
			highscore_total++;
    141a:	80 91 31 02 	lds	r24, 0x0231
    141e:	8f 5f       	subi	r24, 0xFF	; 255
    1420:	80 93 31 02 	sts	0x0231, r24
			if (highscore_total >= final_highscore)
    1424:	90 91 3c 02 	lds	r25, 0x023C
    1428:	89 17       	cp	r24, r25
    142a:	10 f0       	brcs	.+4      	; 0x1430 <level5_tick+0x1f4>
			{
				final_highscore = highscore_total;
    142c:	80 93 3c 02 	sts	0x023C, r24
			}
			level5 = display56;
    1430:	8d e0       	ldi	r24, 0x0D	; 13
    1432:	80 93 3d 02 	sts	0x023D, r24
    1436:	40 c1       	rjmp	.+640    	; 0x16b8 <level5_tick+0x47c>
		}
		else if (b3 || b2 || b0)
    1438:	91 11       	cpse	r25, r1
    143a:	04 c0       	rjmp	.+8      	; 0x1444 <level5_tick+0x208>
    143c:	81 11       	cpse	r24, r1
    143e:	02 c0       	rjmp	.+4      	; 0x1444 <level5_tick+0x208>
    1440:	33 23       	and	r19, r19
    1442:	61 f0       	breq	.+24     	; 0x145c <level5_tick+0x220>
		{
			if (highscore_total >= final_highscore)
    1444:	80 91 31 02 	lds	r24, 0x0231
    1448:	90 91 3c 02 	lds	r25, 0x023C
    144c:	89 17       	cp	r24, r25
    144e:	10 f0       	brcs	.+4      	; 0x1454 <level5_tick+0x218>
			{
				final_highscore = highscore_total;
    1450:	80 93 3c 02 	sts	0x023C, r24
			}
			level5 = wrong5;
    1454:	8f e0       	ldi	r24, 0x0F	; 15
    1456:	80 93 3d 02 	sts	0x023D, r24
    145a:	46 c1       	rjmp	.+652    	; 0x16e8 <level5_tick+0x4ac>
		}
		else if (b4)
    145c:	55 23       	and	r21, r21
    145e:	09 f4       	brne	.+2      	; 0x1462 <level5_tick+0x226>
    1460:	1f c1       	rjmp	.+574    	; 0x16a0 <level5_tick+0x464>
		{
			level5 = l5_init;
    1462:	10 92 3d 02 	sts	0x023D, r1
    1466:	62 c0       	rjmp	.+196    	; 0x152c <level5_tick+0x2f0>
		}
		break;
		//-----------------------------
		case display56:
		if (b2)
    1468:	88 23       	and	r24, r24
    146a:	79 f0       	breq	.+30     	; 0x148a <level5_tick+0x24e>
		{
			highscore_total++;
    146c:	80 91 31 02 	lds	r24, 0x0231
    1470:	8f 5f       	subi	r24, 0xFF	; 255
    1472:	80 93 31 02 	sts	0x0231, r24
			if (highscore_total >= final_highscore)
    1476:	90 91 3c 02 	lds	r25, 0x023C
    147a:	89 17       	cp	r24, r25
    147c:	10 f0       	brcs	.+4      	; 0x1482 <level5_tick+0x246>
			{
				final_highscore = highscore_total;
    147e:	80 93 3c 02 	sts	0x023C, r24
			}
			level5 = display57;
    1482:	8e e0       	ldi	r24, 0x0E	; 14
    1484:	80 93 3d 02 	sts	0x023D, r24
    1488:	23 c1       	rjmp	.+582    	; 0x16d0 <level5_tick+0x494>
		}
		else if (b1 || b3 || b0)
    148a:	21 11       	cpse	r18, r1
    148c:	04 c0       	rjmp	.+8      	; 0x1496 <level5_tick+0x25a>
    148e:	91 11       	cpse	r25, r1
    1490:	02 c0       	rjmp	.+4      	; 0x1496 <level5_tick+0x25a>
    1492:	33 23       	and	r19, r19
    1494:	61 f0       	breq	.+24     	; 0x14ae <level5_tick+0x272>
		{
			if (highscore_total >= final_highscore)
    1496:	80 91 31 02 	lds	r24, 0x0231
    149a:	90 91 3c 02 	lds	r25, 0x023C
    149e:	89 17       	cp	r24, r25
    14a0:	10 f0       	brcs	.+4      	; 0x14a6 <level5_tick+0x26a>
			{
				final_highscore = highscore_total;
    14a2:	80 93 3c 02 	sts	0x023C, r24
			}
			level5 = wrong5;
    14a6:	8f e0       	ldi	r24, 0x0F	; 15
    14a8:	80 93 3d 02 	sts	0x023D, r24
    14ac:	1d c1       	rjmp	.+570    	; 0x16e8 <level5_tick+0x4ac>
		}
		else if (b4)
    14ae:	55 23       	and	r21, r21
    14b0:	09 f4       	brne	.+2      	; 0x14b4 <level5_tick+0x278>
    14b2:	02 c1       	rjmp	.+516    	; 0x16b8 <level5_tick+0x47c>
		{
			level5 = l5_init;
    14b4:	10 92 3d 02 	sts	0x023D, r1
    14b8:	39 c0       	rjmp	.+114    	; 0x152c <level5_tick+0x2f0>
		}
		break;
		//-----------------------------
		case display57:
		if (b1 && b3)
    14ba:	22 23       	and	r18, r18
    14bc:	09 f4       	brne	.+2      	; 0x14c0 <level5_tick+0x284>
    14be:	4b c1       	rjmp	.+662    	; 0x1756 <level5_tick+0x51a>
    14c0:	99 23       	and	r25, r25
    14c2:	99 f0       	breq	.+38     	; 0x14ea <level5_tick+0x2ae>
		{
			highscore_total += 2;
    14c4:	80 91 31 02 	lds	r24, 0x0231
    14c8:	8e 5f       	subi	r24, 0xFE	; 254
    14ca:	80 93 31 02 	sts	0x0231, r24
			if (highscore_total >= final_highscore)
    14ce:	90 91 3c 02 	lds	r25, 0x023C
    14d2:	89 17       	cp	r24, r25
    14d4:	10 f0       	brcs	.+4      	; 0x14da <level5_tick+0x29e>
			{
				final_highscore = highscore_total;
    14d6:	80 93 3c 02 	sts	0x023C, r24
			}
			level5 = win5;
    14da:	80 e1       	ldi	r24, 0x10	; 16
    14dc:	80 93 3d 02 	sts	0x023D, r24
    14e0:	1d c1       	rjmp	.+570    	; 0x171c <level5_tick+0x4e0>
		}
		else if (b0 || b1 || b3 || b2)
    14e2:	91 11       	cpse	r25, r1
    14e4:	02 c0       	rjmp	.+4      	; 0x14ea <level5_tick+0x2ae>
    14e6:	88 23       	and	r24, r24
    14e8:	61 f0       	breq	.+24     	; 0x1502 <level5_tick+0x2c6>
		{
			if (highscore_total >= final_highscore)
    14ea:	80 91 31 02 	lds	r24, 0x0231
    14ee:	90 91 3c 02 	lds	r25, 0x023C
    14f2:	89 17       	cp	r24, r25
    14f4:	10 f0       	brcs	.+4      	; 0x14fa <level5_tick+0x2be>
			{
				final_highscore = highscore_total;
    14f6:	80 93 3c 02 	sts	0x023C, r24
			}
			level5 = wrong5;
    14fa:	8f e0       	ldi	r24, 0x0F	; 15
    14fc:	80 93 3d 02 	sts	0x023D, r24
    1500:	f3 c0       	rjmp	.+486    	; 0x16e8 <level5_tick+0x4ac>
		}
		else if (b4)
    1502:	55 23       	and	r21, r21
    1504:	09 f4       	brne	.+2      	; 0x1508 <level5_tick+0x2cc>
    1506:	e4 c0       	rjmp	.+456    	; 0x16d0 <level5_tick+0x494>
		{
			level5 = l5_init;
    1508:	10 92 3d 02 	sts	0x023D, r1
    150c:	0f c0       	rjmp	.+30     	; 0x152c <level5_tick+0x2f0>
		}
		break;
		//-----------------------------
		case wrong5:
		level5 = l5_init;
    150e:	10 92 3d 02 	sts	0x023D, r1
		break;
    1512:	0c c0       	rjmp	.+24     	; 0x152c <level5_tick+0x2f0>
		//-----------------------------
		case win5:
		level5 = l5_init;
    1514:	10 92 3d 02 	sts	0x023D, r1
		break;
    1518:	09 c0       	rjmp	.+18     	; 0x152c <level5_tick+0x2f0>
	}
	
	switch(level5)
    151a:	e4 2f       	mov	r30, r20
    151c:	f0 e0       	ldi	r31, 0x00	; 0
    151e:	e1 31       	cpi	r30, 0x11	; 17
    1520:	f1 05       	cpc	r31, r1
    1522:	08 f0       	brcs	.+2      	; 0x1526 <level5_tick+0x2ea>
    1524:	1b c1       	rjmp	.+566    	; 0x175c <level5_tick+0x520>
    1526:	e7 58       	subi	r30, 0x87	; 135
    1528:	ff 4f       	sbci	r31, 0xFF	; 255
    152a:	57 c1       	rjmp	.+686    	; 0x17da <__tablejump2__>
	{
		case l5_init:
		start_l5 = 0;
    152c:	10 92 2c 02 	sts	0x022C, r1
		end_l1 = 0;
    1530:	10 92 2b 02 	sts	0x022B, r1
		break;
    1534:	08 95       	ret
		//-----------------------------
		case blink51:
		TimerSet(500);
    1536:	64 ef       	ldi	r22, 0xF4	; 244
    1538:	71 e0       	ldi	r23, 0x01	; 1
    153a:	80 e0       	ldi	r24, 0x00	; 0
    153c:	90 e0       	ldi	r25, 0x00	; 0
    153e:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <TimerSet>
		//TOP TWO
		DDRB = 0xFF; PORTB = 0x0F;
    1542:	8f ef       	ldi	r24, 0xFF	; 255
    1544:	84 b9       	out	0x04, r24	; 4
    1546:	9f e0       	ldi	r25, 0x0F	; 15
    1548:	95 b9       	out	0x05, r25	; 5
		DDRC = 0xFF; PORTC = 0xFF;
    154a:	87 b9       	out	0x07, r24	; 7
    154c:	88 b9       	out	0x08, r24	; 8
		//LCD_ClearScreen();
		LCD_Cursor(1);
    154e:	81 e0       	ldi	r24, 0x01	; 1
    1550:	0e 94 ce 00 	call	0x19c	; 0x19c <LCD_Cursor>
		LCD_DisplayString(1, start_string);
    1554:	60 91 1c 01 	lds	r22, 0x011C
    1558:	70 91 1d 01 	lds	r23, 0x011D
    155c:	81 e0       	ldi	r24, 0x01	; 1
    155e:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <LCD_DisplayString>
		break;
		//-----------------------------
		case blink52:
		//TOP RIGHT
		DDRB = 0xFF; PORTB = 0x0F;
    1562:	8f ef       	ldi	r24, 0xFF	; 255
    1564:	84 b9       	out	0x04, r24	; 4
    1566:	9f e0       	ldi	r25, 0x0F	; 15
    1568:	95 b9       	out	0x05, r25	; 5
		DDRC = 0xFF; PORTC = 0xF0;
    156a:	87 b9       	out	0x07, r24	; 7
    156c:	80 ef       	ldi	r24, 0xF0	; 240
    156e:	88 b9       	out	0x08, r24	; 8
		//LCD_ClearScreen();
		LCD_Cursor(1);
    1570:	81 e0       	ldi	r24, 0x01	; 1
    1572:	0e 94 ce 00 	call	0x19c	; 0x19c <LCD_Cursor>
		LCD_DisplayString(1, start_string);
    1576:	60 91 1c 01 	lds	r22, 0x011C
    157a:	70 91 1d 01 	lds	r23, 0x011D
    157e:	81 e0       	ldi	r24, 0x01	; 1
    1580:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <LCD_DisplayString>
		break;
		//-----------------------------
		case blink53:
		//TOP LEFT
		DDRB = 0xFF; PORTB = 0x0F;
    1584:	9f ef       	ldi	r25, 0xFF	; 255
    1586:	94 b9       	out	0x04, r25	; 4
    1588:	8f e0       	ldi	r24, 0x0F	; 15
    158a:	85 b9       	out	0x05, r24	; 5
		DDRC = 0xFF; PORTC = 0x0F;
    158c:	97 b9       	out	0x07, r25	; 7
    158e:	88 b9       	out	0x08, r24	; 8
		//LCD_ClearScreen();
		LCD_Cursor(1);
    1590:	81 e0       	ldi	r24, 0x01	; 1
    1592:	0e 94 ce 00 	call	0x19c	; 0x19c <LCD_Cursor>
		LCD_DisplayString(1, start_string);
    1596:	60 91 1c 01 	lds	r22, 0x011C
    159a:	70 91 1d 01 	lds	r23, 0x011D
    159e:	81 e0       	ldi	r24, 0x01	; 1
    15a0:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <LCD_DisplayString>
		break;
		//-----------------------------
		case blink54:
		//BOTTOM RIGHT
		DDRB = 0x0F; PORTB = 0xF0;
    15a4:	8f e0       	ldi	r24, 0x0F	; 15
    15a6:	84 b9       	out	0x04, r24	; 4
    15a8:	80 ef       	ldi	r24, 0xF0	; 240
    15aa:	85 b9       	out	0x05, r24	; 5
		DDRC = 0xFF; PORTC = 0xF0;
    15ac:	9f ef       	ldi	r25, 0xFF	; 255
    15ae:	97 b9       	out	0x07, r25	; 7
    15b0:	88 b9       	out	0x08, r24	; 8
		//LCD_ClearScreen();
		LCD_Cursor(1);
    15b2:	81 e0       	ldi	r24, 0x01	; 1
    15b4:	0e 94 ce 00 	call	0x19c	; 0x19c <LCD_Cursor>
		LCD_DisplayString(1, start_string);
    15b8:	60 91 1c 01 	lds	r22, 0x011C
    15bc:	70 91 1d 01 	lds	r23, 0x011D
    15c0:	81 e0       	ldi	r24, 0x01	; 1
    15c2:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <LCD_DisplayString>
		break;
		//-----------------------------
		case blink55:
		//BOTTOM LEFT
		DDRB = 0x0F; PORTB = 0xF0;
    15c6:	8f e0       	ldi	r24, 0x0F	; 15
    15c8:	84 b9       	out	0x04, r24	; 4
    15ca:	90 ef       	ldi	r25, 0xF0	; 240
    15cc:	95 b9       	out	0x05, r25	; 5
		DDRC = 0xFF; PORTC = 0x0F;
    15ce:	9f ef       	ldi	r25, 0xFF	; 255
    15d0:	97 b9       	out	0x07, r25	; 7
    15d2:	88 b9       	out	0x08, r24	; 8
		//LCD_ClearScreen();
		LCD_Cursor(1);
    15d4:	81 e0       	ldi	r24, 0x01	; 1
    15d6:	0e 94 ce 00 	call	0x19c	; 0x19c <LCD_Cursor>
		LCD_DisplayString(1, start_string);
    15da:	60 91 1c 01 	lds	r22, 0x011C
    15de:	70 91 1d 01 	lds	r23, 0x011D
    15e2:	81 e0       	ldi	r24, 0x01	; 1
    15e4:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <LCD_DisplayString>
		break;
		//-----------------------------
		case blink56:
		//TOP RIGHT
		DDRB = 0xFF; PORTB = 0x0F;
    15e8:	8f ef       	ldi	r24, 0xFF	; 255
    15ea:	84 b9       	out	0x04, r24	; 4
    15ec:	9f e0       	ldi	r25, 0x0F	; 15
    15ee:	95 b9       	out	0x05, r25	; 5
		DDRC = 0xFF; PORTC = 0xF0;
    15f0:	87 b9       	out	0x07, r24	; 7
    15f2:	80 ef       	ldi	r24, 0xF0	; 240
    15f4:	88 b9       	out	0x08, r24	; 8
		//LCD_ClearScreen();
		LCD_Cursor(1);
    15f6:	81 e0       	ldi	r24, 0x01	; 1
    15f8:	0e 94 ce 00 	call	0x19c	; 0x19c <LCD_Cursor>
		LCD_DisplayString(1, start_string);
    15fc:	60 91 1c 01 	lds	r22, 0x011C
    1600:	70 91 1d 01 	lds	r23, 0x011D
    1604:	81 e0       	ldi	r24, 0x01	; 1
    1606:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <LCD_DisplayString>
		break;
		//-----------------------------
		case blink57:
		//BOTTOM TWO
		DDRB = 0xFF; PORTB = 0xF0;
    160a:	8f ef       	ldi	r24, 0xFF	; 255
    160c:	84 b9       	out	0x04, r24	; 4
    160e:	90 ef       	ldi	r25, 0xF0	; 240
    1610:	95 b9       	out	0x05, r25	; 5
		DDRC = 0xFF; PORTC = 0xFF;
    1612:	87 b9       	out	0x07, r24	; 7
    1614:	88 b9       	out	0x08, r24	; 8
		//LCD_ClearScreen();
		LCD_Cursor(1);
    1616:	81 e0       	ldi	r24, 0x01	; 1
    1618:	0e 94 ce 00 	call	0x19c	; 0x19c <LCD_Cursor>
		LCD_DisplayString(1, start_string);
    161c:	60 91 1c 01 	lds	r22, 0x011C
    1620:	70 91 1d 01 	lds	r23, 0x011D
    1624:	81 e0       	ldi	r24, 0x01	; 1
    1626:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <LCD_DisplayString>
		break;
		//-----------------------------
		case display51:
		TimerSet(300);
    162a:	6c e2       	ldi	r22, 0x2C	; 44
    162c:	71 e0       	ldi	r23, 0x01	; 1
    162e:	80 e0       	ldi	r24, 0x00	; 0
    1630:	90 e0       	ldi	r25, 0x00	; 0
    1632:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <TimerSet>
		//TURNS OFF SCREEN
		DDRB = 0xFF; PORTB = 0xFF;
    1636:	8f ef       	ldi	r24, 0xFF	; 255
    1638:	84 b9       	out	0x04, r24	; 4
    163a:	85 b9       	out	0x05, r24	; 5
		DDRC = 0xFF; PORTC = 0x00;
    163c:	87 b9       	out	0x07, r24	; 7
    163e:	18 b8       	out	0x08, r1	; 8
		LCD_ClearScreen();
    1640:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <LCD_ClearScreen>
		LCD_Cursor(1);
    1644:	81 e0       	ldi	r24, 0x01	; 1
    1646:	0e 94 ce 00 	call	0x19c	; 0x19c <LCD_Cursor>
		LCD_DisplayString(1, key_press1);
    164a:	60 91 14 01 	lds	r22, 0x0114
    164e:	70 91 15 01 	lds	r23, 0x0115
    1652:	81 e0       	ldi	r24, 0x01	; 1
    1654:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <LCD_DisplayString>
		break;
		//-----------------------------
		case display52:
		LCD_ClearScreen();
    1658:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <LCD_ClearScreen>
		LCD_Cursor(1);
    165c:	81 e0       	ldi	r24, 0x01	; 1
    165e:	0e 94 ce 00 	call	0x19c	; 0x19c <LCD_Cursor>
		LCD_DisplayString(1, key_press2);
    1662:	60 91 12 01 	lds	r22, 0x0112
    1666:	70 91 13 01 	lds	r23, 0x0113
    166a:	81 e0       	ldi	r24, 0x01	; 1
    166c:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <LCD_DisplayString>
		break;
		//-----------------------------
		case display53:
		LCD_ClearScreen();
    1670:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <LCD_ClearScreen>
		LCD_Cursor(1);
    1674:	81 e0       	ldi	r24, 0x01	; 1
    1676:	0e 94 ce 00 	call	0x19c	; 0x19c <LCD_Cursor>
		LCD_DisplayString(1, key_press3);
    167a:	60 91 10 01 	lds	r22, 0x0110
    167e:	70 91 11 01 	lds	r23, 0x0111
    1682:	81 e0       	ldi	r24, 0x01	; 1
    1684:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <LCD_DisplayString>
		break;
		//-----------------------------
		case display54:
		LCD_ClearScreen();
    1688:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <LCD_ClearScreen>
		LCD_Cursor(1);
    168c:	81 e0       	ldi	r24, 0x01	; 1
    168e:	0e 94 ce 00 	call	0x19c	; 0x19c <LCD_Cursor>
		LCD_DisplayString(1, key_press4);
    1692:	60 91 0e 01 	lds	r22, 0x010E
    1696:	70 91 0f 01 	lds	r23, 0x010F
    169a:	81 e0       	ldi	r24, 0x01	; 1
    169c:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <LCD_DisplayString>
		break;
		//-----------------------------
		case display55:
		LCD_ClearScreen();
    16a0:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <LCD_ClearScreen>
		LCD_Cursor(1);
    16a4:	81 e0       	ldi	r24, 0x01	; 1
    16a6:	0e 94 ce 00 	call	0x19c	; 0x19c <LCD_Cursor>
		LCD_DisplayString(1, key_press5);
    16aa:	60 91 0c 01 	lds	r22, 0x010C
    16ae:	70 91 0d 01 	lds	r23, 0x010D
    16b2:	81 e0       	ldi	r24, 0x01	; 1
    16b4:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <LCD_DisplayString>
		break;
		//-----------------------------
		case display56:
		LCD_ClearScreen();
    16b8:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <LCD_ClearScreen>
		LCD_Cursor(1);
    16bc:	81 e0       	ldi	r24, 0x01	; 1
    16be:	0e 94 ce 00 	call	0x19c	; 0x19c <LCD_Cursor>
		LCD_DisplayString(1, key_press6);
    16c2:	60 91 0a 01 	lds	r22, 0x010A
    16c6:	70 91 0b 01 	lds	r23, 0x010B
    16ca:	81 e0       	ldi	r24, 0x01	; 1
    16cc:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <LCD_DisplayString>
		break;
		//-----------------------------
		case display57:
		LCD_ClearScreen();
    16d0:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <LCD_ClearScreen>
		LCD_Cursor(1);
    16d4:	81 e0       	ldi	r24, 0x01	; 1
    16d6:	0e 94 ce 00 	call	0x19c	; 0x19c <LCD_Cursor>
		LCD_DisplayString(1, key_press7);
    16da:	60 91 08 01 	lds	r22, 0x0108
    16de:	70 91 09 01 	lds	r23, 0x0109
    16e2:	81 e0       	ldi	r24, 0x01	; 1
    16e4:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <LCD_DisplayString>
		break;
		//-----------------------------
		case wrong5:
		TimerSet(1000);
    16e8:	68 ee       	ldi	r22, 0xE8	; 232
    16ea:	73 e0       	ldi	r23, 0x03	; 3
    16ec:	80 e0       	ldi	r24, 0x00	; 0
    16ee:	90 e0       	ldi	r25, 0x00	; 0
    16f0:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <TimerSet>
		eeprom_write_byte((uint8_t*)46, final_highscore);
    16f4:	60 91 3c 02 	lds	r22, 0x023C
    16f8:	8e e2       	ldi	r24, 0x2E	; 46
    16fa:	90 e0       	ldi	r25, 0x00	; 0
    16fc:	7c d0       	rcall	.+248    	; 0x17f6 <__eewr_byte_m1284>
		LCD_ClearScreen();
    16fe:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <LCD_ClearScreen>
		LCD_Cursor(1);
    1702:	81 e0       	ldi	r24, 0x01	; 1
    1704:	0e 94 ce 00 	call	0x19c	; 0x19c <LCD_Cursor>
		LCD_DisplayString(1, wrong_string);
    1708:	60 91 18 01 	lds	r22, 0x0118
    170c:	70 91 19 01 	lds	r23, 0x0119
    1710:	81 e0       	ldi	r24, 0x01	; 1
    1712:	0e 94 d6 00 	call	0x1ac	; 0x1ac <LCD_DisplayString>
		LCD_WriteData(0);
    1716:	80 e0       	ldi	r24, 0x00	; 0
    1718:	0c 94 be 00 	jmp	0x17c	; 0x17c <LCD_WriteData>
		break;
		//-----------------------------
		case win5:
		TimerSet(1000);
    171c:	68 ee       	ldi	r22, 0xE8	; 232
    171e:	73 e0       	ldi	r23, 0x03	; 3
    1720:	80 e0       	ldi	r24, 0x00	; 0
    1722:	90 e0       	ldi	r25, 0x00	; 0
    1724:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <TimerSet>
		eeprom_write_byte((uint8_t*)46, final_highscore);
    1728:	60 91 3c 02 	lds	r22, 0x023C
    172c:	8e e2       	ldi	r24, 0x2E	; 46
    172e:	90 e0       	ldi	r25, 0x00	; 0
    1730:	62 d0       	rcall	.+196    	; 0x17f6 <__eewr_byte_m1284>
		LCD_ClearScreen();
    1732:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <LCD_ClearScreen>
		LCD_Cursor(1);
    1736:	81 e0       	ldi	r24, 0x01	; 1
    1738:	0e 94 ce 00 	call	0x19c	; 0x19c <LCD_Cursor>
		LCD_DisplayString(1, win_string);
    173c:	60 91 1a 01 	lds	r22, 0x011A
    1740:	70 91 1b 01 	lds	r23, 0x011B
    1744:	81 e0       	ldi	r24, 0x01	; 1
    1746:	0e 94 d6 00 	call	0x1ac	; 0x1ac <LCD_DisplayString>
		LCD_WriteData(0);
    174a:	80 e0       	ldi	r24, 0x00	; 0
    174c:	0c 94 be 00 	jmp	0x17c	; 0x17c <LCD_WriteData>
			{
				final_highscore = highscore_total;
			}
			level5 = display52;
		}
		else if (b1 || b0 || b2 || b3)
    1750:	21 11       	cpse	r18, r1
    1752:	dc cd       	rjmp	.-1096   	; 0x130c <level5_tick+0xd0>
    1754:	d7 cd       	rjmp	.-1106   	; 0x1304 <level5_tick+0xc8>
			{
				final_highscore = highscore_total;
			}
			level5 = win5;
		}
		else if (b0 || b1 || b3 || b2)
    1756:	31 11       	cpse	r19, r1
    1758:	c8 ce       	rjmp	.-624    	; 0x14ea <level5_tick+0x2ae>
    175a:	c3 ce       	rjmp	.-634    	; 0x14e2 <level5_tick+0x2a6>
    175c:	08 95       	ret

0000175e <main>:
	}
}

int main(void) //EE PROM
{
	DDRA = 0x03; PORTA = 0xFC;
    175e:	83 e0       	ldi	r24, 0x03	; 3
    1760:	81 b9       	out	0x01, r24	; 1
    1762:	8c ef       	ldi	r24, 0xFC	; 252
    1764:	82 b9       	out	0x02, r24	; 2
	DDRD = 0xFF; PORTD = 0x00;
    1766:	8f ef       	ldi	r24, 0xFF	; 255
    1768:	8a b9       	out	0x0a, r24	; 10
    176a:	1b b8       	out	0x0b, r1	; 11
	
	DDRB = 0xFF; PORTB = 0xFF; //COLLUMN (LEFT->RIGHT): 0x00: ground 0 means ON
    176c:	84 b9       	out	0x04, r24	; 4
    176e:	85 b9       	out	0x05, r24	; 5
	DDRC = 0xFF; PORTC = 0x00; //ROW (TOP->BOTTOM): 0xFF: power 1 means on
    1770:	87 b9       	out	0x07, r24	; 7
    1772:	18 b8       	out	0x08, r1	; 8
	
	//CUSTOM CHARACTER
	LCD_WriteCommand(0x40);//locations 0x40,0x48,0x50,0x58,0x60,68,70,78
    1774:	80 e4       	ldi	r24, 0x40	; 64
    1776:	0e 94 c6 00 	call	0x18c	; 0x18c <LCD_WriteCommand>
    177a:	c0 e0       	ldi	r28, 0x00	; 0
    177c:	d1 e0       	ldi	r29, 0x01	; 1
		LCD_WriteData(0);
		break;
	}
}

int main(void) //EE PROM
    177e:	08 e0       	ldi	r16, 0x08	; 8
    1780:	11 e0       	ldi	r17, 0x01	; 1
	
	//CUSTOM CHARACTER
	LCD_WriteCommand(0x40);//locations 0x40,0x48,0x50,0x58,0x60,68,70,78
	for(unsigned char i=0; i<8; i++)
	{
		LCD_WriteData(customChar[i]);
    1782:	89 91       	ld	r24, Y+
    1784:	0e 94 be 00 	call	0x17c	; 0x17c <LCD_WriteData>
	DDRB = 0xFF; PORTB = 0xFF; //COLLUMN (LEFT->RIGHT): 0x00: ground 0 means ON
	DDRC = 0xFF; PORTC = 0x00; //ROW (TOP->BOTTOM): 0xFF: power 1 means on
	
	//CUSTOM CHARACTER
	LCD_WriteCommand(0x40);//locations 0x40,0x48,0x50,0x58,0x60,68,70,78
	for(unsigned char i=0; i<8; i++)
    1788:	c0 17       	cp	r28, r16
    178a:	d1 07       	cpc	r29, r17
    178c:	d1 f7       	brne	.-12     	; 0x1782 <main+0x24>
	{
		LCD_WriteData(customChar[i]);
	}
	LCD_WriteCommand(0x80); //put back to normal
    178e:	80 e8       	ldi	r24, 0x80	; 128
    1790:	0e 94 c6 00 	call	0x18c	; 0x18c <LCD_WriteCommand>
	
	//EE PROM
	eeprom_read_byte((uint8_t*)46);
	
	TimerSet(500);
    1794:	64 ef       	ldi	r22, 0xF4	; 244
    1796:	71 e0       	ldi	r23, 0x01	; 1
    1798:	80 e0       	ldi	r24, 0x00	; 0
    179a:	90 e0       	ldi	r25, 0x00	; 0
    179c:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <TimerSet>
	TimerOn();
    17a0:	0e 94 0c 01 	call	0x218	; 0x218 <TimerOn>
	menu_sm = menu;
    17a4:	10 92 3b 02 	sts	0x023B, r1
	level1 = l1_init;
    17a8:	10 92 39 02 	sts	0x0239, r1
	
	LCD_init();
    17ac:	0e 94 ed 00 	call	0x1da	; 0x1da <LCD_init>
	LCD_ClearScreen();
    17b0:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <LCD_ClearScreen>
	LCD_Cursor(1);
    17b4:	81 e0       	ldi	r24, 0x01	; 1
    17b6:	0e 94 ce 00 	call	0x19c	; 0x19c <LCD_Cursor>
    while(1)
    {
		menu_sm_tick();
    17ba:	0e 94 82 01 	call	0x304	; 0x304 <menu_sm_tick>
		level1_tick();
    17be:	0e 94 87 02 	call	0x50e	; 0x50e <level1_tick>
		level2_tick();
    17c2:	0e 94 66 03 	call	0x6cc	; 0x6cc <level2_tick>
		level3_tick();
    17c6:	9e d8       	rcall	.-3780   	; 0x904 <level3_tick>
		level4_tick();
    17c8:	c8 da       	rcall	.-2672   	; 0xd5a <level4_tick>
		level5_tick();
    17ca:	38 dd       	rcall	.-1424   	; 0x123c <level5_tick>
		while(!TimerFlag){}
    17cc:	80 91 37 02 	lds	r24, 0x0237
    17d0:	88 23       	and	r24, r24
    17d2:	e1 f3       	breq	.-8      	; 0x17cc <main+0x6e>
		TimerFlag = 0;
    17d4:	10 92 37 02 	sts	0x0237, r1
    }
    17d8:	f0 cf       	rjmp	.-32     	; 0x17ba <main+0x5c>

000017da <__tablejump2__>:
    17da:	ee 0f       	add	r30, r30
    17dc:	ff 1f       	adc	r31, r31

000017de <__tablejump__>:
    17de:	05 90       	lpm	r0, Z+
    17e0:	f4 91       	lpm	r31, Z
    17e2:	e0 2d       	mov	r30, r0
    17e4:	09 94       	ijmp

000017e6 <__eerd_byte_m1284>:
    17e6:	f9 99       	sbic	0x1f, 1	; 31
    17e8:	fe cf       	rjmp	.-4      	; 0x17e6 <__eerd_byte_m1284>
    17ea:	92 bd       	out	0x22, r25	; 34
    17ec:	81 bd       	out	0x21, r24	; 33
    17ee:	f8 9a       	sbi	0x1f, 0	; 31
    17f0:	99 27       	eor	r25, r25
    17f2:	80 b5       	in	r24, 0x20	; 32
    17f4:	08 95       	ret

000017f6 <__eewr_byte_m1284>:
    17f6:	26 2f       	mov	r18, r22

000017f8 <__eewr_r18_m1284>:
    17f8:	f9 99       	sbic	0x1f, 1	; 31
    17fa:	fe cf       	rjmp	.-4      	; 0x17f8 <__eewr_r18_m1284>
    17fc:	1f ba       	out	0x1f, r1	; 31
    17fe:	92 bd       	out	0x22, r25	; 34
    1800:	81 bd       	out	0x21, r24	; 33
    1802:	20 bd       	out	0x20, r18	; 32
    1804:	0f b6       	in	r0, 0x3f	; 63
    1806:	f8 94       	cli
    1808:	fa 9a       	sbi	0x1f, 2	; 31
    180a:	f9 9a       	sbi	0x1f, 1	; 31
    180c:	0f be       	out	0x3f, r0	; 63
    180e:	01 96       	adiw	r24, 0x01	; 1
    1810:	08 95       	ret

00001812 <_exit>:
    1812:	f8 94       	cli

00001814 <__stop_program>:
    1814:	ff cf       	rjmp	.-2      	; 0x1814 <__stop_program>
