
rgosh001_lab3_part1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  0000011c  000001b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000011c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800100  00800100  000001b0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001b0  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  000001e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000000f1  00000000  00000000  00000208  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000000a4  00000000  00000000  000002f9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000000d0  00000000  00000000  0000039d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00000470  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001ce  00000000  00000000  000004a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000018  00000000  00000000  00000672  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a3 30       	cpi	r26, 0x03	; 3
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	2d d0       	rcall	.+90     	; 0x104 <main>
  aa:	36 c0       	rjmp	.+108    	; 0x118 <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <_Z11button_tickv>:
	unsigned char button = 0x00;
	unsigned char led = 0x00;
	
void button_tick()
{
	button = ~PINA & 0x01;
  ae:	80 b1       	in	r24, 0x00	; 0
  b0:	80 95       	com	r24
  b2:	81 70       	andi	r24, 0x01	; 1
  b4:	80 93 01 01 	sts	0x0101, r24
	
	switch(b_State) {
  b8:	90 91 02 01 	lds	r25, 0x0102
  bc:	99 23       	and	r25, r25
  be:	19 f0       	breq	.+6      	; 0xc6 <_Z11button_tickv+0x18>
  c0:	91 30       	cpi	r25, 0x01	; 1
  c2:	51 f0       	breq	.+20     	; 0xd8 <_Z11button_tickv+0x2a>
  c4:	12 c0       	rjmp	.+36     	; 0xea <_Z11button_tickv+0x3c>
		// Transitions
		case b_s0:
		if (button) {
  c6:	88 23       	and	r24, r24
  c8:	21 f0       	breq	.+8      	; 0xd2 <_Z11button_tickv+0x24>
			b_State = b_s1;
  ca:	81 e0       	ldi	r24, 0x01	; 1
  cc:	80 93 02 01 	sts	0x0102, r24
  d0:	0f c0       	rjmp	.+30     	; 0xf0 <_Z11button_tickv+0x42>
		}
		else if (!button) {
			b_State = b_s0;
  d2:	10 92 02 01 	sts	0x0102, r1
  d6:	11 c0       	rjmp	.+34     	; 0xfa <_Z11button_tickv+0x4c>
		}
		break;
		
		case b_s1:
		if (button) {
  d8:	88 23       	and	r24, r24
  da:	19 f0       	breq	.+6      	; 0xe2 <_Z11button_tickv+0x34>
			b_State = b_s0;
  dc:	10 92 02 01 	sts	0x0102, r1
  e0:	0c c0       	rjmp	.+24     	; 0xfa <_Z11button_tickv+0x4c>
		}
		else if (!button) {
			b_State = b_s1;
  e2:	81 e0       	ldi	r24, 0x01	; 1
  e4:	80 93 02 01 	sts	0x0102, r24
  e8:	03 c0       	rjmp	.+6      	; 0xf0 <_Z11button_tickv+0x42>
		}
		break;
		
		default:
		b_State = b_s0;
  ea:	10 92 02 01 	sts	0x0102, r1
		break;
  ee:	05 c0       	rjmp	.+10     	; 0xfa <_Z11button_tickv+0x4c>
		led = 0x01;
		PORTB = led;
		break;
		
		case b_s1:
		led = 0x02;
  f0:	82 e0       	ldi	r24, 0x02	; 2
  f2:	80 93 00 01 	sts	0x0100, r24
		PORTB = led;
  f6:	85 b9       	out	0x05, r24	; 5
		break;
  f8:	08 95       	ret
		break;
	} // Transitions

	switch(b_State) { // State actions
		case b_s0:
		led = 0x01;
  fa:	81 e0       	ldi	r24, 0x01	; 1
  fc:	80 93 00 01 	sts	0x0100, r24
		PORTB = led;
 100:	85 b9       	out	0x05, r24	; 5
 102:	08 95       	ret

00000104 <main>:
		break;
	} // State actions
}

int main() {
	DDRA = 0x00; PORTA = 0xFF;// Initialize inputs
 104:	11 b8       	out	0x01, r1	; 1
 106:	8f ef       	ldi	r24, 0xFF	; 255
 108:	82 b9       	out	0x02, r24	; 2
	DDRB = 0xFF; PORTB = 0x01;// Initialize outputs
 10a:	84 b9       	out	0x04, r24	; 4
 10c:	81 e0       	ldi	r24, 0x01	; 1
 10e:	85 b9       	out	0x05, r24	; 5
	b_State = b_s0; // Indicates initial call
 110:	10 92 02 01 	sts	0x0102, r1
	while(1) {
		button_tick();
 114:	cc df       	rcall	.-104    	; 0xae <_Z11button_tickv>
 116:	fe cf       	rjmp	.-4      	; 0x114 <main+0x10>

00000118 <_exit>:
 118:	f8 94       	cli

0000011a <__stop_program>:
 11a:	ff cf       	rjmp	.-2      	; 0x11a <__stop_program>
