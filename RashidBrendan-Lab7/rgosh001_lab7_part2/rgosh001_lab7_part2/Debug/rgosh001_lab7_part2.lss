
rgosh001_lab7_part2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002e  00800100  0000042c  000004c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000042c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000022  0080012e  0080012e  000004ee  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  000004f0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000097  00000000  00000000  00000bbc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00000c53  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000098  00000000  00000000  00000c82  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000624  00000000  00000000  00000d1a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000216  00000000  00000000  0000133e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000471  00000000  00000000  00001554  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000194  00000000  00000000  000019c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000256  00000000  00000000  00001b5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000436  00000000  00000000  00001db2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000088  00000000  00000000  000021e8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	11 c1       	rjmp	.+546    	; 0x258 <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ec e2       	ldi	r30, 0x2C	; 44
  a0:	f4 e0       	ldi	r31, 0x04	; 4
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	ae 32       	cpi	r26, 0x2E	; 46
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	ae e2       	ldi	r26, 0x2E	; 46
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a0 35       	cpi	r26, 0x50	; 80
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	18 d1       	rcall	.+560    	; 0x2f4 <main>
  c4:	b1 c1       	rjmp	.+866    	; 0x428 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <delay_ms>:
	//Enable global interrupts
	SREG |= 0x80;	// 0x80: 1000000
}

void TimerOff() {
	TCCR1B 	= 0x00; // bit3bit2bit1bit0=0000: timer off
  c8:	18 16       	cp	r1, r24
  ca:	19 06       	cpc	r1, r25
  cc:	5c f0       	brlt	.+22     	; 0xe4 <delay_ms+0x1c>
  ce:	08 95       	ret
  d0:	00 00       	nop
  d2:	21 50       	subi	r18, 0x01	; 1
  d4:	31 09       	sbc	r19, r1
  d6:	e1 f7       	brne	.-8      	; 0xd0 <delay_ms+0x8>
  d8:	4f 5f       	subi	r20, 0xFF	; 255
  da:	5f 4f       	sbci	r21, 0xFF	; 255
  dc:	48 17       	cp	r20, r24
  de:	59 07       	cpc	r21, r25
  e0:	29 f4       	brne	.+10     	; 0xec <delay_ms+0x24>
  e2:	08 95       	ret
  e4:	40 e0       	ldi	r20, 0x00	; 0
  e6:	50 e0       	ldi	r21, 0x00	; 0
  e8:	67 e0       	ldi	r22, 0x07	; 7
  ea:	73 e0       	ldi	r23, 0x03	; 3
  ec:	9b 01       	movw	r18, r22
  ee:	f0 cf       	rjmp	.-32     	; 0xd0 <delay_ms+0x8>

000000f0 <LCD_WriteData>:
  f0:	10 9a       	sbi	0x02, 0	; 2
  f2:	8b b9       	out	0x0b, r24	; 11
  f4:	11 9a       	sbi	0x02, 1	; 2
  f6:	00 00       	nop
  f8:	11 98       	cbi	0x02, 1	; 2
  fa:	81 e0       	ldi	r24, 0x01	; 1
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	e4 cf       	rjmp	.-56     	; 0xc8 <delay_ms>

00000100 <LCD_WriteCommand>:
 100:	10 98       	cbi	0x02, 0	; 2
 102:	8b b9       	out	0x0b, r24	; 11
 104:	11 9a       	sbi	0x02, 1	; 2
 106:	00 00       	nop
 108:	11 98       	cbi	0x02, 1	; 2
 10a:	82 e0       	ldi	r24, 0x02	; 2
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	dc cf       	rjmp	.-72     	; 0xc8 <delay_ms>

00000110 <LCD_Cursor>:
 110:	81 31       	cpi	r24, 0x11	; 17
 112:	10 f4       	brcc	.+4      	; 0x118 <LCD_Cursor+0x8>
 114:	81 58       	subi	r24, 0x81	; 129
 116:	f4 cf       	rjmp	.-24     	; 0x100 <LCD_WriteCommand>
 118:	81 55       	subi	r24, 0x51	; 81
 11a:	f2 cf       	rjmp	.-28     	; 0x100 <LCD_WriteCommand>

0000011c <LCD_ClearScreen>:
 11c:	81 e0       	ldi	r24, 0x01	; 1
 11e:	f0 cf       	rjmp	.-32     	; 0x100 <LCD_WriteCommand>

00000120 <LCD_DisplayString>:
 120:	1f 93       	push	r17
 122:	cf 93       	push	r28
 124:	df 93       	push	r29
 126:	18 2f       	mov	r17, r24
 128:	eb 01       	movw	r28, r22
 12a:	f8 df       	rcall	.-16     	; 0x11c <LCD_ClearScreen>
 12c:	98 81       	ld	r25, Y
 12e:	99 23       	and	r25, r25
 130:	51 f0       	breq	.+20     	; 0x146 <LCD_DisplayString+0x26>
 132:	81 2f       	mov	r24, r17
 134:	18 2f       	mov	r17, r24
 136:	1f 5f       	subi	r17, 0xFF	; 255
 138:	eb df       	rcall	.-42     	; 0x110 <LCD_Cursor>
 13a:	89 91       	ld	r24, Y+
 13c:	d9 df       	rcall	.-78     	; 0xf0 <LCD_WriteData>
 13e:	81 2f       	mov	r24, r17
 140:	98 81       	ld	r25, Y
 142:	91 11       	cpse	r25, r1
 144:	f7 cf       	rjmp	.-18     	; 0x134 <LCD_DisplayString+0x14>
 146:	df 91       	pop	r29
 148:	cf 91       	pop	r28
 14a:	1f 91       	pop	r17
 14c:	08 95       	ret

0000014e <tick_funct>:
 14e:	cf 92       	push	r12
 150:	df 92       	push	r13
 152:	ef 92       	push	r14
 154:	ff 92       	push	r15
 156:	0f 93       	push	r16
 158:	1f 93       	push	r17
 15a:	cf 93       	push	r28
 15c:	df 93       	push	r29
 15e:	c8 2e       	mov	r12, r24
 160:	d9 2e       	mov	r13, r25
 162:	e0 90 00 01 	lds	r14, 0x0100
 166:	f0 90 01 01 	lds	r15, 0x0101
 16a:	c0 91 2e 01 	lds	r28, 0x012E
 16e:	ef e3       	ldi	r30, 0x3F	; 63
 170:	f1 e0       	ldi	r31, 0x01	; 1
 172:	0f e4       	ldi	r16, 0x4F	; 79
 174:	11 e0       	ldi	r17, 0x01	; 1
 176:	d0 e0       	ldi	r29, 0x00	; 0
 178:	ce 1b       	sub	r28, r30
 17a:	df 0b       	sbc	r29, r31
 17c:	26 e2       	ldi	r18, 0x26	; 38
 17e:	30 e0       	ldi	r19, 0x00	; 0
 180:	ce 01       	movw	r24, r28
 182:	8e 0f       	add	r24, r30
 184:	9f 1f       	adc	r25, r31
 186:	b9 01       	movw	r22, r18
 188:	28 d1       	rcall	.+592    	; 0x3da <__divmodhi4>
 18a:	d7 01       	movw	r26, r14
 18c:	a8 0f       	add	r26, r24
 18e:	b9 1f       	adc	r27, r25
 190:	8c 91       	ld	r24, X
 192:	81 93       	st	Z+, r24
 194:	e0 17       	cp	r30, r16
 196:	f1 07       	cpc	r31, r17
 198:	99 f7       	brne	.-26     	; 0x180 <tick_funct+0x32>
 19a:	80 91 2e 01 	lds	r24, 0x012E
 19e:	90 e0       	ldi	r25, 0x00	; 0
 1a0:	01 96       	adiw	r24, 0x01	; 1
 1a2:	66 e2       	ldi	r22, 0x26	; 38
 1a4:	70 e0       	ldi	r23, 0x00	; 0
 1a6:	19 d1       	rcall	.+562    	; 0x3da <__divmodhi4>
 1a8:	80 93 2e 01 	sts	0x012E, r24
 1ac:	6f e3       	ldi	r22, 0x3F	; 63
 1ae:	71 e0       	ldi	r23, 0x01	; 1
 1b0:	81 e0       	ldi	r24, 0x01	; 1
 1b2:	b6 df       	rcall	.-148    	; 0x120 <LCD_DisplayString>
 1b4:	8c 2d       	mov	r24, r12
 1b6:	9d 2d       	mov	r25, r13
 1b8:	df 91       	pop	r29
 1ba:	cf 91       	pop	r28
 1bc:	1f 91       	pop	r17
 1be:	0f 91       	pop	r16
 1c0:	ff 90       	pop	r15
 1c2:	ef 90       	pop	r14
 1c4:	df 90       	pop	r13
 1c6:	cf 90       	pop	r12
 1c8:	08 95       	ret

000001ca <LCD_init>:
 1ca:	84 e6       	ldi	r24, 0x64	; 100
 1cc:	90 e0       	ldi	r25, 0x00	; 0
 1ce:	7c df       	rcall	.-264    	; 0xc8 <delay_ms>
 1d0:	88 e3       	ldi	r24, 0x38	; 56
 1d2:	96 df       	rcall	.-212    	; 0x100 <LCD_WriteCommand>
 1d4:	86 e0       	ldi	r24, 0x06	; 6
 1d6:	94 df       	rcall	.-216    	; 0x100 <LCD_WriteCommand>
 1d8:	8f e0       	ldi	r24, 0x0F	; 15
 1da:	92 df       	rcall	.-220    	; 0x100 <LCD_WriteCommand>
 1dc:	81 e0       	ldi	r24, 0x01	; 1
 1de:	90 df       	rcall	.-224    	; 0x100 <LCD_WriteCommand>
 1e0:	8a e0       	ldi	r24, 0x0A	; 10
 1e2:	90 e0       	ldi	r25, 0x00	; 0
 1e4:	71 cf       	rjmp	.-286    	; 0xc8 <delay_ms>

000001e6 <TimerSet>:
 1e6:	60 93 02 01 	sts	0x0102, r22
 1ea:	70 93 03 01 	sts	0x0103, r23
 1ee:	80 93 04 01 	sts	0x0104, r24
 1f2:	90 93 05 01 	sts	0x0105, r25
 1f6:	60 93 2f 01 	sts	0x012F, r22
 1fa:	70 93 30 01 	sts	0x0130, r23
 1fe:	80 93 31 01 	sts	0x0131, r24
 202:	90 93 32 01 	sts	0x0132, r25
 206:	08 95       	ret

00000208 <TimerOn>:
 208:	8b e0       	ldi	r24, 0x0B	; 11
 20a:	80 93 81 00 	sts	0x0081, r24
 20e:	8d e7       	ldi	r24, 0x7D	; 125
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	90 93 89 00 	sts	0x0089, r25
 216:	80 93 88 00 	sts	0x0088, r24
 21a:	82 e0       	ldi	r24, 0x02	; 2
 21c:	80 93 6f 00 	sts	0x006F, r24
 220:	10 92 85 00 	sts	0x0085, r1
 224:	10 92 84 00 	sts	0x0084, r1
 228:	80 91 02 01 	lds	r24, 0x0102
 22c:	90 91 03 01 	lds	r25, 0x0103
 230:	a0 91 04 01 	lds	r26, 0x0104
 234:	b0 91 05 01 	lds	r27, 0x0105
 238:	80 93 2f 01 	sts	0x012F, r24
 23c:	90 93 30 01 	sts	0x0130, r25
 240:	a0 93 31 01 	sts	0x0131, r26
 244:	b0 93 32 01 	sts	0x0132, r27
 248:	8f b7       	in	r24, 0x3f	; 63
 24a:	80 68       	ori	r24, 0x80	; 128
 24c:	8f bf       	out	0x3f, r24	; 63
 24e:	08 95       	ret

00000250 <TimerISR>:
}

void TimerISR() {
	TimerFlag = 1;
 250:	81 e0       	ldi	r24, 0x01	; 1
 252:	80 93 33 01 	sts	0x0133, r24
 256:	08 95       	ret

00000258 <__vector_13>:
}

// In our approach, the C programmer does not touch this ISR, but rather TimerISR()
ISR(TIMER1_COMPA_vect)
{
 258:	1f 92       	push	r1
 25a:	0f 92       	push	r0
 25c:	0f b6       	in	r0, 0x3f	; 63
 25e:	0f 92       	push	r0
 260:	11 24       	eor	r1, r1
 262:	0b b6       	in	r0, 0x3b	; 59
 264:	0f 92       	push	r0
 266:	2f 93       	push	r18
 268:	3f 93       	push	r19
 26a:	4f 93       	push	r20
 26c:	5f 93       	push	r21
 26e:	6f 93       	push	r22
 270:	7f 93       	push	r23
 272:	8f 93       	push	r24
 274:	9f 93       	push	r25
 276:	af 93       	push	r26
 278:	bf 93       	push	r27
 27a:	ef 93       	push	r30
 27c:	ff 93       	push	r31
	// CPU automatically calls when TCNT0 == OCR0 (every 1 ms per TimerOn settings)
	_avr_timer_cntcurr--; 			// Count down to 0 rather than up to TOP
 27e:	80 91 2f 01 	lds	r24, 0x012F
 282:	90 91 30 01 	lds	r25, 0x0130
 286:	a0 91 31 01 	lds	r26, 0x0131
 28a:	b0 91 32 01 	lds	r27, 0x0132
 28e:	01 97       	sbiw	r24, 0x01	; 1
 290:	a1 09       	sbc	r26, r1
 292:	b1 09       	sbc	r27, r1
 294:	80 93 2f 01 	sts	0x012F, r24
 298:	90 93 30 01 	sts	0x0130, r25
 29c:	a0 93 31 01 	sts	0x0131, r26
 2a0:	b0 93 32 01 	sts	0x0132, r27
	if (_avr_timer_cntcurr == 0) { 	// results in a more efficient compare
 2a4:	89 2b       	or	r24, r25
 2a6:	8a 2b       	or	r24, r26
 2a8:	8b 2b       	or	r24, r27
 2aa:	89 f4       	brne	.+34     	; 0x2ce <__vector_13+0x76>
		TimerISR(); 				// Call the ISR that the user uses
 2ac:	d1 df       	rcall	.-94     	; 0x250 <TimerISR>
		_avr_timer_cntcurr = _avr_timer_M;
 2ae:	80 91 02 01 	lds	r24, 0x0102
 2b2:	90 91 03 01 	lds	r25, 0x0103
 2b6:	a0 91 04 01 	lds	r26, 0x0104
 2ba:	b0 91 05 01 	lds	r27, 0x0105
 2be:	80 93 2f 01 	sts	0x012F, r24
 2c2:	90 93 30 01 	sts	0x0130, r25
 2c6:	a0 93 31 01 	sts	0x0131, r26
 2ca:	b0 93 32 01 	sts	0x0132, r27
	}
}
 2ce:	ff 91       	pop	r31
 2d0:	ef 91       	pop	r30
 2d2:	bf 91       	pop	r27
 2d4:	af 91       	pop	r26
 2d6:	9f 91       	pop	r25
 2d8:	8f 91       	pop	r24
 2da:	7f 91       	pop	r23
 2dc:	6f 91       	pop	r22
 2de:	5f 91       	pop	r21
 2e0:	4f 91       	pop	r20
 2e2:	3f 91       	pop	r19
 2e4:	2f 91       	pop	r18
 2e6:	0f 90       	pop	r0
 2e8:	0b be       	out	0x3b, r0	; 59
 2ea:	0f 90       	pop	r0
 2ec:	0f be       	out	0x3f, r0	; 63
 2ee:	0f 90       	pop	r0
 2f0:	1f 90       	pop	r1
 2f2:	18 95       	reti

000002f4 <main>:
	return state;
}

int main(void)
{
	DDRD = 0xFF; PORTD = 0x00;
 2f4:	8f ef       	ldi	r24, 0xFF	; 255
 2f6:	8a b9       	out	0x0a, r24	; 10
 2f8:	1b b8       	out	0x0b, r1	; 11
	DDRA = 0xFF; PORTA = 0x00;
 2fa:	81 b9       	out	0x01, r24	; 1
 2fc:	12 b8       	out	0x02, r1	; 2
	//Declare an array of tasks
	static task task1;
	task *tasks[] = { &task1 };
	const unsigned short numTasks = sizeof(tasks)/sizeof(task*);
	//Task 1 -- ONLY TASK
	task1.state = -1;
 2fe:	80 93 34 01 	sts	0x0134, r24
	task1.period = SMTick1_period;
 302:	84 e1       	ldi	r24, 0x14	; 20
 304:	90 e0       	ldi	r25, 0x00	; 0
 306:	a0 e0       	ldi	r26, 0x00	; 0
 308:	b0 e0       	ldi	r27, 0x00	; 0
 30a:	80 93 35 01 	sts	0x0135, r24
 30e:	90 93 36 01 	sts	0x0136, r25
 312:	a0 93 37 01 	sts	0x0137, r26
 316:	b0 93 38 01 	sts	0x0138, r27
	task1.elapsedTime = SMTick1_period;
 31a:	80 93 39 01 	sts	0x0139, r24
 31e:	90 93 3a 01 	sts	0x013A, r25
 322:	a0 93 3b 01 	sts	0x013B, r26
 326:	b0 93 3c 01 	sts	0x013C, r27
	task1.TickFct = &tick_funct;
 32a:	87 ea       	ldi	r24, 0xA7	; 167
 32c:	90 e0       	ldi	r25, 0x00	; 0
 32e:	90 93 3e 01 	sts	0x013E, r25
 332:	80 93 3d 01 	sts	0x013D, r24
	

	// Set the timer and turn it on
	TimerSet(GCD);
 336:	64 e1       	ldi	r22, 0x14	; 20
 338:	70 e0       	ldi	r23, 0x00	; 0
 33a:	80 e0       	ldi	r24, 0x00	; 0
 33c:	90 e0       	ldi	r25, 0x00	; 0
 33e:	53 df       	rcall	.-346    	; 0x1e6 <TimerSet>
	TimerOn();
 340:	63 df       	rcall	.-314    	; 0x208 <TimerOn>
	LCD_init();
 342:	43 df       	rcall	.-378    	; 0x1ca <LCD_init>
	
	unsigned short i;
	while(1)
	{
		// Scheduler code
		for ( i = 0; i < numTasks; i++ )
 344:	80 e0       	ldi	r24, 0x00	; 0
 346:	90 e0       	ldi	r25, 0x00	; 0
 348:	c1 2c       	mov	r12, r1
 34a:	d1 2c       	mov	r13, r1
		{
			// Task is ready to tick
			if ( tasks[i]->elapsedTime == tasks[i]->period )
 34c:	c9 e3       	ldi	r28, 0x39	; 57
 34e:	d1 e0       	ldi	r29, 0x01	; 1
 350:	05 e3       	ldi	r16, 0x35	; 53
 352:	11 e0       	ldi	r17, 0x01	; 1
	
	unsigned short i;
	while(1)
	{
		// Scheduler code
		for ( i = 0; i < numTasks; i++ )
 354:	ee 24       	eor	r14, r14
 356:	e3 94       	inc	r14
 358:	f1 2c       	mov	r15, r1
		{
			// Task is ready to tick
			if ( tasks[i]->elapsedTime == tasks[i]->period )
			{
				// Setting next state for task
				tasks[i]->state = tasks[i]->TickFct(tasks[i]->state);
 35a:	0f 2e       	mov	r0, r31
 35c:	fd e3       	ldi	r31, 0x3D	; 61
 35e:	8f 2e       	mov	r8, r31
 360:	f1 e0       	ldi	r31, 0x01	; 1
 362:	9f 2e       	mov	r9, r31
 364:	f0 2d       	mov	r31, r0
 366:	0f 2e       	mov	r0, r31
 368:	f4 e3       	ldi	r31, 0x34	; 52
 36a:	af 2e       	mov	r10, r31
 36c:	f1 e0       	ldi	r31, 0x01	; 1
 36e:	bf 2e       	mov	r11, r31
 370:	f0 2d       	mov	r31, r0
 372:	29 c0       	rjmp	.+82     	; 0x3c6 <main+0xd2>
	{
		// Scheduler code
		for ( i = 0; i < numTasks; i++ )
		{
			// Task is ready to tick
			if ( tasks[i]->elapsedTime == tasks[i]->period )
 374:	48 81       	ld	r20, Y
 376:	59 81       	ldd	r21, Y+1	; 0x01
 378:	6a 81       	ldd	r22, Y+2	; 0x02
 37a:	7b 81       	ldd	r23, Y+3	; 0x03
 37c:	f8 01       	movw	r30, r16
 37e:	80 81       	ld	r24, Z
 380:	91 81       	ldd	r25, Z+1	; 0x01
 382:	a2 81       	ldd	r26, Z+2	; 0x02
 384:	b3 81       	ldd	r27, Z+3	; 0x03
 386:	48 17       	cp	r20, r24
 388:	59 07       	cpc	r21, r25
 38a:	6a 07       	cpc	r22, r26
 38c:	7b 07       	cpc	r23, r27
 38e:	79 f4       	brne	.+30     	; 0x3ae <main+0xba>
			{
				// Setting next state for task
				tasks[i]->state = tasks[i]->TickFct(tasks[i]->state);
 390:	d5 01       	movw	r26, r10
 392:	8c 91       	ld	r24, X
 394:	d4 01       	movw	r26, r8
 396:	ed 91       	ld	r30, X+
 398:	fc 91       	ld	r31, X
 39a:	99 27       	eor	r25, r25
 39c:	87 fd       	sbrc	r24, 7
 39e:	90 95       	com	r25
 3a0:	09 95       	icall
 3a2:	f5 01       	movw	r30, r10
 3a4:	80 83       	st	Z, r24
				// Reset elapsed time for next tick.
				tasks[i]->elapsedTime = 0;
 3a6:	18 82       	st	Y, r1
 3a8:	19 82       	std	Y+1, r1	; 0x01
 3aa:	1a 82       	std	Y+2, r1	; 0x02
 3ac:	1b 82       	std	Y+3, r1	; 0x03
			}
			tasks[i]->elapsedTime += 1;
 3ae:	88 81       	ld	r24, Y
 3b0:	99 81       	ldd	r25, Y+1	; 0x01
 3b2:	aa 81       	ldd	r26, Y+2	; 0x02
 3b4:	bb 81       	ldd	r27, Y+3	; 0x03
 3b6:	01 96       	adiw	r24, 0x01	; 1
 3b8:	a1 1d       	adc	r26, r1
 3ba:	b1 1d       	adc	r27, r1
 3bc:	88 83       	st	Y, r24
 3be:	99 83       	std	Y+1, r25	; 0x01
 3c0:	aa 83       	std	Y+2, r26	; 0x02
 3c2:	bb 83       	std	Y+3, r27	; 0x03
	
	unsigned short i;
	while(1)
	{
		// Scheduler code
		for ( i = 0; i < numTasks; i++ )
 3c4:	c7 01       	movw	r24, r14
 3c6:	89 2b       	or	r24, r25
 3c8:	a9 f2       	breq	.-86     	; 0x374 <main+0x80>
				tasks[i]->elapsedTime = 0;
			}
			tasks[i]->elapsedTime += 1;
		}
		//tick_funct();
		while (!TimerFlag);
 3ca:	80 91 33 01 	lds	r24, 0x0133
 3ce:	88 23       	and	r24, r24
 3d0:	e1 f3       	breq	.-8      	; 0x3ca <main+0xd6>
		TimerFlag = 0;
 3d2:	10 92 33 01 	sts	0x0133, r1
	
	unsigned short i;
	while(1)
	{
		// Scheduler code
		for ( i = 0; i < numTasks; i++ )
 3d6:	c6 01       	movw	r24, r12
			tasks[i]->elapsedTime += 1;
		}
		//tick_funct();
		while (!TimerFlag);
		TimerFlag = 0;
	}
 3d8:	f6 cf       	rjmp	.-20     	; 0x3c6 <main+0xd2>

000003da <__divmodhi4>:
 3da:	97 fb       	bst	r25, 7
 3dc:	07 2e       	mov	r0, r23
 3de:	16 f4       	brtc	.+4      	; 0x3e4 <__divmodhi4+0xa>
 3e0:	00 94       	com	r0
 3e2:	06 d0       	rcall	.+12     	; 0x3f0 <__divmodhi4_neg1>
 3e4:	77 fd       	sbrc	r23, 7
 3e6:	08 d0       	rcall	.+16     	; 0x3f8 <__divmodhi4_neg2>
 3e8:	0b d0       	rcall	.+22     	; 0x400 <__udivmodhi4>
 3ea:	07 fc       	sbrc	r0, 7
 3ec:	05 d0       	rcall	.+10     	; 0x3f8 <__divmodhi4_neg2>
 3ee:	3e f4       	brtc	.+14     	; 0x3fe <__divmodhi4_exit>

000003f0 <__divmodhi4_neg1>:
 3f0:	90 95       	com	r25
 3f2:	81 95       	neg	r24
 3f4:	9f 4f       	sbci	r25, 0xFF	; 255
 3f6:	08 95       	ret

000003f8 <__divmodhi4_neg2>:
 3f8:	70 95       	com	r23
 3fa:	61 95       	neg	r22
 3fc:	7f 4f       	sbci	r23, 0xFF	; 255

000003fe <__divmodhi4_exit>:
 3fe:	08 95       	ret

00000400 <__udivmodhi4>:
 400:	aa 1b       	sub	r26, r26
 402:	bb 1b       	sub	r27, r27
 404:	51 e1       	ldi	r21, 0x11	; 17
 406:	07 c0       	rjmp	.+14     	; 0x416 <__udivmodhi4_ep>

00000408 <__udivmodhi4_loop>:
 408:	aa 1f       	adc	r26, r26
 40a:	bb 1f       	adc	r27, r27
 40c:	a6 17       	cp	r26, r22
 40e:	b7 07       	cpc	r27, r23
 410:	10 f0       	brcs	.+4      	; 0x416 <__udivmodhi4_ep>
 412:	a6 1b       	sub	r26, r22
 414:	b7 0b       	sbc	r27, r23

00000416 <__udivmodhi4_ep>:
 416:	88 1f       	adc	r24, r24
 418:	99 1f       	adc	r25, r25
 41a:	5a 95       	dec	r21
 41c:	a9 f7       	brne	.-22     	; 0x408 <__udivmodhi4_loop>
 41e:	80 95       	com	r24
 420:	90 95       	com	r25
 422:	bc 01       	movw	r22, r24
 424:	cd 01       	movw	r24, r26
 426:	08 95       	ret

00000428 <_exit>:
 428:	f8 94       	cli

0000042a <__stop_program>:
 42a:	ff cf       	rjmp	.-2      	; 0x42a <__stop_program>
