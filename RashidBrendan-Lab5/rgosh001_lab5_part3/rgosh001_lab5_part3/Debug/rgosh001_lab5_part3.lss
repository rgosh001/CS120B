
rgosh001_lab5_part3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  000002da  0000036e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002da  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000c  00800104  00800104  00000372  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00000374  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000097  00000000  00000000  00000a40  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00000ad7  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000068  00000000  00000000  00000b06  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000325  00000000  00000000  00000b6e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000138  00000000  00000000  00000e93  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000306  00000000  00000000  00000fcb  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000000fc  00000000  00000000  000012d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000025a  00000000  00000000  000013d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000151  00000000  00000000  0000162a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000058  00000000  00000000  0000177b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	71 c0       	rjmp	.+226    	; 0x118 <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ea ed       	ldi	r30, 0xDA	; 218
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a4 30       	cpi	r26, 0x04	; 4
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a4 e0       	ldi	r26, 0x04	; 4
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a0 31       	cpi	r26, 0x10	; 16
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	dc d0       	rcall	.+440    	; 0x27c <main>
  c4:	08 c1       	rjmp	.+528    	; 0x2d6 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <TimerISR>:
	//Enable global interrupts: 0x80: 1000000
	SREG |= 0x80;
}
void TimerOff() {
	// bit3bit1bit0=000: timer off
	TCCR1B = 0x00;
  c8:	81 e0       	ldi	r24, 0x01	; 1
  ca:	80 93 0b 01 	sts	0x010B, r24
  ce:	08 95       	ret

000000d0 <TimerOn>:
  d0:	8b e0       	ldi	r24, 0x0B	; 11
  d2:	80 93 81 00 	sts	0x0081, r24
  d6:	8d e7       	ldi	r24, 0x7D	; 125
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	90 93 89 00 	sts	0x0089, r25
  de:	80 93 88 00 	sts	0x0088, r24
  e2:	82 e0       	ldi	r24, 0x02	; 2
  e4:	80 93 6f 00 	sts	0x006F, r24
  e8:	10 92 85 00 	sts	0x0085, r1
  ec:	10 92 84 00 	sts	0x0084, r1
  f0:	80 91 00 01 	lds	r24, 0x0100
  f4:	90 91 01 01 	lds	r25, 0x0101
  f8:	a0 91 02 01 	lds	r26, 0x0102
  fc:	b0 91 03 01 	lds	r27, 0x0103
 100:	80 93 04 01 	sts	0x0104, r24
 104:	90 93 05 01 	sts	0x0105, r25
 108:	a0 93 06 01 	sts	0x0106, r26
 10c:	b0 93 07 01 	sts	0x0107, r27
 110:	8f b7       	in	r24, 0x3f	; 63
 112:	80 68       	ori	r24, 0x80	; 128
 114:	8f bf       	out	0x3f, r24	; 63
 116:	08 95       	ret

00000118 <__vector_13>:
}

// In our approach, the C programmer does not touch this ISR, but rather TimerISR()
ISR(TIMER1_COMPA_vect) {
 118:	1f 92       	push	r1
 11a:	0f 92       	push	r0
 11c:	0f b6       	in	r0, 0x3f	; 63
 11e:	0f 92       	push	r0
 120:	11 24       	eor	r1, r1
 122:	0b b6       	in	r0, 0x3b	; 59
 124:	0f 92       	push	r0
 126:	2f 93       	push	r18
 128:	3f 93       	push	r19
 12a:	4f 93       	push	r20
 12c:	5f 93       	push	r21
 12e:	6f 93       	push	r22
 130:	7f 93       	push	r23
 132:	8f 93       	push	r24
 134:	9f 93       	push	r25
 136:	af 93       	push	r26
 138:	bf 93       	push	r27
 13a:	ef 93       	push	r30
 13c:	ff 93       	push	r31
	// CPU automatically calls when TCNT1 == OCR1
	// (every 1 ms per TimerOn settings)
	// Count down to 0 rather than up to TOP (results in a more efficient comparison)
	_avr_timer_cntcurr--;
 13e:	80 91 04 01 	lds	r24, 0x0104
 142:	90 91 05 01 	lds	r25, 0x0105
 146:	a0 91 06 01 	lds	r26, 0x0106
 14a:	b0 91 07 01 	lds	r27, 0x0107
 14e:	01 97       	sbiw	r24, 0x01	; 1
 150:	a1 09       	sbc	r26, r1
 152:	b1 09       	sbc	r27, r1
 154:	80 93 04 01 	sts	0x0104, r24
 158:	90 93 05 01 	sts	0x0105, r25
 15c:	a0 93 06 01 	sts	0x0106, r26
 160:	b0 93 07 01 	sts	0x0107, r27
	if (_avr_timer_cntcurr == 0) {
 164:	89 2b       	or	r24, r25
 166:	8a 2b       	or	r24, r26
 168:	8b 2b       	or	r24, r27
 16a:	89 f4       	brne	.+34     	; 0x18e <__vector_13+0x76>
		// Call the ISR that the user uses
		TimerISR();
 16c:	ad df       	rcall	.-166    	; 0xc8 <TimerISR>
		_avr_timer_cntcurr = _avr_timer_M;
 16e:	80 91 00 01 	lds	r24, 0x0100
 172:	90 91 01 01 	lds	r25, 0x0101
 176:	a0 91 02 01 	lds	r26, 0x0102
 17a:	b0 91 03 01 	lds	r27, 0x0103
 17e:	80 93 04 01 	sts	0x0104, r24
 182:	90 93 05 01 	sts	0x0105, r25
 186:	a0 93 06 01 	sts	0x0106, r26
 18a:	b0 93 07 01 	sts	0x0107, r27
	}
}
 18e:	ff 91       	pop	r31
 190:	ef 91       	pop	r30
 192:	bf 91       	pop	r27
 194:	af 91       	pop	r26
 196:	9f 91       	pop	r25
 198:	8f 91       	pop	r24
 19a:	7f 91       	pop	r23
 19c:	6f 91       	pop	r22
 19e:	5f 91       	pop	r21
 1a0:	4f 91       	pop	r20
 1a2:	3f 91       	pop	r19
 1a4:	2f 91       	pop	r18
 1a6:	0f 90       	pop	r0
 1a8:	0b be       	out	0x3b, r0	; 59
 1aa:	0f 90       	pop	r0
 1ac:	0f be       	out	0x3f, r0	; 63
 1ae:	0f 90       	pop	r0
 1b0:	1f 90       	pop	r1
 1b2:	18 95       	reti

000001b4 <TimerSet>:
// Set TimerISR() to tick every M ms
void TimerSet(unsigned long M) {
	_avr_timer_M = M;
 1b4:	60 93 00 01 	sts	0x0100, r22
 1b8:	70 93 01 01 	sts	0x0101, r23
 1bc:	80 93 02 01 	sts	0x0102, r24
 1c0:	90 93 03 01 	sts	0x0103, r25
	_avr_timer_cntcurr = _avr_timer_M;
 1c4:	60 93 04 01 	sts	0x0104, r22
 1c8:	70 93 05 01 	sts	0x0105, r23
 1cc:	80 93 06 01 	sts	0x0106, r24
 1d0:	90 93 07 01 	sts	0x0107, r25
 1d4:	08 95       	ret

000001d6 <speaker>:
}

enum sounds {sound_off, sound_on} sound;
void speaker()
{
	unsigned char button = ~PINA & 0x04; //connects PA0 to A0
 1d6:	90 b1       	in	r25, 0x00	; 0
	switch(sound)
 1d8:	80 91 0f 01 	lds	r24, 0x010F
 1dc:	88 23       	and	r24, r24
 1de:	19 f0       	breq	.+6      	; 0x1e6 <speaker+0x10>
		break;
		
		case sound_on:
		if(1)
		{
			sound = sound_off;
 1e0:	10 92 0f 01 	sts	0x010F, r1
 1e4:	09 c0       	rjmp	.+18     	; 0x1f8 <speaker+0x22>
{
	unsigned char button = ~PINA & 0x04; //connects PA0 to A0
	switch(sound)
	{
		case sound_off:
		if(button)
 1e6:	92 fd       	sbrc	r25, 2
 1e8:	07 c0       	rjmp	.+14     	; 0x1f8 <speaker+0x22>
		{
			sound = sound_on;
 1ea:	81 e0       	ldi	r24, 0x01	; 1
 1ec:	80 93 0f 01 	sts	0x010F, r24
		case sound_off:
		speaker_var = 0x00;
		break;
		
		case sound_on:
		speaker_var = 0x10;
 1f0:	80 e1       	ldi	r24, 0x10	; 16
 1f2:	80 93 08 01 	sts	0x0108, r24
		break;
 1f6:	08 95       	ret
	}
	
	switch (sound)
	{
		case sound_off:
		speaker_var = 0x00;
 1f8:	10 92 08 01 	sts	0x0108, r1
 1fc:	08 95       	ret

000001fe <ThreeLEDs>:
}

enum three_states {led_b0, led_b1, led_b2} three_state;
void ThreeLEDs()
{
	switch (three_state)
 1fe:	80 91 0d 01 	lds	r24, 0x010D
 202:	81 30       	cpi	r24, 0x01	; 1
 204:	71 f0       	breq	.+28     	; 0x222 <ThreeLEDs+0x24>
 206:	30 f0       	brcs	.+12     	; 0x214 <ThreeLEDs+0x16>
		break;
		
		case led_b2:
		if(1)
		{
			three_state = led_b0;
 208:	10 92 0d 01 	sts	0x010D, r1
	}
	
	switch(three_state)
	{
		case led_b0:
		ThreeLED_value = 0x01;
 20c:	81 e0       	ldi	r24, 0x01	; 1
 20e:	80 93 0a 01 	sts	0x010A, r24
		break;
 212:	08 95       	ret
	switch (three_state)
	{
		case led_b0:
		if(1)
		{
			three_state = led_b1;
 214:	81 e0       	ldi	r24, 0x01	; 1
 216:	80 93 0d 01 	sts	0x010D, r24
		case led_b0:
		ThreeLED_value = 0x01;
		break;
		
		case led_b1:
		ThreeLED_value = 0x02;
 21a:	82 e0       	ldi	r24, 0x02	; 2
 21c:	80 93 0a 01 	sts	0x010A, r24
		break;
 220:	08 95       	ret
		break;
		
		case led_b1:
		if(1)
		{
			three_state = led_b2;
 222:	82 e0       	ldi	r24, 0x02	; 2
 224:	80 93 0d 01 	sts	0x010D, r24
		case led_b1:
		ThreeLED_value = 0x02;
		break;
		
		case led_b2:
		ThreeLED_value = 0x04;
 228:	84 e0       	ldi	r24, 0x04	; 4
 22a:	80 93 0a 01 	sts	0x010A, r24
 22e:	08 95       	ret

00000230 <BlinkingLEDs>:
}

enum blinking_states {blink_on, blink_off} blinking_state;
void BlinkingLEDs()
{
	switch (blinking_state)
 230:	80 91 0e 01 	lds	r24, 0x010E
 234:	88 23       	and	r24, r24
 236:	19 f0       	breq	.+6      	; 0x23e <BlinkingLEDs+0xe>
 238:	81 30       	cpi	r24, 0x01	; 1
 23a:	59 f4       	brne	.+22     	; 0x252 <BlinkingLEDs+0x22>
 23c:	04 c0       	rjmp	.+8      	; 0x246 <BlinkingLEDs+0x16>
	{
		case blink_on:
		if(1)
		{
			blinking_state = blink_off;
 23e:	81 e0       	ldi	r24, 0x01	; 1
 240:	80 93 0e 01 	sts	0x010E, r24
		}
		break;
 244:	09 c0       	rjmp	.+18     	; 0x258 <BlinkingLEDs+0x28>
		
		case blink_off:
		if(1)
		{
			blinking_state = blink_on;
 246:	10 92 0e 01 	sts	0x010E, r1
	}
	
	switch(blinking_state)
	{
		case blink_on:
		BlinkingLED_value = 0x08;
 24a:	88 e0       	ldi	r24, 0x08	; 8
 24c:	80 93 09 01 	sts	0x0109, r24
		break;
 250:	08 95       	ret
			blinking_state = blink_on;
		}
		break;
		
		default:
		blinking_state = blink_off;
 252:	81 e0       	ldi	r24, 0x01	; 1
 254:	80 93 0e 01 	sts	0x010E, r24
		case blink_on:
		BlinkingLED_value = 0x08;
		break;
		
		case blink_off:
		BlinkingLED_value = 0x00;
 258:	10 92 09 01 	sts	0x0109, r1
 25c:	08 95       	ret

0000025e <CombineLEDs>:
}

enum combine_states {repeat} combine_state;
void CombineLEDs()
{
	switch (combine_state)
 25e:	80 91 0c 01 	lds	r24, 0x010C
 262:	81 11       	cpse	r24, r1
			combine_state = repeat;
		}
		break;
		
		default:
		combine_state = repeat;
 264:	10 92 0c 01 	sts	0x010C, r1
	switch (combine_state)
	{
		case repeat:
		//unsigned char temp;
		//temp = (ThreeLED_value & BlinkingLED_value);
		PORTB = (ThreeLED_value | BlinkingLED_value | speaker_var);
 268:	90 91 09 01 	lds	r25, 0x0109
 26c:	80 91 0a 01 	lds	r24, 0x010A
 270:	89 2b       	or	r24, r25
 272:	90 91 08 01 	lds	r25, 0x0108
 276:	89 2b       	or	r24, r25
 278:	85 b9       	out	0x05, r24	; 5
 27a:	08 95       	ret

0000027c <main>:
	}
}

int main(void)
{
	DDRA = 0x00; PORTA = 0xFF;
 27c:	11 b8       	out	0x01, r1	; 1
 27e:	8f ef       	ldi	r24, 0xFF	; 255
 280:	82 b9       	out	0x02, r24	; 2
	DDRB = 0xFF; PORTB = 0x00;
 282:	84 b9       	out	0x04, r24	; 4
 284:	15 b8       	out	0x05, r1	; 5
	
	TimerSet(2);
 286:	62 e0       	ldi	r22, 0x02	; 2
 288:	70 e0       	ldi	r23, 0x00	; 0
 28a:	80 e0       	ldi	r24, 0x00	; 0
 28c:	90 e0       	ldi	r25, 0x00	; 0
 28e:	92 df       	rcall	.-220    	; 0x1b4 <TimerSet>
	TimerOn();
 290:	1f df       	rcall	.-450    	; 0xd0 <TimerOn>
	three_state = led_b0;
 292:	10 92 0d 01 	sts	0x010D, r1
	blinking_state = blink_on;
 296:	10 92 0e 01 	sts	0x010E, r1
	combine_state = repeat;
 29a:	10 92 0c 01 	sts	0x010C, r1
	
    while(1)
    {
		three_count++;
		blink_count++;
		speaker();
 29e:	9b df       	rcall	.-202    	; 0x1d6 <speaker>
	int blink_count = 0;
	
    while(1)
    {
		three_count++;
		blink_count++;
 2a0:	c1 e0       	ldi	r28, 0x01	; 1
 2a2:	d0 e0       	ldi	r29, 0x00	; 0
	unsigned char three_count = 0;
	int blink_count = 0;
	
    while(1)
    {
		three_count++;
 2a4:	11 e0       	ldi	r17, 0x01	; 1
		blink_count++;
		speaker();
		if(blink_count == 500)
		{
			BlinkingLEDs();
			blink_count = 0;
 2a6:	e1 2c       	mov	r14, r1
 2a8:	f1 2c       	mov	r15, r1
 2aa:	06 c0       	rjmp	.+12     	; 0x2b8 <main+0x3c>
		three_count++;
		blink_count++;
		speaker();
		if(blink_count == 500)
		{
			BlinkingLEDs();
 2ac:	c1 df       	rcall	.-126    	; 0x230 <BlinkingLEDs>
			blink_count = 0;
 2ae:	e7 01       	movw	r28, r14
		}
		if(three_count == 150)
 2b0:	16 39       	cpi	r17, 0x96	; 150
 2b2:	11 f4       	brne	.+4      	; 0x2b8 <main+0x3c>
		{
			ThreeLEDs();
 2b4:	a4 df       	rcall	.-184    	; 0x1fe <ThreeLEDs>
			three_count = 0;
 2b6:	10 e0       	ldi	r17, 0x00	; 0
		}
		CombineLEDs();
 2b8:	d2 df       	rcall	.-92     	; 0x25e <CombineLEDs>
		while(!TimerFlag){}
 2ba:	80 91 0b 01 	lds	r24, 0x010B
 2be:	88 23       	and	r24, r24
 2c0:	e1 f3       	breq	.-8      	; 0x2ba <main+0x3e>
		TimerFlag = 0;
 2c2:	10 92 0b 01 	sts	0x010B, r1
	unsigned char three_count = 0;
	int blink_count = 0;
	
    while(1)
    {
		three_count++;
 2c6:	1f 5f       	subi	r17, 0xFF	; 255
		blink_count++;
 2c8:	21 96       	adiw	r28, 0x01	; 1
		speaker();
 2ca:	85 df       	rcall	.-246    	; 0x1d6 <speaker>
		if(blink_count == 500)
 2cc:	c4 3f       	cpi	r28, 0xF4	; 244
 2ce:	81 e0       	ldi	r24, 0x01	; 1
 2d0:	d8 07       	cpc	r29, r24
 2d2:	71 f7       	brne	.-36     	; 0x2b0 <main+0x34>
 2d4:	eb cf       	rjmp	.-42     	; 0x2ac <main+0x30>

000002d6 <_exit>:
 2d6:	f8 94       	cli

000002d8 <__stop_program>:
 2d8:	ff cf       	rjmp	.-2      	; 0x2d8 <__stop_program>
