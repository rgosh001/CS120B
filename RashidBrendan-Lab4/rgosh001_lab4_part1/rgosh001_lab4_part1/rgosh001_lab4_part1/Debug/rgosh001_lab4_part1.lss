
rgosh001_lab4_part1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  0000036a  000003fe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000036a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000009  00800104  00800104  00000402  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00000404  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000097  00000000  00000000  00000ad0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00000b67  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000088  00000000  00000000  00000b96  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000004ff  00000000  00000000  00000c1e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000016b  00000000  00000000  0000111d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000490  00000000  00000000  00001288  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  0000014c  00000000  00000000  00001718  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000020e  00000000  00000000  00001864  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000295  00000000  00000000  00001a72  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000078  00000000  00000000  00001d07  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	9d c0       	rjmp	.+314    	; 0x170 <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ea e6       	ldi	r30, 0x6A	; 106
  a0:	f3 e0       	ldi	r31, 0x03	; 3
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a4 30       	cpi	r26, 0x04	; 4
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a4 e0       	ldi	r26, 0x04	; 4
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ad 30       	cpi	r26, 0x0D	; 13
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	37 d1       	rcall	.+622    	; 0x332 <main>
  c4:	50 c1       	rjmp	.+672    	; 0x366 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <delay_ms>:
	//Enable global interrupts: 0x80: 1000000
	SREG |= 0x80;
}
void TimerOff() {
	// bit3bit1bit0=000: timer off
	TCCR1B = 0x00;
  c8:	18 16       	cp	r1, r24
  ca:	19 06       	cpc	r1, r25
  cc:	5c f0       	brlt	.+22     	; 0xe4 <delay_ms+0x1c>
  ce:	08 95       	ret
  d0:	00 00       	nop
  d2:	21 50       	subi	r18, 0x01	; 1
  d4:	31 09       	sbc	r19, r1
  d6:	e1 f7       	brne	.-8      	; 0xd0 <delay_ms+0x8>
  d8:	4f 5f       	subi	r20, 0xFF	; 255
  da:	5f 4f       	sbci	r21, 0xFF	; 255
  dc:	48 17       	cp	r20, r24
  de:	59 07       	cpc	r21, r25
  e0:	29 f4       	brne	.+10     	; 0xec <delay_ms+0x24>
  e2:	08 95       	ret
  e4:	40 e0       	ldi	r20, 0x00	; 0
  e6:	50 e0       	ldi	r21, 0x00	; 0
  e8:	67 e0       	ldi	r22, 0x07	; 7
  ea:	73 e0       	ldi	r23, 0x03	; 3
  ec:	9b 01       	movw	r18, r22
  ee:	f0 cf       	rjmp	.-32     	; 0xd0 <delay_ms+0x8>

000000f0 <LCD_WriteData>:
  f0:	10 9a       	sbi	0x02, 0	; 2
  f2:	8b b9       	out	0x0b, r24	; 11
  f4:	11 9a       	sbi	0x02, 1	; 2
  f6:	00 00       	nop
  f8:	11 98       	cbi	0x02, 1	; 2
  fa:	81 e0       	ldi	r24, 0x01	; 1
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	e4 cf       	rjmp	.-56     	; 0xc8 <delay_ms>

00000100 <LCD_WriteCommand>:
 100:	10 98       	cbi	0x02, 0	; 2
 102:	8b b9       	out	0x0b, r24	; 11
 104:	11 9a       	sbi	0x02, 1	; 2
 106:	00 00       	nop
 108:	11 98       	cbi	0x02, 1	; 2
 10a:	82 e0       	ldi	r24, 0x02	; 2
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	dc cf       	rjmp	.-72     	; 0xc8 <delay_ms>

00000110 <LCD_Cursor>:
 110:	81 31       	cpi	r24, 0x11	; 17
 112:	10 f4       	brcc	.+4      	; 0x118 <LCD_Cursor+0x8>
 114:	81 58       	subi	r24, 0x81	; 129
 116:	f4 cf       	rjmp	.-24     	; 0x100 <LCD_WriteCommand>
 118:	81 55       	subi	r24, 0x51	; 81
 11a:	f2 cf       	rjmp	.-28     	; 0x100 <LCD_WriteCommand>

0000011c <LCD_ClearScreen>:
 11c:	81 e0       	ldi	r24, 0x01	; 1
 11e:	f0 cf       	rjmp	.-32     	; 0x100 <LCD_WriteCommand>

00000120 <TimerOn>:
 120:	8b e0       	ldi	r24, 0x0B	; 11
 122:	80 93 81 00 	sts	0x0081, r24
 126:	8d e7       	ldi	r24, 0x7D	; 125
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	90 93 89 00 	sts	0x0089, r25
 12e:	80 93 88 00 	sts	0x0088, r24
 132:	82 e0       	ldi	r24, 0x02	; 2
 134:	80 93 6f 00 	sts	0x006F, r24
 138:	10 92 85 00 	sts	0x0085, r1
 13c:	10 92 84 00 	sts	0x0084, r1
 140:	80 91 00 01 	lds	r24, 0x0100
 144:	90 91 01 01 	lds	r25, 0x0101
 148:	a0 91 02 01 	lds	r26, 0x0102
 14c:	b0 91 03 01 	lds	r27, 0x0103
 150:	80 93 07 01 	sts	0x0107, r24
 154:	90 93 08 01 	sts	0x0108, r25
 158:	a0 93 09 01 	sts	0x0109, r26
 15c:	b0 93 0a 01 	sts	0x010A, r27
 160:	8f b7       	in	r24, 0x3f	; 63
 162:	80 68       	ori	r24, 0x80	; 128
 164:	8f bf       	out	0x3f, r24	; 63
 166:	08 95       	ret

00000168 <TimerISR>:
}
void TimerISR() {
	TimerFlag = 1;
 168:	81 e0       	ldi	r24, 0x01	; 1
 16a:	80 93 0b 01 	sts	0x010B, r24
 16e:	08 95       	ret

00000170 <__vector_13>:
}
// In our approach, the C programmer does not touch this ISR, but rather TimerISR()
ISR(TIMER1_COMPA_vect) {
 170:	1f 92       	push	r1
 172:	0f 92       	push	r0
 174:	0f b6       	in	r0, 0x3f	; 63
 176:	0f 92       	push	r0
 178:	11 24       	eor	r1, r1
 17a:	0b b6       	in	r0, 0x3b	; 59
 17c:	0f 92       	push	r0
 17e:	2f 93       	push	r18
 180:	3f 93       	push	r19
 182:	4f 93       	push	r20
 184:	5f 93       	push	r21
 186:	6f 93       	push	r22
 188:	7f 93       	push	r23
 18a:	8f 93       	push	r24
 18c:	9f 93       	push	r25
 18e:	af 93       	push	r26
 190:	bf 93       	push	r27
 192:	ef 93       	push	r30
 194:	ff 93       	push	r31
	// CPU automatically calls when TCNT1 == OCR1
	// (every 1 ms per TimerOn settings)
	// Count down to 0 rather than up to TOP (results in a more efficient comparison)
	_avr_timer_cntcurr--;
 196:	80 91 07 01 	lds	r24, 0x0107
 19a:	90 91 08 01 	lds	r25, 0x0108
 19e:	a0 91 09 01 	lds	r26, 0x0109
 1a2:	b0 91 0a 01 	lds	r27, 0x010A
 1a6:	01 97       	sbiw	r24, 0x01	; 1
 1a8:	a1 09       	sbc	r26, r1
 1aa:	b1 09       	sbc	r27, r1
 1ac:	80 93 07 01 	sts	0x0107, r24
 1b0:	90 93 08 01 	sts	0x0108, r25
 1b4:	a0 93 09 01 	sts	0x0109, r26
 1b8:	b0 93 0a 01 	sts	0x010A, r27
	if (_avr_timer_cntcurr == 0) {
 1bc:	89 2b       	or	r24, r25
 1be:	8a 2b       	or	r24, r26
 1c0:	8b 2b       	or	r24, r27
 1c2:	89 f4       	brne	.+34     	; 0x1e6 <__vector_13+0x76>
		// Call the ISR that the user uses
		TimerISR();
 1c4:	d1 df       	rcall	.-94     	; 0x168 <TimerISR>
		_avr_timer_cntcurr = _avr_timer_M;
 1c6:	80 91 00 01 	lds	r24, 0x0100
 1ca:	90 91 01 01 	lds	r25, 0x0101
 1ce:	a0 91 02 01 	lds	r26, 0x0102
 1d2:	b0 91 03 01 	lds	r27, 0x0103
 1d6:	80 93 07 01 	sts	0x0107, r24
 1da:	90 93 08 01 	sts	0x0108, r25
 1de:	a0 93 09 01 	sts	0x0109, r26
 1e2:	b0 93 0a 01 	sts	0x010A, r27
	}
}
 1e6:	ff 91       	pop	r31
 1e8:	ef 91       	pop	r30
 1ea:	bf 91       	pop	r27
 1ec:	af 91       	pop	r26
 1ee:	9f 91       	pop	r25
 1f0:	8f 91       	pop	r24
 1f2:	7f 91       	pop	r23
 1f4:	6f 91       	pop	r22
 1f6:	5f 91       	pop	r21
 1f8:	4f 91       	pop	r20
 1fa:	3f 91       	pop	r19
 1fc:	2f 91       	pop	r18
 1fe:	0f 90       	pop	r0
 200:	0b be       	out	0x3b, r0	; 59
 202:	0f 90       	pop	r0
 204:	0f be       	out	0x3f, r0	; 63
 206:	0f 90       	pop	r0
 208:	1f 90       	pop	r1
 20a:	18 95       	reti

0000020c <TimerSet>:
// Set TimerISR() to tick every M ms
void TimerSet(unsigned long M) {
	_avr_timer_M = M;
 20c:	60 93 00 01 	sts	0x0100, r22
 210:	70 93 01 01 	sts	0x0101, r23
 214:	80 93 02 01 	sts	0x0102, r24
 218:	90 93 03 01 	sts	0x0103, r25
	_avr_timer_cntcurr = _avr_timer_M;
 21c:	60 93 07 01 	sts	0x0107, r22
 220:	70 93 08 01 	sts	0x0108, r23
 224:	80 93 09 01 	sts	0x0109, r24
 228:	90 93 0a 01 	sts	0x010A, r25
 22c:	08 95       	ret

0000022e <TickFct_State_machine_1>:
unsigned char button0 = 0x00;
unsigned char button1 = 0x00;
unsigned char total = 0;

void TickFct_State_machine_1() {
	button0 = ~PINA & 0x01; //connects PA0 to A0
 22e:	90 b1       	in	r25, 0x00	; 0
 230:	90 95       	com	r25
 232:	91 70       	andi	r25, 0x01	; 1
 234:	90 93 06 01 	sts	0x0106, r25
	button1 = ~PINA & 0x02; //connects PA1 to A1
 238:	20 b1       	in	r18, 0x00	; 0
 23a:	20 95       	com	r18
 23c:	22 70       	andi	r18, 0x02	; 2
 23e:	20 93 05 01 	sts	0x0105, r18
	
	switch(SM1_State) { // Transitions
 242:	80 91 0c 01 	lds	r24, 0x010C
 246:	81 30       	cpi	r24, 0x01	; 1
 248:	59 f0       	breq	.+22     	; 0x260 <TickFct_State_machine_1+0x32>
 24a:	30 f0       	brcs	.+12     	; 0x258 <TickFct_State_machine_1+0x2a>
 24c:	82 30       	cpi	r24, 0x02	; 2
 24e:	51 f1       	breq	.+84     	; 0x2a4 <TickFct_State_machine_1+0x76>
 250:	83 30       	cpi	r24, 0x03	; 3
 252:	09 f0       	breq	.+2      	; 0x256 <TickFct_State_machine_1+0x28>
 254:	49 c0       	rjmp	.+146    	; 0x2e8 <TickFct_State_machine_1+0xba>
 256:	38 c0       	rjmp	.+112    	; 0x2c8 <TickFct_State_machine_1+0x9a>
		
		case init:
		if (1) {
			SM1_State = stay;
 258:	81 e0       	ldi	r24, 0x01	; 1
 25a:	80 93 0c 01 	sts	0x010C, r24
		}
		break;
 25e:	54 c0       	rjmp	.+168    	; 0x308 <TickFct_State_machine_1+0xda>
		
		case stay:
		if (button0 && button1) {
 260:	99 23       	and	r25, r25
 262:	89 f0       	breq	.+34     	; 0x286 <TickFct_State_machine_1+0x58>
 264:	22 23       	and	r18, r18
 266:	19 f0       	breq	.+6      	; 0x26e <TickFct_State_machine_1+0x40>
			SM1_State = init;
 268:	10 92 0c 01 	sts	0x010C, r1
 26c:	4a c0       	rjmp	.+148    	; 0x302 <TickFct_State_machine_1+0xd4>
		}
		else if (button0 && !button1) {
			SM1_State = inc;
 26e:	82 e0       	ldi	r24, 0x02	; 2
 270:	80 93 0c 01 	sts	0x010C, r24
			if (total < 9)
 274:	80 91 04 01 	lds	r24, 0x0104
 278:	89 30       	cpi	r24, 0x09	; 9
 27a:	08 f0       	brcs	.+2      	; 0x27e <TickFct_State_machine_1+0x50>
 27c:	4b c0       	rjmp	.+150    	; 0x314 <TickFct_State_machine_1+0xe6>
			{
				total = total + 1;
 27e:	8f 5f       	subi	r24, 0xFF	; 255
 280:	80 93 04 01 	sts	0x0104, r24
 284:	34 c0       	rjmp	.+104    	; 0x2ee <TickFct_State_machine_1+0xc0>
			}
		}
		else if (!button0 && button1) {
 286:	22 23       	and	r18, r18
 288:	09 f4       	brne	.+2      	; 0x28c <TickFct_State_machine_1+0x5e>
 28a:	3e c0       	rjmp	.+124    	; 0x308 <TickFct_State_machine_1+0xda>
			SM1_State = dec;
 28c:	83 e0       	ldi	r24, 0x03	; 3
 28e:	80 93 0c 01 	sts	0x010C, r24
			if (total > 0)
 292:	80 91 04 01 	lds	r24, 0x0104
 296:	88 23       	and	r24, r24
 298:	09 f4       	brne	.+2      	; 0x29c <TickFct_State_machine_1+0x6e>
 29a:	43 c0       	rjmp	.+134    	; 0x322 <TickFct_State_machine_1+0xf4>
			{
				total = total - 1;
 29c:	81 50       	subi	r24, 0x01	; 1
 29e:	80 93 04 01 	sts	0x0104, r24
 2a2:	25 c0       	rjmp	.+74     	; 0x2ee <TickFct_State_machine_1+0xc0>
			SM1_State = stay;
		}
		break;
		
		case inc:
		if (button0 && !button1)
 2a4:	99 23       	and	r25, r25
 2a6:	51 f0       	breq	.+20     	; 0x2bc <TickFct_State_machine_1+0x8e>
 2a8:	21 11       	cpse	r18, r1
 2aa:	34 c0       	rjmp	.+104    	; 0x314 <TickFct_State_machine_1+0xe6>
		{
			SM1_State = inc;
			if (total < 9)
 2ac:	80 91 04 01 	lds	r24, 0x0104
 2b0:	89 30       	cpi	r24, 0x09	; 9
 2b2:	80 f5       	brcc	.+96     	; 0x314 <TickFct_State_machine_1+0xe6>
			{
				total = total + 1;
 2b4:	8f 5f       	subi	r24, 0xFF	; 255
 2b6:	80 93 04 01 	sts	0x0104, r24
 2ba:	19 c0       	rjmp	.+50     	; 0x2ee <TickFct_State_machine_1+0xc0>
			}
		}
		else if (!button0 && !button1)
 2bc:	21 11       	cpse	r18, r1
 2be:	2a c0       	rjmp	.+84     	; 0x314 <TickFct_State_machine_1+0xe6>
		{
			SM1_State = stay;
 2c0:	81 e0       	ldi	r24, 0x01	; 1
 2c2:	80 93 0c 01 	sts	0x010C, r24
 2c6:	20 c0       	rjmp	.+64     	; 0x308 <TickFct_State_machine_1+0xda>
		}
		break;
		
		case dec:
		if (!button0 && button1)
 2c8:	91 11       	cpse	r25, r1
 2ca:	2b c0       	rjmp	.+86     	; 0x322 <TickFct_State_machine_1+0xf4>
 2cc:	22 23       	and	r18, r18
 2ce:	41 f0       	breq	.+16     	; 0x2e0 <TickFct_State_machine_1+0xb2>
		{
			SM1_State = dec;
			if (total > 0)
 2d0:	80 91 04 01 	lds	r24, 0x0104
 2d4:	88 23       	and	r24, r24
 2d6:	29 f1       	breq	.+74     	; 0x322 <TickFct_State_machine_1+0xf4>
			{
				total = total - 1;
 2d8:	81 50       	subi	r24, 0x01	; 1
 2da:	80 93 04 01 	sts	0x0104, r24
 2de:	07 c0       	rjmp	.+14     	; 0x2ee <TickFct_State_machine_1+0xc0>
			}
		}
		else if (!button0 && !button1)
		{
			SM1_State = stay;
 2e0:	81 e0       	ldi	r24, 0x01	; 1
 2e2:	80 93 0c 01 	sts	0x010C, r24
 2e6:	10 c0       	rjmp	.+32     	; 0x308 <TickFct_State_machine_1+0xda>
		}
		break;
	
		default:
		SM1_State = init;
 2e8:	10 92 0c 01 	sts	0x010C, r1
 2ec:	0a c0       	rjmp	.+20     	; 0x302 <TickFct_State_machine_1+0xd4>
	} // Transitions

	switch(SM1_State) { // State actions
 2ee:	80 91 0c 01 	lds	r24, 0x010C
 2f2:	81 30       	cpi	r24, 0x01	; 1
 2f4:	49 f0       	breq	.+18     	; 0x308 <TickFct_State_machine_1+0xda>
 2f6:	28 f0       	brcs	.+10     	; 0x302 <TickFct_State_machine_1+0xd4>
 2f8:	82 30       	cpi	r24, 0x02	; 2
 2fa:	61 f0       	breq	.+24     	; 0x314 <TickFct_State_machine_1+0xe6>
 2fc:	83 30       	cpi	r24, 0x03	; 3
 2fe:	c1 f4       	brne	.+48     	; 0x330 <TickFct_State_machine_1+0x102>
 300:	10 c0       	rjmp	.+32     	; 0x322 <TickFct_State_machine_1+0xf4>
		case init:
		total = 0;
 302:	10 92 04 01 	sts	0x0104, r1
		LCD_ClearScreen();
		break;
 306:	0a cf       	rjmp	.-492    	; 0x11c <LCD_ClearScreen>
		
		case stay:
		LCD_Cursor(1);
 308:	81 e0       	ldi	r24, 0x01	; 1
 30a:	02 df       	rcall	.-508    	; 0x110 <LCD_Cursor>
		LCD_WriteData(total + '0');
 30c:	80 91 04 01 	lds	r24, 0x0104
 310:	80 5d       	subi	r24, 0xD0	; 208
		break;
 312:	ee ce       	rjmp	.-548    	; 0xf0 <LCD_WriteData>
		
		case inc:
		LCD_ClearScreen();
 314:	03 df       	rcall	.-506    	; 0x11c <LCD_ClearScreen>
		LCD_Cursor(1);
 316:	81 e0       	ldi	r24, 0x01	; 1
 318:	fb de       	rcall	.-522    	; 0x110 <LCD_Cursor>
		LCD_WriteData(total + '0');
 31a:	80 91 04 01 	lds	r24, 0x0104
 31e:	80 5d       	subi	r24, 0xD0	; 208
		break;
 320:	e7 ce       	rjmp	.-562    	; 0xf0 <LCD_WriteData>
		
		case dec:
		LCD_ClearScreen();
 322:	fc de       	rcall	.-520    	; 0x11c <LCD_ClearScreen>
		LCD_Cursor(1);
 324:	81 e0       	ldi	r24, 0x01	; 1
 326:	f4 de       	rcall	.-536    	; 0x110 <LCD_Cursor>
		LCD_WriteData(total + '0');
 328:	80 91 04 01 	lds	r24, 0x0104
 32c:	80 5d       	subi	r24, 0xD0	; 208
 32e:	e0 ce       	rjmp	.-576    	; 0xf0 <LCD_WriteData>
 330:	08 95       	ret

00000332 <main>:

}

int main(void) {

	DDRA = 0x00; PORTA = 0xFF;
 332:	11 b8       	out	0x01, r1	; 1
 334:	8f ef       	ldi	r24, 0xFF	; 255
 336:	82 b9       	out	0x02, r24	; 2
	DDRC = 0xFF; PORTC = 0x00;
 338:	87 b9       	out	0x07, r24	; 7
 33a:	18 b8       	out	0x08, r1	; 8
	DDRD = 0xFF; PORTD = 0x00;
 33c:	8a b9       	out	0x0a, r24	; 10
 33e:	1b b8       	out	0x0b, r1	; 11
	
	TimerSet(1000);
 340:	68 ee       	ldi	r22, 0xE8	; 232
 342:	73 e0       	ldi	r23, 0x03	; 3
 344:	80 e0       	ldi	r24, 0x00	; 0
 346:	90 e0       	ldi	r25, 0x00	; 0
 348:	61 df       	rcall	.-318    	; 0x20c <TimerSet>
	TimerOn();
 34a:	ea de       	rcall	.-556    	; 0x120 <TimerOn>
	
	SM1_State = init; // Initial state
 34c:	10 92 0c 01 	sts	0x010C, r1
	
	LCD_ClearScreen();
 350:	e5 de       	rcall	.-566    	; 0x11c <LCD_ClearScreen>
	LCD_Cursor(1);
 352:	81 e0       	ldi	r24, 0x01	; 1
 354:	dd de       	rcall	.-582    	; 0x110 <LCD_Cursor>
	while(1) {
		TickFct_State_machine_1();
 356:	6b df       	rcall	.-298    	; 0x22e <TickFct_State_machine_1>
		while(!TimerFlag);
 358:	80 91 0b 01 	lds	r24, 0x010B
 35c:	88 23       	and	r24, r24
 35e:	e1 f3       	breq	.-8      	; 0x358 <main+0x26>
		TimerFlag = 0;
 360:	10 92 0b 01 	sts	0x010B, r1

	} // while (1)
 364:	f8 cf       	rjmp	.-16     	; 0x356 <main+0x24>

00000366 <_exit>:
 366:	f8 94       	cli

00000368 <__stop_program>:
 368:	ff cf       	rjmp	.-2      	; 0x368 <__stop_program>
