
rgosh001_lab1_part3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  0000014e  000001c2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000014e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001c2  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000020  00000000  00000000  000001f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000096  00000000  00000000  00000212  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000062  00000000  00000000  000002a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000011f  00000000  00000000  0000030a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000034  00000000  00000000  0000042c  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000160  00000000  00000000  00000460  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000048  00000000  00000000  000005c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000010  00000000  00000000  00000608  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	02 d0       	rcall	.+4      	; 0x9e <main>
  9a:	57 c0       	rjmp	.+174    	; 0x14a <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <main>:

#include <avr/io.h>

int main(void)

{
  9e:	cf 93       	push	r28
  a0:	df 93       	push	r29
  a2:	1f 92       	push	r1
  a4:	cd b7       	in	r28, 0x3d	; 61
  a6:	de b7       	in	r29, 0x3e	; 62

	DDRA = 0x00;
  a8:	81 e2       	ldi	r24, 0x21	; 33
  aa:	90 e0       	ldi	r25, 0x00	; 0
  ac:	fc 01       	movw	r30, r24
  ae:	10 82       	st	Z, r1
	DDRC = 0xFF;
  b0:	87 e2       	ldi	r24, 0x27	; 39
  b2:	90 e0       	ldi	r25, 0x00	; 0
  b4:	2f ef       	ldi	r18, 0xFF	; 255
  b6:	fc 01       	movw	r30, r24
  b8:	20 83       	st	Z, r18
	
	unsigned char inc = 0x04;
  ba:	84 e0       	ldi	r24, 0x04	; 4
  bc:	89 83       	std	Y+1, r24	; 0x01
	while(1)
	{
		inc = 0x04;
  be:	84 e0       	ldi	r24, 0x04	; 4
  c0:	89 83       	std	Y+1, r24	; 0x01
		if (PINA & 0x01)
  c2:	80 e2       	ldi	r24, 0x20	; 32
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	fc 01       	movw	r30, r24
  c8:	80 81       	ld	r24, Z
  ca:	88 2f       	mov	r24, r24
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	81 70       	andi	r24, 0x01	; 1
  d0:	99 27       	eor	r25, r25
  d2:	00 97       	sbiw	r24, 0x00	; 0
  d4:	19 f0       	breq	.+6      	; 0xdc <main+0x3e>
		{
			inc--;
  d6:	89 81       	ldd	r24, Y+1	; 0x01
  d8:	81 50       	subi	r24, 0x01	; 1
  da:	89 83       	std	Y+1, r24	; 0x01
		}
		if (PINA & 0x02)
  dc:	80 e2       	ldi	r24, 0x20	; 32
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	fc 01       	movw	r30, r24
  e2:	80 81       	ld	r24, Z
  e4:	88 2f       	mov	r24, r24
  e6:	90 e0       	ldi	r25, 0x00	; 0
  e8:	82 70       	andi	r24, 0x02	; 2
  ea:	99 27       	eor	r25, r25
  ec:	00 97       	sbiw	r24, 0x00	; 0
  ee:	19 f0       	breq	.+6      	; 0xf6 <main+0x58>
		{ 
			inc--;
  f0:	89 81       	ldd	r24, Y+1	; 0x01
  f2:	81 50       	subi	r24, 0x01	; 1
  f4:	89 83       	std	Y+1, r24	; 0x01
		}
		if (PINA & 0x04)
  f6:	80 e2       	ldi	r24, 0x20	; 32
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	fc 01       	movw	r30, r24
  fc:	80 81       	ld	r24, Z
  fe:	88 2f       	mov	r24, r24
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	84 70       	andi	r24, 0x04	; 4
 104:	99 27       	eor	r25, r25
 106:	00 97       	sbiw	r24, 0x00	; 0
 108:	19 f0       	breq	.+6      	; 0x110 <main+0x72>
		{
			inc--;
 10a:	89 81       	ldd	r24, Y+1	; 0x01
 10c:	81 50       	subi	r24, 0x01	; 1
 10e:	89 83       	std	Y+1, r24	; 0x01
		}
		if (PINA & 0x08)
 110:	80 e2       	ldi	r24, 0x20	; 32
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	fc 01       	movw	r30, r24
 116:	80 81       	ld	r24, Z
 118:	88 2f       	mov	r24, r24
 11a:	90 e0       	ldi	r25, 0x00	; 0
 11c:	88 70       	andi	r24, 0x08	; 8
 11e:	99 27       	eor	r25, r25
 120:	00 97       	sbiw	r24, 0x00	; 0
 122:	19 f0       	breq	.+6      	; 0x12a <main+0x8c>
		{
			inc--;
 124:	89 81       	ldd	r24, Y+1	; 0x01
 126:	81 50       	subi	r24, 0x01	; 1
 128:	89 83       	std	Y+1, r24	; 0x01
		}
		if (inc == 0x00)
 12a:	89 81       	ldd	r24, Y+1	; 0x01
 12c:	88 23       	and	r24, r24
 12e:	39 f4       	brne	.+14     	; 0x13e <main+0xa0>
		{
			PORTC = (0x40 | inc);
 130:	88 e2       	ldi	r24, 0x28	; 40
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	29 81       	ldd	r18, Y+1	; 0x01
 136:	20 64       	ori	r18, 0x40	; 64
 138:	fc 01       	movw	r30, r24
 13a:	20 83       	st	Z, r18
		}
		else
		{
			PORTC = inc;
		}
	}
 13c:	c0 cf       	rjmp	.-128    	; 0xbe <main+0x20>
			PORTC = (0x40 | inc);
			//PORTC = 0x40;
		}
		else
		{
			PORTC = inc;
 13e:	88 e2       	ldi	r24, 0x28	; 40
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	29 81       	ldd	r18, Y+1	; 0x01
 144:	fc 01       	movw	r30, r24
 146:	20 83       	st	Z, r18
		}
	}
 148:	ba cf       	rjmp	.-140    	; 0xbe <main+0x20>

0000014a <_exit>:
 14a:	f8 94       	cli

0000014c <__stop_program>:
 14c:	ff cf       	rjmp	.-2      	; 0x14c <__stop_program>
